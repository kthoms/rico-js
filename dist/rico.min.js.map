{"version":3,"sources":["webpack://ricojs/webpack/universalModuleDefinition","webpack://ricojs/webpack/bootstrap","webpack://ricojs/./node_modules/emitter-component/index.js","webpack://ricojs/./src/logging/constants.js","webpack://ricojs/./src/utils/index.js","webpack://ricojs/./src/logging/logger.js","webpack://ricojs/./src/logging/loggerfactory.js","webpack://ricojs/./src/platform/client.js","webpack://ricojs/./src/platform/serviceProvider.js","webpack://ricojs/./src/platform/constants.js","webpack://ricojs/./src/http/httpResponse.js","webpack://ricojs/./src/http/httpException.js","webpack://ricojs/./src/http/executor.js","webpack://ricojs/./src/http/reponseBuilder.js","webpack://ricojs/./src/http/requestBuilder.js","webpack://ricojs/./src/http/httpClient.js","webpack://ricojs/./src/http/httpClientInterceptor.js","webpack://ricojs/./src/platform/clientScope.js","webpack://ricojs/./src/remoting/commands/commandConstants.js","webpack://ricojs/./src/remoting/commandBatcher.js","webpack://ricojs/./src/remoting/constants.js","webpack://ricojs/./src/remoting/commands/impl/valueChangedCommand.js","webpack://ricojs/./src/remoting/commands/impl/attributeMetadataChangedCommand.js","webpack://ricojs/./src/remoting/commands/impl/callActionCommand.js","webpack://ricojs/./src/remoting/commands/impl/changeAttributeMetadataCommand.js","webpack://ricojs/./src/remoting/commands/impl/createContextCommand.js","webpack://ricojs/./src/remoting/commands/impl/createControllerCommand.js","webpack://ricojs/./src/remoting/commands/impl/createPresentationModelCommand.js","webpack://ricojs/./src/remoting/commands/impl/deletePresentationModelCommand.js","webpack://ricojs/./src/remoting/commands/impl/destroyContextCommand.js","webpack://ricojs/./src/remoting/commands/impl/destroyControllerCommand.js","webpack://ricojs/./src/remoting/commands/impl/interruptLongPollCommand.js","webpack://ricojs/./src/remoting/commands/impl/presentationModelDeletedCommand.js","webpack://ricojs/./src/remoting/commands/impl/startLongPollCommand.js","webpack://ricojs/./src/remoting/commands/codecError.js","webpack://ricojs/./src/remoting/commands/codec.js","webpack://ricojs/./src/remoting/eventBus.js","webpack://ricojs/./src/remoting/clientPresentationModel.js","webpack://ricojs/./src/remoting/clientConnector.js","webpack://ricojs/./src/remoting/clientAttribute.js","webpack://ricojs/./src/remoting/clientDolphin.js","webpack://ricojs/./src/remoting/attribute.js","webpack://ricojs/./src/remoting/commands/commandFactory.js","webpack://ricojs/./src/remoting/clientModelStore.js","webpack://ricojs/./src/remoting/noTransmitter.js","webpack://ricojs/./src/remoting/dolphinBuilder.js","webpack://ricojs/./src/remoting/connector.js","webpack://ricojs/./src/remoting/beanManager.js","webpack://ricojs/./src/remoting/classRepository.js","webpack://ricojs/./src/remoting/controllerProxy.js","webpack://ricojs/./src/remoting/controllerManager.js","webpack://ricojs/./src/remoting/clientContext.js","webpack://ricojs/./src/remoting/errors.js","webpack://ricojs/./src/remoting/remotingErrorHandler.js","webpack://ricojs/./src/remoting/platformHttpTransmitter.js","webpack://ricojs/./src/remoting/clientContextFactory.js","webpack://ricojs/./src/security/keycloakConnection.js","webpack://ricojs/./src/security/keycloakFunctions.js","webpack://ricojs/./src/security/securityHttpClientInterceptor.js","webpack://ricojs/./src/security/keycloakSecurity.js","webpack://ricojs/./src/http/index.js","webpack://ricojs/./src/index.js","webpack://ricojs/./src/remoting/index.js","webpack://ricojs/./src/security/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","m","Emitter","obj","key","prototype","mixin","on","addEventListener","event","fn","this","_callbacks","push","once","self","off","apply","arguments","removeListener","removeAllListeners","removeEventListener","length","cb","callbacks","i","splice","emit","args","slice","call","len","listeners","hasListeners","_checkMethodName","LogLevel","NONE","name","text","level","ALL","TRACE","DEBUG","INFO","WARN","ERROR","exists","object","checkMethod","checkParam","param","parameterName","Error","parseUrl","url","scheme","matches","match","substring","query","fragment","path","split","reduce","params","hash","val","Object","assign","hostname","port","location","protocol","indexOf","parseInt","user","password","LOCALS","pad","size","result","internalLog","Array","from","func","shift","context","logLevel","date","Date","dateString","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","getCookie","document","cookie","parts","pop","Logger","console","isLogLevel","log","warn","error","rootLogger","getLogLevel","levelName","ROOT_LOGGER","loggers","Map","LoggerFactory","existingLogger","get","logger","set","Client","LOGGER","getLogger","services","serviceProviders","configuration","getService","service","provider","hasService","getAllServiceTypes","forEach","serviceProvider","registerServiceProvider","getName","debug","init","trace","initServiceProvider","ServiceProvider","serviceInstance","serviceClass","client","RESPONSE_TYPE","HTTP","METHOD","GET","POST","PUT","DELETE","STATUS","ACCEPTED","BAD_GATEWAY","BAD_REQUEST","CONFLICT","CONTINUE","CREATED","EXPECTATION_FAILED","FAILED_DEPENDENCY","FORBIDDEN","GATEWAY_TIMEOUT","GONE","HTTP_VERSION_NOT_SUPPORTED","IM_A_TEAPOT","INSUFFICIENT_SPACE_ON_RESOURCE","INSUFFICIENT_STORAGE","INTERNAL_SERVER_ERROR","LENGTH_REQUIRED","LOCKED","METHOD_FAILURE","METHOD_NOT_ALLOWED","MOVED_PERMANENTLY","MOVED_TEMPORARILY","MULTI_STATUS","MULTIPLE_CHOICES","NETWORK_AUTHENTICATION_REQUIRED","NO_CONTENT","NON_AUTHORITATIVE_INFORMATION","NOT_ACCEPTABLE","NOT_FOUND","NOT_IMPLEMENTED","NOT_MODIFIED","OK","PARTIAL_CONTENT","PAYMENT_REQUIRED","PERMANENT_REDIRECT","PRECONDITION_FAILED","PRECONDITION_REQUIRED","PROCESSING","PROXY_AUTHENTICATION_REQUIRED","REQUEST_HEADER_FIELDS_TOO_LARGE","REQUEST_TIMEOUT","REQUEST_TOO_LONG","REQUEST_URI_TOO_LONG","REQUESTED_RANGE_NOT_SATISFIABLE","RESET_CONTENT","SEE_OTHER","SERVICE_UNAVAILABLE","SWITCHING_PROTOCOLS","TEMPORARY_REDIRECT","TOO_MANY_REQUESTS","UNAUTHORIZED","UNPROCESSABLE_ENTITY","UNSUPPORTED_MEDIA_TYPE","USE_PROXY","HEADER_NAME","ACCEPT","ACCEPT_CHARSET","ACCEPT_ENCODING","ACCEPT_LANGUAGE","ACCEPT_DATETIME","AUTHORIZATION","CACHE_CONTROL","CONNECTION","COOKIE","CONTENT_LENGTH","CONTENT_MD5","CONTENT_TYPE","DATE","EXPECT","FORWARDED","FROM","HOST","IF_MATCH","IF_MODIFIED_SINCE","IF_NONE_MATCH","IF_RANGE","MAX_FORWARDS","PRAGMA","PROXY_AUTHORIZATION","REFERER","TE","USER_AGENT","X_CLIENT_ID","X_CLIENT_SESSION_ID","X_PLATFORM_SECURITY_REALM","X_PLATFORM_SECURITY_BEARER_ONLY","X_PLATFORM_SECURITY_APPLICATION","APPLICATION_JSON","APPLICATION_X_WWW_FORM_URLENCODED","TEXT_HTML","TEXT_PLAIN","XMLHTTPREQUEST_READYSTATE","UNSENT","OPENED","HEADERS_RECEIVED","LOADING","DONE","SECURITY","HttpResponse","content","status","headers","toLowerCase","headerArray","trim","header","value","join","HttpException","message","timedout","Executor","timeout","worker","httpWorker","useWorker","timeoutToUse","requestInterceptors","getRequestInterceptors","responseInterceptors","getResponseInterceptors","directCall","resolve","reject","httpRequest","XMLHttpRequest","open","method","withCredentials","handleRequest","setRequestHeader","responseType","ontimeout","statusText","httpException","onerror","onreadystatechange","readyState","httpResponse","response","getAllResponseHeaders","handleResponse","send","requestBody","bind","workerCall","collectedRequestHeaders","createWorker","onmessage","terminate","msg","data","responseHeaders","postMessage","conf","requestHeaders","Promise","ResponseBuilder","executor","RequestBuilder","headersInfo","hasOwnProperty","reponseBuilder","HttpClient","requestBuilder","request","HttpClientInterceptor","handler","requestHandlers","add","list","responseHandlers","Set","ClientScope","clientId","getClientId","newClientId","getHeaderByName","setClientId","addRequestInterceptor","addResponseInterceptor","calcKey","clientIds","ATTRIBUTE_METADATA_CHANGED_COMMAND_ID","CALL_ACTION_COMMAND_ID","CHANGE_ATTRIBUTE_METADATA_COMMAND_ID","CREATE_CONTEXT_COMMAND_ID","CREATE_CONTROLLER_COMMAND_ID","CREATE_PRESENTATION_MODEL_COMMAND_ID","DELETE_PRESENTATION_MODEL_COMMAND_ID","DESTROY_CONTEXT_COMMAND_ID","DESTROY_CONTROLLER_COMMAND_ID","INTERRUPT_LONG_POLL_COMMAND_ID","PRESENTATION_MODEL_DELETED_COMMAND_ID","START_LONG_POLL_COMMAND_ID","VALUE_CHANGED_COMMAND_ID","ATTRIBUTE_ID","PM_ID","CONTROLLER_ID","BlindCommandBatcher","queue","batch","batchLength","maxBatchSize","element","folding","command","id","attributeId","newValue","REMOVED_TYPE","ValueChangedCommand","AttributeMetadataChangedCommand","metadataName","CallActionCommand","controllerid","actionName","ChangeAttributeMetadataCommand","CreateContextCommand","CreateControllerCommand","controllerName","parentControllerId","CreatePresentationModelCommand","presentationModel","attributes","clientSideOnly","pmId","pmType","presentationModelType","getAttributes","attr","propertyName","getValue","DeletePresentationModelCommand","DestroyContextCommand","DestroyControllerCommand","controllerId","InterruptLongPollCommand","PresentationModelDeletedCommand","StartLongPollCommand","CodecError","Codec","jsonCommand","map","attribute","commands","JSON","stringify","_encodeAttributeMetadataChangedCommand","_encodeCallActionCommand","_encodeChangeAttributeMetadataCommand","_encodeCreateContextCommand","_encodeCreateControllerCommand","_encodeCreatePresentationModelCommand","_encodeDeletePresentationModelCommand","_encodeDestroyContextCommand","_encodeDestroyControllerCommand","_encodeInterruptLongPollCommand","_encodePresentationModelDeletedCommand","_encodeStartLongPollCommand","_encodeValueChangedCommand","transmitted","parse","_decodeAttributeMetadataChangedCommand","_decodeCallActionCommand","_decodeChangeAttributeMetadataCommand","_decodeCreateContextCommand","_decodeCreateControllerCommand","_decodeCreatePresentationModelCommand","_decodeDeletePresentationModelCommand","_decodeDestroyContextCommand","_decodeDestroyControllerCommand","_decodeInterruptLongPollCommand","_decodePresentationModelDeletedCommand","_decodeStartLongPollCommand","_decodeValueChangedCommand","EventBus","eventHandler","eventHandlers","handle","presentationModelInstanceCount","ClientPresentationModel","attributeCopy","copy","addAttribute","findAttributeByPropertyName","getQualifier","findAttributeByQualifier","setPresentationModel","onValueChange","invalidBus","trigger","source","handleInvalidate","onEvent","qualifier","sourcePresentationModel","targetAttribute","sourceAttribute","getAt","syncWith","dirty","toString","dirtyValueChangeBus","ClientConnector","newBatcher","commandBatcher","enabled","pushEnabled","newListener","pushListener","newCommand","releaseCommand","onFinished","commandQueue","currentlySending","release","doSendNext","enqueuePushCommand","cmdsAndHandlers","callback","cah","transmitter","transmit","touchedPMs","touched","setTimeout","slackMS","onError","handleDeletePresentationModelCommand","handleCreatePresentationModelCommand","handleValueChangedCommand","handleAttributeMetadataChangedCommand","serverCommand","model","clientDolphin","findPresentationModelById","getClientModelStore","deletePresentationModel","containsPresentationModel","clientAttribute","clientPm","addAttributes","updatePresentationModelQualifier","findAttributeById","setValueFromServer","waiting","me","onFinishedData","signal","codec","ClientAttribute","String","Boolean","Number","valueOf","checkValue","ok","SUPPORTED_VALUE_TYPES","verifiedValue","oldValue","valueChangeBus","newQualifier","oldQualifier","qualifierChangeBus","setQualifier","setValue","clientAttributeInstanceCount","ClientDolphin","clientConnector","type","clientModelStore","listPresentationModelIds","listPresentationModels","findAllPresentationModelByType","modelToDelete","updateAttributeQualifier","findAllAttributesByQualifier","pushCommand","setPushListener","setReleaseCommand","setPushEnabled","listen","Attribute","QUALIFIER_PROPERTY","VALUE","CommandFactory","ClientModelStore","addAttributeById","addAttributeByQualifier","evt","sendToServer","createValueChangedCommand","getClientConnector","findAttributesByFilter","onQualifierChange","createChangeAttributeMetadataCommand","presentationModels","has","added","addPresentationModelByType","createCreatePresentationModelCommand","registerAttribute","modelStoreChangeBus","removed","removePresentationModelByType","removeAttributeById","removeAttributeByQualifier","filter","presentationModelsPerType","iter","keys","next","done","values","notify","remove","createPresentationModelDeletedCommand","attributesPerId","attributesPerQualifier","pmStoreEvent","clientPresentationModel","NoTransmitter","onDone","DolphinBuilder","setClientConnector","setClientModelStore","dolphinBuilder","DOLPHIN_BEAN","ACTION_CALL_BEAN","SOURCE_SYSTEM","Connector","dolphin","startPushListening","createStartLongPollCommand","createInterruptLongPollCommand","classRepository","registerClass","highlanderPMResolver","spliceListEntry","load","unregisterClass","unload","reason","highlanderPMPromise","config","onModelStoreChange","sourceSystem","eventType","onModelAdded","onModelRemoved","BeanManager","bean","handlerList","addedHandlers","e","allAddedHandlers","removedHandlers","allRemovedHandlers","index","count","newElements","arrayUpdatedHandlers","allArrayUpdatedHandlers","updatedHandlers","allUpdatedHandlers","notifyBeanChange","removedElements","notifyArrayChange","collection","predicate","concat","unsubscribe","_handleBeanAdded","_handleBeanRemoved","_handleBeanUpdate","_handleArrayUpdate","onBeanAdded","onBeanRemoved","onBeanUpdate","onArrayUpdate","ClassRepository","modelId","to","classes","toDolphin","propertyUpdateHandlers","undefined","blocked","beanToDolphin","fromDolphin","isBlocked","array","removedElementsCount","isArray","sendListSplice","beanAddedHandlers","beanRemovedHandlers","arrayUpdateHandlers","classInfo","search","beanFromDolphin","classInfos","validateList","block","unblock","toISOString","TypeError","fixType","parseFloat","ControllerProxy","destroyed","manager","invokeAction","_createController","getId","onDestroyedHandlers","destroyController","ERROR_CODE","ControllerManager","connector","getHighlanderPM","then","highlanderPM","MSG_ERROR_CREATING_CONTROLLER","invoke","createCreateControllerCommand","getValueWithRetry","ctrlId","mapDolphinToBean","controller","controllers","getValueCall","errorMessage","intervalID","setInterval","clearInterval","pm","actionParams","mapParamToDolphin","createCallActionCommand","createDestroyControllerCommand","controllersCopy","promises","destroy","all","ClientContext","connectionPromise","_connector","connect","createCreateContextCommand","isConnected","_controllerManager","createController","stopPushListening","createDestroyContextCommand","beanManager","controllerManager","DolphinRemotingError","detail","DolphinSessionError","RemotingErrorHandler","PlatformHttpTransmitter","connection","connectionConfig","_connectionConfig","errorHandlers","encodedCommands","encode","isLogLevelUseable","httpClient","failed_attempt","maxRetry","post","withHeadersInfo","withContent","readString","execute","exception","getStatus","_handleError","_send","responseText","responseCommands","decode","err","errorMsg","ClientContextFactory","clientContext","withTransmitter","withSlackMS","withMaxBatchSize","MAX_SAFE_INTEGER","build","legecyClientSupport","KeycloakConnection","authEndpoint","realmName","KeycloakFunctions","directConnection","appName","encodedUser","encodeURIComponent","encodedPassword","encodedAppName","createDirectConnection","createServerProxyConnection","refreshToken","body","createRefreshConnection","receiveToken","SecurityHttpClientInterceptor","token","realm","KeycloakSecurity","isAuthorized","functions","createLoginConnection","access_token","interceptor","setToken","setRealm","setAppName","expires","expires_in","MIN_TOKEN_EXPIRES_RUN","sleepTime","Math","max","TOKEN_EXPIRES_DELTA","intervall","refresh_token","httpClientProvider","httpClientInterceptorProvider","registerHttp","clientScopeProvider","registerClientScope","clientContextFactoryProvider","registerRemotingScope","securityProvider","registerSecurity","info","RICO_VERSION","Worker","Blob","URL","createObjectURL","HttpWorker","blob","httpWorkerProvider","RICO_WORKER","showWarning","create","c","d","getter","o","defineProperty","enumerable","r","Symbol","toStringTag","t","mode","__esModule","ns","n","property","p","s","moduleId","l","modules"],"mappings":"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","file":"rico.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ricojs\"] = factory();\n\telse\n\t\troot[\"ricojs\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","\n/**\n * Expose `Emitter`.\n */\n\nmodule.exports = Emitter;\n\n/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nfunction Emitter(obj) {\n  if (obj) return mixin(obj);\n};\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks[event] = this._callbacks[event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  var self = this;\n  this._callbacks = this._callbacks || {};\n\n  function on() {\n    self.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks[event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks[event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n  var args = [].slice.call(arguments, 1)\n    , callbacks = this._callbacks[event];\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks[event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n","const LogLevel = {\n    NONE: { name: 'NONE', text: '[NONE ]', level: 0 },\n    ALL: { name: 'ALL', text: '[ALL  ]', level: 100 },\n    TRACE: { name: 'TRACE', text: '[TRACE]', level: 5 },\n    DEBUG: { name: 'DEBUG', text: '[DEBUG]', level: 4 },\n    INFO: { name: 'INFO', text: '[INFO ]', level: 3 },\n    WARN: { name: 'WARN', text: '[WARN ]', level: 2 },\n    ERROR: { name: 'ERROR', text: '[ERROR]', level: 1 },\n};\n\nexport { LogLevel };","var _checkMethodName;\n\nexport function exists(object) {\n    return typeof object !== 'undefined' && object !== null;\n}\n\nexport function checkMethod(name) {\n    _checkMethodName = name;\n}\n\nexport function checkParam(param, parameterName) {\n    if(!exists(param)) {\n        throw new Error('The parameter ' + parameterName + ' is mandatory in ' + _checkMethodName);\n    }\n}\n\nexport function parseUrl(url) {\n    //https://jsperf.com/url-parsing\n    const pattern = /^(((([^:\\/#\\?]+:)?(?:(\\/\\/)((?:(([^:@\\/#\\?]+)(?:\\:([^:@\\/#\\?]+))?)@)?(([^:\\/#\\?\\]\\[]+|\\[[^\\/\\]@#?]+\\])(?:\\:([0-9]+))?))?)?)?((\\/?(?:[^\\/\\?#]+\\/+)*)([^\\?#]*)))?(\\?[^#]+)?)(#.*)?/\n    const matches =  url.match(pattern);\n\n    let scheme;\n    if (matches[4] && matches[4].length > 1) {\n        scheme = matches[4].substring(0, matches[4].length-1);\n    }\n\n    let path = matches[13];\n\n    let query;\n    if (matches[16] && matches[16].length > 1) {\n        query = matches[16].substring(1, matches[16].length);\n        const hashes = query.split('&');\n        query = hashes.reduce((params, hash) => {\n            let [key, val] = hash.split('=')\n            return Object.assign(params, {[key]: val})\n        }, {});\n    }\n\n    let fragment;\n    if (matches[17] && matches[17].length > 1) {\n        fragment = matches[17].substring(1, matches[17].length);\n    }\n\n    let hostname = matches[11];\n    let port = matches[12];\n    if (hostname && !port && scheme === 'http') {\n        port = 80;\n    } else if (hostname && !port && scheme === 'https') {\n        port = 443;\n    }\n\n    //relative url? get hostname and port from the browser\n    if (!hostname && !port && !scheme) {\n        \n        if (window && window.location && window.location.hostname) {\n            hostname = window.location.hostname;\n        }\n        if (window && window.location && window.location.port) {\n            port = window.location.port;\n        }\n        if (window && window.location && window.location.protocol) {\n            scheme = window.location.protocol.substring(0, window.location.protocol.length-1) ;\n        }\n        // strip '.' from relative path\n        if (path.indexOf('.') === 0) {\n            path = path.substring(1, path.length);\n        }\n    }\n\n    // port should be a number, always\n    if (port) {\n        port = parseInt(port);\n    }\n\n    return {\n        scheme: scheme,\n        user: matches[8],\n        password: matches[9],\n        hostname: hostname,\n        port: port,\n        path: path,\n        query: query,\n        fragment: fragment\n    };\n    \n}\n\n","import {checkParam, exists} from '../utils'\nimport { LogLevel } from \"./constants\";\n\n// private methods\nconst LOCALS = {\n    pad (text, size) {\n        let result = '' + text;\n        while (result.length < size) {\n            result = '0' + result;\n        }\n        return result;\n    },\n    internalLog () {\n        const args = Array.from(arguments);\n        const func = args.shift();\n        const context = args.shift();\n        const logLevel = args.shift();\n        const date = new Date();\n        const dateString =  date.getFullYear() + '-' + LOCALS.pad(date.getMonth() + 1, 2) + '-' + LOCALS.pad(date.getDate(), 2) + ' ' + LOCALS.pad(date.getHours(), 2) + ':' + LOCALS.pad(date.getMinutes(), 2) + ':' + LOCALS.pad(date.getSeconds(), 2) + '.' + LOCALS.pad(date.getMilliseconds(), 3);\n        func(dateString, logLevel.text, context, ...args);\n\n    },\n    getCookie (name) {\n        if (exists(window) && exists(window.document) && exists(window.document.cookie)) {       \n            const value = '; ' + window.document.cookie;\n            const parts = value.split('; ' + name + '=');\n            if ( parts.length === 2 ) {\n                return parts.pop().split(';').shift();\n            }\n        }\n    }\n};\n\n\n// public\nclass Logger {\n\n    constructor(context, rootLogger) {\n        this.context = context;\n        this.rootLogger = rootLogger;\n        const cookieLogLevel = LOCALS.getCookie('RICO_LOGGER_' + this.context);\n        switch (cookieLogLevel) {\n            case 'NONE':\n                this.logLevel = LogLevel.NONE;\n                break;\n            case 'ALL':\n                this.logLevel = LogLevel.ALL;\n                break;\n            case 'TRACE':\n                this.logLevel = LogLevel.TRACE;\n                break;\n            case 'DEBUG':\n                this.logLevel = LogLevel.DEBUG;\n                break;\n            case 'INFO':\n                this.logLevel = LogLevel.INFO;\n                break;\n            case 'WARN':\n                this.logLevel = LogLevel.WARN;\n                break;\n            case 'ERROR':\n                this.logLevel = LogLevel.ERROR;\n                break;\n        }\n\n    }\n\n    trace() {\n        if (exists(console) && this.isLogLevel(LogLevel.TRACE)) {\n            LOCALS.internalLog(console.log, this.context, LogLevel.TRACE, ...arguments);\n        }\n    }\n\n    debug() {\n        if (exists(console) && this.isLogLevel(LogLevel.DEBUG)) {\n            LOCALS.internalLog(console.log, this.context, LogLevel.DEBUG, ...arguments);\n        }\n    }\n\n    info() {\n        if (exists(console) && this.isLogLevel(LogLevel.INFO)) {\n            LOCALS.internalLog(console.log, this.context, LogLevel.INFO, ...arguments);\n        }\n    }\n\n    warn() {\n        if (exists(console) && this.isLogLevel(LogLevel.WARN)) {\n            LOCALS.internalLog(console.warn, this.context, LogLevel.WARN, ...arguments);\n        }\n    }\n\n    error() {\n        if (exists(console) && this.isLogLevel(LogLevel.ERROR)) {\n            LOCALS.internalLog(console.error, this.context, LogLevel.ERROR, ...arguments);\n        }\n    }\n\n    getLogLevel() {\n        if (exists(this.logLevel)) {\n            return this.logLevel;\n        } else if (exists(this.rootLogger)) {\n            return this.rootLogger.getLogLevel();\n        } else {\n            return LogLevel.INFO;\n        }\n    }\n\n    setLogLevel(level) {\n        this.logLevel = level;\n    }\n\n    setLogLevelByName(levelName) {\n        if (exists(LogLevel[levelName])) {\n            this.logLevel = LogLevel[levelName];\n        }\n    }\n\n    isLogLevel(level) {\n        if (this.getLogLevel() === LogLevel.NONE) {\n            return false;\n        }\n        if (this.getLogLevel() === LogLevel.ALL) {\n            return true;\n        }\n        if (this.getLogLevel() === LogLevel.TRACE) {\n            return true;\n        }\n        if (this.getLogLevel() === LogLevel.DEBUG && level !== LogLevel.TRACE) {\n            return true;\n        }\n        if (this.getLogLevel() === LogLevel.INFO && level !== LogLevel.TRACE && level !== LogLevel.DEBUG) {\n            return true;\n        }\n        if (this.getLogLevel() === LogLevel.WARN && level !== LogLevel.TRACE && level !== LogLevel.DEBUG && level !== LogLevel.INFO) {\n            return true;\n        }\n        if (this.getLogLevel() === LogLevel.ERROR && level !== LogLevel.TRACE && level !== LogLevel.DEBUG && level !== LogLevel.INFO && level !== LogLevel.WARN) {\n            return true;\n        }\n        return false;\n    }\n\n    isLogLevelUseable(level) {\n        checkParam(level, 'level');\n        if (level.level) {\n            return this.getLogLevel().level >= level.level;\n        } else {\n            return false;\n        }\n    }\n}\n\nexport { Logger };","import { exists } from \"../utils\";\nimport { Logger } from \"./logger\";\n\nconst ROOT_LOGGER = new Logger('ROOT');\n\n// private methods\nconst LOCALS = {\n    loggers: new Map()\n};\n\n\n// public\nclass LoggerFactory {\n\n    static getLogger(context) {\n        if (!exists(context) || context === 'ROOT') {\n            return ROOT_LOGGER;\n        }\n        const existingLogger = LOCALS.loggers.get(context);\n        if (existingLogger) {\n            return existingLogger;\n        }\n\n        const logger = new Logger(context, ROOT_LOGGER);\n        LOCALS.loggers.set(context, logger);\n        return logger;\n    }\n}\n\nexport { LoggerFactory }","import {exists} from '../utils';\nimport { LoggerFactory } from '../logging';\n\nclass Client {\n\n}\n\nClient.LOGGER = LoggerFactory.getLogger('Client');\n\nClient.services = new Map();\nClient.serviceProviders = new Map();\nClient.configuration = {};\n\nClient.getService = function(name) {\n    let service = Client.services.get(name);\n    if (!exists(service)) {\n        let provider = Client.serviceProviders.get(name);\n        if (!exists(provider)) {\n            throw new Error('No service provider found for ' + name);\n        } else {\n            service = provider.getService(Client.configuration);\n            Client.services.set(name, service);\n        }\n    }\n    return service;\n};\n\nClient.hasService = function(name) {\n    const provider = Client.serviceProviders.get(name);\n    if (!exists(provider)) {\n        return false;\n    } else {\n        return true;\n    }\n};\n\nClient.getAllServiceTypes = function() {\n    let result = [];\n    Client.serviceProviders.forEach((serviceProvider) => result.push(serviceProvider));\n    return result;\n};\n\n\nClient.registerServiceProvider = function(serviceProvider) {\n    if (serviceProvider === null || typeof serviceProvider === 'undefined') {\n        throw new Error('Cannot register empty service provider');\n    }\n    \n    if (typeof serviceProvider.getName === 'function' && typeof serviceProvider.getService === 'function') {\n        const current = Client.serviceProviders.get(serviceProvider.getName());\n        if (!current) {\n            Client.serviceProviders.set(serviceProvider.getName(), serviceProvider);\n            Client.LOGGER.debug('Service provider registered with name', serviceProvider.getName());\n        } else {\n            throw new Error('Cannot register another service provider. Name already in use.');\n        }\n    } else {\n        throw new Error('Cannot register service provider without getName() and getService() methods');\n    }\n};\n\nClient.init = function() {\n    Client.serviceProviders.forEach((serviceProvider) => {\n        const service = serviceProvider.getService();\n        Client.LOGGER.trace('Initializing service for service provider', serviceProvider.getName());\n        if (typeof service.initServiceProvider === 'function') {\n            Client.LOGGER.debug('Initializing service', service);\n            service.initServiceProvider(Client);\n        }\n    });\n}\n\nexport { Client }","import { checkMethod, checkParam } from '../utils'\nclass ServiceProvider {\n\n    constructor(serviceClass, name, client) {\n        checkMethod('constructor');\n        checkParam(serviceClass, 'serviceClass');\n        checkParam(name, 'name');\n        \n        this.serviceInstance = new serviceClass(client);\n        this.name = name;\n    }\n\n    getName() {\n        return this.name;\n    }\n\n    getService() {\n        return this.serviceInstance;\n    }\n}\n\nexport { ServiceProvider }","// Reponse type\nexport const RESPONSE_TYPE = {\n    ARRAY_BUFFER: 'arraybuffer',\n    TEXT: 'text',\n    JSON: 'json'\n}\n\n// HTTP methods and status codes\nexport const HTTP = {\n    METHOD: {\n        GET: 'GET',\n        POST: 'POST',\n        PUT: 'PUT',\n        DELETE: 'DELETE'\n    },\n    STATUS: {\n        ACCEPTED: 202,\n        BAD_GATEWAY: 502,\n        BAD_REQUEST: 400,\n        CONFLICT: 409,\n        CONTINUE: 100,\n        CREATED: 201,\n        EXPECTATION_FAILED: 417,\n        FAILED_DEPENDENCY : 424,\n        FORBIDDEN: 403,\n        GATEWAY_TIMEOUT: 504,\n        GONE: 410,\n        HTTP_VERSION_NOT_SUPPORTED: 505,\n        IM_A_TEAPOT: 418,\n        INSUFFICIENT_SPACE_ON_RESOURCE: 419,\n        INSUFFICIENT_STORAGE: 507,\n        INTERNAL_SERVER_ERROR: 500,\n        LENGTH_REQUIRED: 411,\n        LOCKED: 423,\n        METHOD_FAILURE: 420,\n        METHOD_NOT_ALLOWED: 405,\n        MOVED_PERMANENTLY: 301,\n        MOVED_TEMPORARILY: 302,\n        MULTI_STATUS: 207,\n        MULTIPLE_CHOICES: 300,\n        NETWORK_AUTHENTICATION_REQUIRED: 511,\n        NO_CONTENT: 204,\n        NON_AUTHORITATIVE_INFORMATION: 203,\n        NOT_ACCEPTABLE: 406,\n        NOT_FOUND: 404,\n        NOT_IMPLEMENTED: 501,\n        NOT_MODIFIED: 304,\n        OK: 200,\n        PARTIAL_CONTENT: 206,\n        PAYMENT_REQUIRED: 402,\n        PERMANENT_REDIRECT: 308,\n        PRECONDITION_FAILED: 412,\n        PRECONDITION_REQUIRED: 428,\n        PROCESSING: 102,\n        PROXY_AUTHENTICATION_REQUIRED: 407,\n        REQUEST_HEADER_FIELDS_TOO_LARGE: 431,\n        REQUEST_TIMEOUT: 408,\n        REQUEST_TOO_LONG: 413,\n        REQUEST_URI_TOO_LONG: 414,\n        REQUESTED_RANGE_NOT_SATISFIABLE: 416,\n        RESET_CONTENT: 205,\n        SEE_OTHER: 303,\n        SERVICE_UNAVAILABLE: 503,\n        SWITCHING_PROTOCOLS: 101,\n        TEMPORARY_REDIRECT: 307,\n        TOO_MANY_REQUESTS: 429,\n        UNAUTHORIZED: 401,\n        UNPROCESSABLE_ENTITY: 422,\n        UNSUPPORTED_MEDIA_TYPE: 415,\n        USE_PROXY: 305\n    },\n    HEADER_NAME: {\n        ACCEPT: 'Accept',\n        ACCEPT_CHARSET: 'Accept-Charset', \n        ACCEPT_ENCODING: 'Accept-Encoding', \n        ACCEPT_LANGUAGE: 'Accept-Language',\n        ACCEPT_DATETIME: 'Accept-Datetime',\n        AUTHORIZATION: 'Authorization',\n        CACHE_CONTROL: 'Cache-Control',\n        CONNECTION: 'Connection',\n        COOKIE: 'Cookie',\n        CONTENT_LENGTH: 'Content-Length',\n        CONTENT_MD5: 'Content-MD5',\n        CONTENT_TYPE: 'Content-Type',\n        DATE: 'Date',\n        EXPECT: 'Expect',\n        FORWARDED: 'Forwarded',\n        FROM: 'From',\n        HOST: 'Host', \n        IF_MATCH: 'If-Match', \n        IF_MODIFIED_SINCE: 'If-Modified_Since',\n        IF_NONE_MATCH: 'If-None_Match',\n        IF_RANGE: 'If-Range',\n        MAX_FORWARDS: 'Max-Forwards',\n        PRAGMA: 'Pragma', \n        PROXY_AUTHORIZATION: 'Proxy-Authorization',\n        REFERER: 'Referer',\n        TE: 'TE',\n        USER_AGENT: 'User-Agent',\n        X_CLIENT_ID: 'X-Client-Id',\n        X_CLIENT_SESSION_ID: 'X-Client-Session-Id',\n        X_PLATFORM_SECURITY_REALM: 'X-platform-security-realm',\n        X_PLATFORM_SECURITY_BEARER_ONLY: 'X-platform-security-bearer-only',\n        X_PLATFORM_SECURITY_APPLICATION: 'X-platform-security-application'\n    },\n    CONTENT_TYPE: {\n        APPLICATION_JSON: 'application/json',\n        APPLICATION_X_WWW_FORM_URLENCODED: 'application/x-www-form-urlencoded',\n        TEXT_HTML: 'text/html',\n        TEXT_PLAIN: 'text/plain'\n    },\n    XMLHTTPREQUEST_READYSTATE: {\n        UNSENT: 0,\n        OPENED: 1,\n        HEADERS_RECEIVED: 2,\n        LOADING: 3,\n        DONE:4\n    }\n}\n\n// Security\nexport const SECURITY = {\n    AUTH_ENDPOINT: '/openid-connect'\n}","import { exists, checkMethod, checkParam } from '../utils';\nclass HttpResponse {\n\n    constructor(url, status, content, headers) {\n        this.url = url;\n        this.status = status;\n        this.content = content;\n        this.headers = {};\n        if (exists(headers) && typeof headers === 'string') {\n            const headerArray = headers.trim().split(/[\\r\\n]+/);\n            for (let i = 0; i < headerArray.length; i++) {\n                const line = headerArray[i];\n                const parts = line.split(': ');\n                if (parts.length === 2) {\n                    const header = parts.shift().toLowerCase();\n                    const value = parts.join(': ');\n                    this.headers[header] = value;\n                }\n            }\n        }\n    }\n\n    getUrl() {\n        return this.url;\n    }\n\n    getContent() {\n        return this.content;\n    }\n\n    getStatus() {\n        return this.status;\n    }\n\n    getHeaders() {\n        return this.headers;\n    }\n\n    getHeaderByName(name) {\n        checkMethod('getHeaderByName');\n        checkParam(name, 'name');\n        \n        return this.headers[name.toLowerCase()];\n    }\n\n}\n\nexport { HttpResponse }","class HttpException {\n\n    constructor(message, status, timedout) {\n        this.message = message;\n        this.status = status || 0;\n        this.timedout = timedout || false;\n    }\n\n    getMessage() {\n        return this.message;\n    }\n\n    getStatus() {\n        return this.status;\n    }\n\n    isTimedout() {\n        return this.timedout;\n    }\n\n}\n\nexport { HttpException }","import { LoggerFactory } from '../logging';\nimport { HttpResponse } from './httpResponse';\nimport { HttpException } from './httpException';\nimport { HTTP } from '../platform/constants';\nclass Executor {\n\n    constructor(configuration, client) {\n        this.configuration = configuration;\n        this.client = client;\n    }\n\n    execute(timeout, worker) {\n\n        let httpWorker = null;\n        if (this.client && this.client.hasService('HttpWorker')) {\n            httpWorker = this.client.getService('HttpWorker');\n        }\n\n        const useWorker = httpWorker !== null && (worker === true || timeout === true);\n        let timeoutToUse = 0;\n        if (timeout !== true && timeout !== false) {\n            timeoutToUse = timeout;\n        }\n\n        let requestInterceptors = [];\n        if (this.client) {\n            requestInterceptors = this.client.getService('HttpClientInterceptor').getRequestInterceptors();\n            Executor.LOGGER.trace('Request interceptors found:', requestInterceptors);\n        }\n\n        let responseInterceptors = [];\n        if (this.client) {\n            responseInterceptors = this.client.getService('HttpClientInterceptor').getResponseInterceptors();\n            Executor.LOGGER.trace('Response interceptors found:', responseInterceptors);\n        }\n\n        let directCall = (resolve, reject) => {\n\n            const self = this;\n            const httpRequest = new XMLHttpRequest();\n            const async = true;\n            \n            httpRequest.open(this.configuration.method, this.configuration.url, async);\n            httpRequest.url = this.configuration.url;\n            httpRequest.method = this.configuration.method;\n            httpRequest.withCredentials = true;\n\n            for (let i = 0; i < requestInterceptors.length; i++) {\n                const requestInterceptor = requestInterceptors[i];\n                requestInterceptor.handleRequest(httpRequest);\n            }\n\n            if (this.configuration.headers && this.configuration.headers.length > 0) {\n                for (let i = 0; i < this.configuration.headers.length; i++) {\n                    const header = this.configuration.headers[i];\n                    httpRequest.setRequestHeader(header.name, header.value);\n                }\n            }\n\n            httpRequest.timeout = timeoutToUse;\n\n            if (this.configuration.responseType) {\n                httpRequest.responseType = this.configuration.responseType;\n            }\n\n            httpRequest.ontimeout = function () {\n                const message = this.statusText || 'Timeout occurred';\n                const httpException = new HttpException(message, this.status, true);\n                Executor.LOGGER.error(httpException);\n                reject(httpException);\n            }\n\n            httpRequest.onerror = function () {\n                let message = this.statusText || 'Unspecified error occured';\n                const httpException = new HttpException(message, this.status);\n                Executor.LOGGER.error(httpException);\n                reject(httpException);\n            }\n\n            httpRequest.onreadystatechange = function () {\n                if (this.readyState === HTTP.XMLHTTPREQUEST_READYSTATE.DONE) {\n                    Executor.LOGGER.trace('Request to ', self.configuration.url, 'finished with', this.status);\n                }\n                if (this.readyState === HTTP.XMLHTTPREQUEST_READYSTATE.DONE && this.status >= 200 && this.status < 300) {\n                    // https://www.w3.org/TR/cors/#simple-response-header\n                    const httpResponse = new HttpResponse(this.url, this.status, this.response, this.getAllResponseHeaders());\n                    \n                    for (let i = 0; i < responseInterceptors.length; i++) {\n                        const responseInterceptor = responseInterceptors[i];\n                        responseInterceptor.handleResponse(httpResponse);\n                    }\n\n                    resolve(httpResponse);\n                } else if (this.readyState === HTTP.XMLHTTPREQUEST_READYSTATE.DONE && this.status >= 300) {\n                    const httpException = new HttpException(this.statusText, this.status);\n                    Executor.LOGGER.error(httpException);\n                    reject(httpException);\n                }\n            }\n\n            httpRequest.send(this.configuration.requestBody);\n\n        }\n        directCall = directCall.bind(this);\n\n        let workerCall = (resolve, reject) => {\n           \n            const collectedRequestHeaders = [];\n            for (let i = 0; i < requestInterceptors.length; i++) {\n                const requestInterceptor = requestInterceptors[i];\n                \n                requestInterceptor.handleRequest({\n                    url: this.configuration.url,\n                    setRequestHeader: (name, value) => {\n                        const header = {name, value};\n                        collectedRequestHeaders.push(header);\n                    }\n                });\n            }\n\n            const worker = httpWorker.createWorker();\n            try {\n                worker.onmessage = function(event) {\n                    worker.terminate();\n                    Executor.LOGGER.trace('Message form Worker', event);\n                    const msg = event.data;\n                    if (msg.error) {\n                        const httpException = new HttpException(msg.message, msg.status, msg.timedout);\n                        Executor.LOGGER.error(httpException);\n                        reject(httpException);\n                    } else {\n                        const httpResponse = new HttpResponse(msg.url, msg.status, msg.response, msg.responseHeaders);\n\n                        for (let i = 0; i < responseInterceptors.length; i++) {\n                            const responseInterceptor = responseInterceptors[i];\n                            responseInterceptor.handleResponse(httpResponse);\n                        }\n\n                        resolve(httpResponse);\n                    }\n                }\n                worker.onerror = function(event) {\n                    const httpException = new HttpException(event.data, 0, false);\n                    reject(httpException);\n                }\n                worker.postMessage({conf: this.configuration, timeout: timeoutToUse, requestHeaders: collectedRequestHeaders});\n            } catch (error) {\n                const httpException = new HttpException(error, 0, false);\n                reject(httpException);\n            }\n\n        }\n\n        workerCall = workerCall.bind(this);\n\n        return new Promise((resolve, reject) => {\n            if (useWorker && this.client && this.client.hasService('HttpWorker')) {\n                workerCall(resolve, reject);\n            } else {\n                directCall(resolve, reject);\n            }\n        });\n        \n    }\n\n}\n\nExecutor.LOGGER = LoggerFactory.getLogger('Executor');\n\nexport { Executor }","import { Executor } from './executor';\nimport { RESPONSE_TYPE } from '../platform/constants';\nclass ResponseBuilder {\n\n    constructor(configuration, client) {\n        this.configuration = configuration;\n        this.executor = new Executor(configuration, client);\n    }\n\n    readBytes() {\n        this.configuration.responseType = RESPONSE_TYPE.ARRAY_BUFFER;\n        return this.executor;\n    }\n\n    readString() {\n        this.configuration.responseType = RESPONSE_TYPE.TEXT;\n        return this.executor;\n    }\n\n    readObject() {\n        this.configuration.responseType = RESPONSE_TYPE.JSON;\n        return this.executor;\n    }\n\n    withoutResult() {\n        return this.executor;\n    }\n}\n\nexport { ResponseBuilder }","import { ResponseBuilder } from './reponseBuilder';\nimport { exists } from '../utils';\nclass RequestBuilder {\n\n    constructor(configuration, client) {\n        this.configuration = configuration;\n        this.reponseBuilder = new ResponseBuilder(configuration, client);\n    }\n\n    withHeader(name, value) {\n        if (!this.configuration.headers) {\n            this.configuration.headers = [];\n        }\n        this.configuration.headers.push({ name, value });\n        return this;\n    }\n\n    withHeadersInfo(headersInfo) {\n        if (exists(headersInfo)) {\n            if (!this.configuration.headers) {\n                this.configuration.headers = [];\n            }\n            for (let name in headersInfo) {\n                if (headersInfo.hasOwnProperty(name)) {\n                    const value = headersInfo[name];\n                    this.configuration.headers.push({ name, value });\n                }\n            }\n        }\n        return this;\n    }\n\n    withContent(data) {\n        this.configuration.requestBody = data;\n        return this.reponseBuilder;\n    }\n\n    withoutContent() {\n        return this.reponseBuilder;\n    }\n}\n\nexport { RequestBuilder }","import { RequestBuilder } from './requestBuilder';\nimport { HTTP } from '../platform/constants';\nclass HttpClient {\n\n    constructor(client) {\n        this.client = client;\n    }\n\n    request(url, method) {\n        const configuration = {\n            url, method\n        }\n        this.requestBuilder = new RequestBuilder(configuration, this.client);\n        return this.requestBuilder;\n    }\n\n    get(url) {\n        return this.request(url, HTTP.METHOD.GET);\n    }\n\n    post(url) {\n        return this.request(url, HTTP.METHOD.POST);\n    }\n\n    put(url) {\n        return this.request(url, HTTP.METHOD.PUT);\n    }\n\n    delete(url) {\n        return this.request(url, HTTP.METHOD.DELETE);\n    }\n}\n\nexport { HttpClient }","class HttpClientInterceptor {\n\n    constructor() {\n        this.requestHandlers = new Set();\n        this.responseHandlers = new Set();\n    }\n\n    addRequestInterceptor(handler) {\n        this.requestHandlers.add(handler);\n    }\n\n    getRequestInterceptors() {\n        let list = [];\n        this.requestHandlers.forEach(handler => list.push(handler));\n        return list;\n    }\n\n    addResponseInterceptor(handler) {\n        this.responseHandlers.add(handler);\n    }\n\n    getResponseInterceptors() {\n        let list = [];\n        this.responseHandlers.forEach(handler => list.push(handler));\n        return list;\n    }\n}\n\nexport { HttpClientInterceptor }","import { checkMethod, checkParam, parseUrl, exists } from '../utils';\nimport { ServiceProvider  } from './serviceProvider';\nimport { LoggerFactory } from '../logging';\nimport { HTTP } from './constants';\n\nclass ClientScope {\n\n    constructor() {\n        this.clientIds = new Map();\n    }\n\n    handleRequest(httpRequest) {\n        checkMethod('handleRequest');\n        checkParam(httpRequest, 'httpRequest');\n        const clientId = this.getClientId(httpRequest.url);\n        if (exists(clientId)) {\n            ClientScope.LOGGER.trace('Using ClientId', clientId);\n            httpRequest.setRequestHeader(HTTP.HEADER_NAME.X_CLIENT_SESSION_ID, clientId);\n        }\n    }\n\n    handleResponse(httpResponse) {\n        checkMethod('handleResponse');\n        checkParam(httpResponse, 'httpResponse');\n        const clientId = this.getClientId(httpResponse.url);\n        const newClientId = httpResponse.getHeaderByName(HTTP.HEADER_NAME.X_CLIENT_SESSION_ID);\n        if (exists(clientId) && exists(newClientId) && clientId !== newClientId) {\n            throw new Error('Client Id does not match!');\n        }\n        if (!exists(clientId) && exists(newClientId)) {\n            ClientScope.LOGGER.debug('New ClientId found', newClientId);\n            this.setClientId(httpResponse.url, newClientId);\n        }\n    }\n\n    initServiceProvider(client) {\n        checkMethod('initServiceProvider');\n        checkParam(client, 'client');\n        client.getService('HttpClientInterceptor').addRequestInterceptor(this);\n        client.getService('HttpClientInterceptor').addResponseInterceptor(this);\n    }\n\n    getClientId(url) {\n        const result = parseUrl(url);\n        const key = ClientScope.calcKey(result.hostname, result.port)\n        return this.clientIds.get(key);\n    }\n\n    setClientId(url, clientId) {\n        const result = parseUrl(url);\n        const key = ClientScope.calcKey(result.hostname, result.port)\n        this.clientIds.set(key, clientId);\n        ClientScope.LOGGER.trace('Setting ClientId', clientId, 'for', url, 'with key', key);\n    }\n\n}\n\nClientScope.calcKey = function(hostname, port) {\n    return hostname + port;\n}\n\nClientScope.LOGGER = LoggerFactory.getLogger('ClientScope');\n\nfunction register(client) {\n    if (exists(client)) {\n        const clientScopeProvider = new ServiceProvider(ClientScope, 'ClientScope');\n\n        client.registerServiceProvider(clientScopeProvider);\n    }\n}\n\nexport { register }","export const ATTRIBUTE_METADATA_CHANGED_COMMAND_ID = 'AttributeMetadataChanged';\nexport const CALL_ACTION_COMMAND_ID = 'CallAction';\nexport const CHANGE_ATTRIBUTE_METADATA_COMMAND_ID = 'ChangeAttributeMetadata';\nexport const CREATE_CONTEXT_COMMAND_ID = 'CreateContext';\nexport const CREATE_CONTROLLER_COMMAND_ID = 'CreateController';\nexport const CREATE_PRESENTATION_MODEL_COMMAND_ID = 'CreatePresentationModel';\nexport const DELETE_PRESENTATION_MODEL_COMMAND_ID = 'DeletePresentationModel';\nexport const DESTROY_CONTEXT_COMMAND_ID = 'DestroyContext';\nexport const DESTROY_CONTROLLER_COMMAND_ID = 'DestroyController';\nexport const INTERRUPT_LONG_POLL_COMMAND_ID = 'InterruptLongPoll';\nexport const PRESENTATION_MODEL_DELETED_COMMAND_ID = 'PresentationModelDeleted';\nexport const START_LONG_POLL_COMMAND_ID = 'StartLongPoll';\nexport const VALUE_CHANGED_COMMAND_ID = 'ValueChanged';\n\nexport const ID = \"id\";\nexport const ATTRIBUTE_ID = \"a_id\";\nexport const PM_ID = \"p_id\";\nexport const CONTROLLER_ID = \"c_id\";\nexport const PM_TYPE = \"t\";\nexport const NAME = \"n\";\nexport const VALUE = \"v\";\nexport const PARAMS = \"p\";\nexport const PM_ATTRIBUTES = \"a\";","import {VALUE_CHANGED_COMMAND_ID, PRESENTATION_MODEL_DELETED_COMMAND_ID} from './commands/commandConstants';\n\nexport default class BlindCommandBatcher {\n    constructor(folding = true, maxBatchSize = 50) {\n        this.folding = folding;\n        this.maxBatchSize = maxBatchSize;\n    }\n    batch(queue) {\n        let batch = [];\n        let batchLength = 0;\n        while(queue[batchLength] && batchLength <= this.maxBatchSize) {\n            const element = queue[batchLength];\n            batchLength++;\n            if(this.folding) {\n                if(element.command.id == VALUE_CHANGED_COMMAND_ID &&\n                    batch.length > 0 &&\n                    batch[batch.length - 1].command.id == VALUE_CHANGED_COMMAND_ID &&\n                    element.command.attributeId == batch[batch.length - 1].command.attributeId) {\n                    //merge ValueChange for same value\n                    batch[batch.length - 1].command.newValue = element.command.newValue;\n                } else if(element.command.id == PRESENTATION_MODEL_DELETED_COMMAND_ID) {\n                    //We do not need it...\n                } else {\n                    batch.push(element);\n                }\n            } else {\n                batch.push(element);\n            }\n            if(element.handler) {\n                break;\n            }\n        }\n        queue.splice(0, batchLength);\n        return batch;\n    }\n}","export const JS_STRING_TYPE = 'string';\n\nexport const REMOTING_BEAN = 0;\nexport const BYTE = 1;\nexport const SHORT = 2;\nexport const INT = 3;\nexport const LONG = 4;\nexport const FLOAT = 5;\nexport const DOUBLE = 6;\nexport const BOOLEAN = 7;\nexport const STRING = 8;\nexport const DATE = 9;\nexport const ENUM = 10;\nexport const CALENDAR = 11;\nexport const LOCAL_DATE_FIELD_TYPE = 55;\nexport const LOCAL_DATE_TIME_FIELD_TYPE = 52;\nexport const ZONED_DATE_TIME_FIELD_TYPE = 54;\n\n\nexport const ADDED_TYPE = \"ADDED\";\nexport const REMOVED_TYPE = \"REMOVED\";\n","import {VALUE_CHANGED_COMMAND_ID} from '../commandConstants';\nimport {checkMethod, checkParam} from '../../../utils';\n\nexport default class ValueChangedCommand {\n\n    constructor() {\n        this.id = VALUE_CHANGED_COMMAND_ID;\n    }\n\n    init(attributeId, newValue) {\n        checkMethod('ValueChangedCommand.init()');\n        checkParam(attributeId, 'attributeId');\n\n        this.attributeId = attributeId;\n        this.newValue = newValue;\n    }\n}","import {ATTRIBUTE_METADATA_CHANGED_COMMAND_ID} from '../commandConstants';\nimport {checkMethod, checkParam} from '../../../utils';\n\nexport default class AttributeMetadataChangedCommand {\n\n    constructor() {\n        this.id = ATTRIBUTE_METADATA_CHANGED_COMMAND_ID;\n    }\n\n    init(attributeId, metadataName, value) {\n        checkMethod('AttributeMetadataChangedCommand.init()');\n        checkParam(attributeId, 'attributeId');\n        checkParam(metadataName, 'metadataName');\n\n        this.attributeId = attributeId;\n        this.metadataName = metadataName;\n        this.value = value;\n    }\n}","import {CALL_ACTION_COMMAND_ID} from '../commandConstants';\nimport {checkMethod, checkParam} from '../../../utils';\n\nexport default class CallActionCommand {\n    \n    constructor() {\n        this.id = CALL_ACTION_COMMAND_ID;\n    }\n\n    init(controllerid, actionName, params) {\n        checkMethod('CreateControllerCommand.init()');\n        checkParam(controllerid, 'controllerid');\n        checkParam(actionName, 'actionName');\n\n        this.controllerid = controllerid;\n        this.actionName = actionName;\n        this.params = params;\n    }\n\n}","import {CHANGE_ATTRIBUTE_METADATA_COMMAND_ID} from '../commandConstants';\nimport {checkMethod, checkParam} from '../../../utils';\n\nexport default class ChangeAttributeMetadataCommand {\n\n    constructor() {\n        this.id = CHANGE_ATTRIBUTE_METADATA_COMMAND_ID;\n    }\n\n    init(attributeId, metadataName, value) {\n        checkMethod('ChangeAttributeMetadataCommand.init()');\n        checkParam(attributeId, 'attributeId');\n        checkParam(metadataName, 'metadataName');\n\n        this.attributeId = attributeId;\n        this.metadataName = metadataName;\n        this.value = value;\n    }\n}","import {CREATE_CONTEXT_COMMAND_ID} from '../commandConstants';\n\nexport default class CreateContextCommand {\n\n    constructor() {\n        this.id = CREATE_CONTEXT_COMMAND_ID;\n    }\n\n}","import {CREATE_CONTROLLER_COMMAND_ID} from '../commandConstants';\nimport {checkMethod, checkParam} from '../../../utils';\n\nexport default class CreateControllerCommand {\n\n    constructor() {\n        this.id = CREATE_CONTROLLER_COMMAND_ID;\n    }\n\n    init(controllerName, parentControllerId) {\n        checkMethod('CreateControllerCommand.init()');\n        checkParam(controllerName, 'controllerName');\n\n        this.controllerName = controllerName;\n        this.parentControllerId = parentControllerId;\n    }\n\n}","import {CREATE_PRESENTATION_MODEL_COMMAND_ID} from '../commandConstants';\nimport {checkMethod, checkParam} from '../../../utils';\n\nexport default class CreatePresentationModelCommand {\n\n    constructor() {\n        this.id = CREATE_PRESENTATION_MODEL_COMMAND_ID;\n    }\n\n    init(presentationModel) {\n        checkMethod('CreatePresentationModelCommand.init()');\n        checkParam(presentationModel, 'presentationModel');\n\n        this.attributes = [];\n        this.clientSideOnly = false;\n        this.pmId = presentationModel.id;\n        this.pmType = presentationModel.presentationModelType;\n        var command = this;\n        presentationModel.getAttributes().forEach(function (attr) {\n            command.attributes.push({\n                propertyName: attr.propertyName,\n                id: attr.id,\n                value: attr.getValue()\n            });\n        });\n    }\n}","import {DELETE_PRESENTATION_MODEL_COMMAND_ID} from '../commandConstants';\nimport {checkMethod, checkParam} from '../../../utils';\n\nexport default class DeletePresentationModelCommand {\n\n    constructor() {\n        this.id = DELETE_PRESENTATION_MODEL_COMMAND_ID;\n    }\n\n    init(pmId) {\n        checkMethod('DeletePresentationModelCommand.init()');\n        checkParam(pmId, 'pmId');\n\n        this.pmId = pmId;\n    }\n}\n","import {DESTROY_CONTEXT_COMMAND_ID} from '../commandConstants';\n\nexport default class DestroyContextCommand {\n\n    constructor() {\n        this.id = DESTROY_CONTEXT_COMMAND_ID;\n    }\n\n}","import {DESTROY_CONTROLLER_COMMAND_ID} from '../commandConstants';\nimport {checkMethod, checkParam} from '../../../utils';\n\nexport default class DestroyControllerCommand {\n\n    constructor() {\n        this.id = DESTROY_CONTROLLER_COMMAND_ID;\n    }\n\n    init(controllerId) {\n        checkMethod('DestroyControllerCommand.init()');\n        checkParam(controllerId, 'controllerId');\n\n        this.controllerId = controllerId;\n    }\n\n}","import {INTERRUPT_LONG_POLL_COMMAND_ID} from '../commandConstants'\n\nexport default class InterruptLongPollCommand {\n\n    constructor() {\n        this.id = INTERRUPT_LONG_POLL_COMMAND_ID;\n    }\n}","import {PRESENTATION_MODEL_DELETED_COMMAND_ID} from '../commandConstants';\nimport {checkMethod, checkParam} from '../../../utils';\n\nexport default class PresentationModelDeletedCommand {\n\n    constructor() {\n        this.id = PRESENTATION_MODEL_DELETED_COMMAND_ID;\n    }\n\n    init(pmId) {\n        checkMethod('PresentationModelDeletedCommand.init()');\n        checkParam(pmId, 'pmId');\n\n        this.pmId = pmId;\n    }\n}","import {START_LONG_POLL_COMMAND_ID} from '../commandConstants'\n\nexport default class StartLongPollCommand {\n\n    constructor() {\n        this.id = START_LONG_POLL_COMMAND_ID;\n    }\n}\n","export default class CodecError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}","import {exists, checkMethod, checkParam} from '../../utils';\nimport {JS_STRING_TYPE} from '../constants';\nimport {\n    CREATE_PRESENTATION_MODEL_COMMAND_ID,\n    VALUE_CHANGED_COMMAND_ID,\n    ATTRIBUTE_METADATA_CHANGED_COMMAND_ID,\n    CALL_ACTION_COMMAND_ID,\n    CHANGE_ATTRIBUTE_METADATA_COMMAND_ID,\n    CREATE_CONTEXT_COMMAND_ID,\n    CREATE_CONTROLLER_COMMAND_ID,\n    DELETE_PRESENTATION_MODEL_COMMAND_ID,\n    DESTROY_CONTEXT_COMMAND_ID,\n    DESTROY_CONTROLLER_COMMAND_ID,\n    INTERRUPT_LONG_POLL_COMMAND_ID,\n    PRESENTATION_MODEL_DELETED_COMMAND_ID,\n    START_LONG_POLL_COMMAND_ID\n} from './commandConstants';\nimport {ID, PM_ID, PM_TYPE, PM_ATTRIBUTES, NAME, ATTRIBUTE_ID, VALUE, CONTROLLER_ID, PARAMS} from './commandConstants';\nimport ValueChangedCommand from './impl/valueChangedCommand';\nimport AttributeMetadataChangedCommand from './impl/attributeMetadataChangedCommand';\nimport CallActionCommand from './impl/callActionCommand';\nimport ChangeAttributeMetadataCommand from './impl/changeAttributeMetadataCommand';\nimport CreateContextCommand from './impl/createContextCommand';\nimport CreateControllerCommand from './impl/createControllerCommand';\nimport CreatePresentationModelCommand from './impl/createPresentationModelCommand';\nimport DeletePresentationModelCommand from './impl/deletePresentationModelCommand';\nimport DestroyContextCommand from './impl/destroyContextCommand';\nimport DestroyControllerCommand from './impl/destroyControllerCommand';\nimport InterruptLongPollCommand from './impl/interruptLongPollCommand';\nimport PresentationModelDeletedCommand from './impl/presentationModelDeletedCommand';\nimport StartLongPollCommand from './impl/startLongPollCommand';\nimport CodecError from './codecError';\n\n\nexport default class Codec {\n\n    static _encodeAttributeMetadataChangedCommand(command) {\n        checkMethod(\"Codec.encodeAttributeMetadataChangedCommand\");\n        checkParam(command, \"command\");\n        checkParam(command.attributeId, \"command.attributeId\");\n        checkParam(command.metadataName, \"command.metadataName\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = ATTRIBUTE_METADATA_CHANGED_COMMAND_ID;\n        jsonCommand[ATTRIBUTE_ID] = command.attributeId;\n        jsonCommand[NAME] = command.metadataName;\n        jsonCommand[VALUE] = command.value;\n        return jsonCommand;\n    }\n\n    static _decodeAttributeMetadataChangedCommand(jsonCommand) {\n        checkMethod(\"Codec.decodeAttributeMetadataChangedCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n        checkParam(jsonCommand[ATTRIBUTE_ID], \"jsonCommand[ATTRIBUTE_ID]\");\n        checkParam(jsonCommand[NAME], \"jsonCommand[NAME]\");\n\n        let command = new AttributeMetadataChangedCommand();\n        command.attributeId = jsonCommand[ATTRIBUTE_ID];\n        command.metadataName = jsonCommand[NAME];\n        command.value = jsonCommand[VALUE];\n        return command;\n    }\n\n    static _encodeCallActionCommand(command) {\n        checkMethod(\"Codec.encodeCallActionCommand\");\n        checkParam(command, \"command\");\n        checkParam(command.controllerid, \"command.controllerid\");\n        checkParam(command.actionName, \"command.actionName\");\n        checkParam(command.params, \"command.params\");\n\n\n        let jsonCommand = {};\n        jsonCommand[ID] = CALL_ACTION_COMMAND_ID;\n        jsonCommand[CONTROLLER_ID] = command.controllerid;\n        jsonCommand[NAME] = command.actionName;\n        jsonCommand[PARAMS] = command.params.map((param) => {\n            let result = {};\n            result[NAME] = param.name;\n            if (exists(param.value)) {\n                result[VALUE] = param.value;\n            }\n            return result;\n        });\n        return jsonCommand;\n    }\n\n    static _decodeCallActionCommand(jsonCommand) {\n        checkMethod(\"Codec.decodeCallActionCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n        checkParam(jsonCommand[CONTROLLER_ID], \"jsonCommand[CONTROLLER_ID]\");\n        checkParam(jsonCommand[NAME], \"jsonCommand[NAME]\");\n        checkParam(jsonCommand[PARAMS], \"jsonCommand[PARAMS]\");\n\n        let command = new CallActionCommand();\n        command.controllerid = jsonCommand[CONTROLLER_ID];\n        command.actionName = jsonCommand[NAME];\n        //TODO: Für die Params sollten wir eine Klasse bereitstellen\n        command.params = jsonCommand[PARAMS].map((param) => {\n            return {\n                'name': param[NAME],\n                'value': exists(param[VALUE]) ? param[VALUE] : null\n            };\n        });\n        return command;\n    }\n\n    static _encodeChangeAttributeMetadataCommand(command) {\n        checkMethod(\"Codec.encodeChangeAttributeMetadataCommand\");\n        checkParam(command, \"command\");\n        checkParam(command.attributeId, \"command.attributeId\");\n        checkParam(command.metadataName, \"command.metadataName\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = CHANGE_ATTRIBUTE_METADATA_COMMAND_ID;\n        jsonCommand[ATTRIBUTE_ID] = command.attributeId;\n        jsonCommand[NAME] = command.metadataName;\n        jsonCommand[VALUE] = command.value;\n        return jsonCommand;\n    }\n\n    static _decodeChangeAttributeMetadataCommand(jsonCommand) {\n        checkMethod(\"Codec.decodeChangeAttributeMetadataCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n        checkParam(jsonCommand[ATTRIBUTE_ID], \"jsonCommand[ATTRIBUTE_ID]\");\n        checkParam(jsonCommand[NAME], \"jsonCommand[NAME]\");\n\n        let command = new ChangeAttributeMetadataCommand();\n        command.attributeId = jsonCommand[ATTRIBUTE_ID];\n        command.metadataName = jsonCommand[NAME];\n        command.value = jsonCommand[VALUE];\n        return command;\n    }\n\n    static _encodeCreateContextCommand(command) {\n        checkMethod(\"Codec.encodeCreateContextCommand\");\n        checkParam(command, \"command\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = CREATE_CONTEXT_COMMAND_ID;\n        return jsonCommand;\n    }\n\n    static _decodeCreateContextCommand(jsonCommand) {\n        checkMethod(\"Codec.decodeCreateContextCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n\n        let command = new CreateContextCommand();\n        return command;\n    }\n\n    static _encodeCreateControllerCommand(command) {\n        checkMethod(\"Codec._encodeCreateControllerCommand\");\n        checkParam(command, \"command\");\n        checkParam(command.controllerName, \"command.controllerName\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = CREATE_CONTROLLER_COMMAND_ID;\n        jsonCommand[NAME] = command.controllerName;\n        jsonCommand[CONTROLLER_ID] = command.parentControllerId;\n        return jsonCommand;\n    }\n\n    static _decodeCreateControllerCommand(jsonCommand) {\n        checkMethod(\"Codec._decodeCreateControllerCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n        checkParam(jsonCommand[NAME], \"jsonCommand[NAME]\");\n        checkParam(jsonCommand[CONTROLLER_ID], \"jsonCommand[CONTROLLER_ID]\");\n\n        let command = new CreateControllerCommand();\n        command.controllerName = jsonCommand[NAME];\n        command.parentControllerId = jsonCommand[CONTROLLER_ID];\n        return command;\n    }\n\n    static _encodeCreatePresentationModelCommand(command) {\n        checkMethod(\"Codec.encodeCreatePresentationModelCommand\");\n        checkParam(command, \"command\");\n        checkParam(command.pmId, \"command.pmId\");\n        checkParam(command.pmType, \"command.pmType\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = CREATE_PRESENTATION_MODEL_COMMAND_ID;\n        jsonCommand[PM_ID] = command.pmId;\n        jsonCommand[PM_TYPE] = command.pmType;\n        jsonCommand[PM_ATTRIBUTES] = command.attributes.map((attribute) => {\n            let result = {};\n            result[NAME] = attribute.propertyName;\n            result[ATTRIBUTE_ID] = attribute.id;\n            if (exists(attribute.value)) {\n                result[VALUE] = attribute.value;\n            }\n            return result;\n        });\n        return jsonCommand;\n    }\n\n    static _decodeCreatePresentationModelCommand(jsonCommand) {\n        checkMethod(\"Codec.decodeCreatePresentationModelCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n        checkParam(jsonCommand[PM_ID], \"jsonCommand[PM_ID]\");\n        checkParam(jsonCommand[PM_TYPE], \"jsonCommand[PM_TYPE]\");\n\n        let command = new CreatePresentationModelCommand();\n        command.pmId = jsonCommand[PM_ID];\n        command.pmType = jsonCommand[PM_TYPE];\n\n        //TODO: Für die Attribute sollten wir eine Klasse bereitstellen\n        command.attributes = jsonCommand[PM_ATTRIBUTES].map((attribute) => {\n            return {\n                'propertyName': attribute[NAME],\n                'id': attribute[ATTRIBUTE_ID],\n                'value': exists(attribute[VALUE]) ? attribute[VALUE] : null\n            };\n        });\n        return command;\n    }\n\n    static _encodeDeletePresentationModelCommand(command) {\n        checkMethod(\"Codec._encodeDeletePresentationModelCommand\");\n        checkParam(command, \"command\");\n        checkParam(command.pmId, \"command.pmId\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = DELETE_PRESENTATION_MODEL_COMMAND_ID;\n        jsonCommand[PM_ID] = command.pmId;\n        return jsonCommand;\n    }\n\n    static _decodeDeletePresentationModelCommand(jsonCommand) {\n        checkMethod(\"Codec._decodeDeletePresentationModelCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n        checkParam(jsonCommand[PM_ID], \"jsonCommand[PM_ID]\");\n\n\n        let command = new DeletePresentationModelCommand();\n        command.pmId = jsonCommand[PM_ID];\n        return command;\n    }\n\n    static _encodeDestroyContextCommand(command) {\n        checkMethod(\"Codec._encodeDestroyContextCommand\");\n        checkParam(command, \"command\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = DESTROY_CONTEXT_COMMAND_ID;\n        return jsonCommand;\n    }\n\n    static _decodeDestroyContextCommand(jsonCommand) {\n        checkMethod(\"Codec._decodeDestroyContextCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n\n        let command = new DestroyContextCommand();\n        return command;\n    }\n\n    static _encodeDestroyControllerCommand(command) {\n        checkMethod(\"Codec._encodeDestroyControllerCommand\");\n        checkParam(command, \"command\");\n        checkParam(command.controllerId, \"command.controllerId\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = DESTROY_CONTROLLER_COMMAND_ID;\n        jsonCommand[CONTROLLER_ID] = command.controllerId;\n        return jsonCommand;\n    }\n\n    static _decodeDestroyControllerCommand(jsonCommand) {\n        checkMethod(\"Codec._decodeDestroyControllerCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n        checkParam(jsonCommand[CONTROLLER_ID], \"jsonCommand[CONTROLLER_ID]\");\n\n        let command = new DestroyControllerCommand();\n        command.controllerId = jsonCommand[CONTROLLER_ID];\n        return command;\n    }\n\n    static _encodeInterruptLongPollCommand(command) {\n        checkMethod(\"Codec._encodeInterruptLongPollCommand\");\n        checkParam(command, \"command\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = INTERRUPT_LONG_POLL_COMMAND_ID;\n        return jsonCommand;\n    }\n\n    static _decodeInterruptLongPollCommand(jsonCommand) {\n        checkMethod(\"Codec._decodeInterruptLongPollCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n\n        let command = new InterruptLongPollCommand();\n        return command;\n    }\n\n    static _encodePresentationModelDeletedCommand(command) {\n        checkMethod(\"Codec._encodePresentationModelDeletedCommand\");\n        checkParam(command, \"command\");\n        checkParam(command.pmId, \"command.pmId\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = PRESENTATION_MODEL_DELETED_COMMAND_ID;\n        jsonCommand[PM_ID] = command.pmId;\n        return jsonCommand;\n    }\n\n    static _decodePresentationModelDeletedCommand(jsonCommand) {\n        checkMethod(\"Codec._decodePresentationModelDeletedCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n        checkParam(jsonCommand[PM_ID], \"jsonCommand[PM_ID]\");\n\n        let command = new PresentationModelDeletedCommand();\n        command.pmId = jsonCommand[PM_ID];\n        return command;\n    }\n\n    static _encodeStartLongPollCommand(command) {\n        checkMethod(\"Codec._encodeStartLongPollCommand\");\n        checkParam(command, \"command\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = START_LONG_POLL_COMMAND_ID;\n        return jsonCommand;\n    }\n\n    static _decodeStartLongPollCommand(jsonCommand) {\n        checkMethod(\"Codec._decodeStartLongPollCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n\n        let command = new StartLongPollCommand();\n        return command;\n    }\n\n    static _encodeValueChangedCommand(command) {\n        checkMethod(\"Codec.encodeValueChangedCommand\");\n        checkParam(command, \"command\");\n        checkParam(command.attributeId, \"command.attributeId\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = VALUE_CHANGED_COMMAND_ID;\n        jsonCommand[ATTRIBUTE_ID] = command.attributeId;\n        if (exists(command.newValue)) {\n            jsonCommand[VALUE] = command.newValue;\n        }\n        return jsonCommand;\n    }\n\n    static _decodeValueChangedCommand(jsonCommand) {\n        checkMethod(\"Codec.decodeValueChangedCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n        checkParam(jsonCommand[ATTRIBUTE_ID], \"jsonCommand[ATTRIBUTE_ID]\");\n\n        let command = new ValueChangedCommand();\n        command.attributeId = jsonCommand[ATTRIBUTE_ID];\n        if (exists(jsonCommand[VALUE])) {\n            command.newValue = jsonCommand[VALUE];\n        } else {\n            command.newValue = null;\n        }\n        return command;\n    }\n\n    static encode(commands) {\n        checkMethod(\"Codec.encode\");\n        checkParam(commands, \"commands\");\n\n        let self = this;\n        return JSON.stringify(commands.map((command) => {\n            if (command.id === ATTRIBUTE_METADATA_CHANGED_COMMAND_ID) {\n                return self._encodeAttributeMetadataChangedCommand(command);\n            } else if (command.id === CALL_ACTION_COMMAND_ID) {\n                return self._encodeCallActionCommand(command);\n            } else if (command.id === CHANGE_ATTRIBUTE_METADATA_COMMAND_ID) {\n                return self._encodeChangeAttributeMetadataCommand(command);\n            } else if (command.id === CREATE_CONTEXT_COMMAND_ID) {\n                return self._encodeCreateContextCommand(command);\n            } else if (command.id === CREATE_CONTROLLER_COMMAND_ID) {\n                return self._encodeCreateControllerCommand(command);\n            } else if (command.id === CREATE_PRESENTATION_MODEL_COMMAND_ID) {\n                return self._encodeCreatePresentationModelCommand(command);\n            } else if (command.id === DELETE_PRESENTATION_MODEL_COMMAND_ID) {\n                return self._encodeDeletePresentationModelCommand(command);\n            } else if (command.id === DESTROY_CONTEXT_COMMAND_ID) {\n                return self._encodeDestroyContextCommand(command);\n            } else if (command.id === DESTROY_CONTROLLER_COMMAND_ID) {\n                return self._encodeDestroyControllerCommand(command);\n            } else if (command.id === INTERRUPT_LONG_POLL_COMMAND_ID) {\n                return self._encodeInterruptLongPollCommand(command);\n            } else if (command.id === PRESENTATION_MODEL_DELETED_COMMAND_ID) {\n                return self._encodePresentationModelDeletedCommand(command);\n            } else if (command.id === START_LONG_POLL_COMMAND_ID) {\n                return self._encodeStartLongPollCommand(command);\n            } else if (command.id === VALUE_CHANGED_COMMAND_ID) {\n                return self._encodeValueChangedCommand(command);\n            } else {\n                throw new CodecError('Command of type ' + command.id + ' can not be handled');\n            }\n        }));\n    }\n\n    static decode(transmitted) {\n        checkMethod(\"Codec.decode\");\n        checkParam(transmitted, \"transmitted\");\n\n        if (typeof transmitted === JS_STRING_TYPE) {\n            let self = this;\n            return JSON.parse(transmitted).map(function (command) {\n                if (command.id === ATTRIBUTE_METADATA_CHANGED_COMMAND_ID) {\n                    return self._decodeAttributeMetadataChangedCommand(command);\n                } else if (command.id === CALL_ACTION_COMMAND_ID) {\n                    return self._decodeCallActionCommand(command);\n                } else if (command.id === CHANGE_ATTRIBUTE_METADATA_COMMAND_ID) {\n                    return self._decodeChangeAttributeMetadataCommand(command);\n                } else if (command.id === CREATE_CONTEXT_COMMAND_ID) {\n                    return self._decodeCreateContextCommand(command);\n                } else if (command.id === CREATE_CONTROLLER_COMMAND_ID) {\n                    return self._decodeCreateControllerCommand(command);\n                } else if (command.id === CREATE_PRESENTATION_MODEL_COMMAND_ID) {\n                    return self._decodeCreatePresentationModelCommand(command);\n                } else if (command.id === DELETE_PRESENTATION_MODEL_COMMAND_ID) {\n                    return self._decodeDeletePresentationModelCommand(command);\n                } else if (command.id === DESTROY_CONTEXT_COMMAND_ID) {\n                    return self._decodeDestroyContextCommand(command);\n                } else if (command.id === DESTROY_CONTROLLER_COMMAND_ID) {\n                    return self._decodeDestroyControllerCommand(command);\n                } else if (command.id === INTERRUPT_LONG_POLL_COMMAND_ID) {\n                    return self._decodeInterruptLongPollCommand(command);\n                } else if (command.id === PRESENTATION_MODEL_DELETED_COMMAND_ID) {\n                    return self._decodePresentationModelDeletedCommand(command);\n                } else if (command.id === START_LONG_POLL_COMMAND_ID) {\n                    return self._decodeStartLongPollCommand(command);\n                } else if (command.id === VALUE_CHANGED_COMMAND_ID) {\n                    return self._decodeValueChangedCommand(command);\n                } else {\n                    throw new CodecError('Command of type ' + command.id + ' can not be handled');\n                }\n            });\n        } else {\n            throw new CodecError('Can not decode data that is not of type string');\n        }\n    }\n}","export default class EventBus {\n\n    constructor() {\n        this.eventHandlers = [];\n    }\n\n    onEvent(eventHandler) {\n        this.eventHandlers.push(eventHandler);\n    }\n\n    trigger(event) {\n        this.eventHandlers.forEach(handle => handle(event));\n    }\n}","import EventBus from './eventBus'\n\nvar presentationModelInstanceCount = 0; // todo dk: consider making this static in class\n\nexport default class ClientPresentationModel {\n    constructor(id, presentationModelType) {\n        this.id = id;\n        this.presentationModelType = presentationModelType;\n        this.attributes = [];\n        this.clientSideOnly = false;\n        this.dirty = false;\n        if (typeof id !== 'undefined' && id != null) {\n            this.id = id;\n        }\n        else {\n            this.id = (presentationModelInstanceCount++).toString();\n        }\n        this.invalidBus = new EventBus();\n        this.dirtyValueChangeBus = new EventBus();\n    }\n    // todo dk: align with Java version: move to ClientDolphin and auto-add to model store\n    /** a copy constructor for anything but IDs. Per default, copies are client side only, no automatic update applies. */\n    copy() {\n        var result = new ClientPresentationModel(null, this.presentationModelType);\n        result.clientSideOnly = true;\n        this.getAttributes().forEach((attribute) => {\n            var attributeCopy = attribute.copy();\n            result.addAttribute(attributeCopy);\n        });\n        return result;\n    }\n    //add array of attributes\n    addAttributes(attributes) {\n        if (!attributes || attributes.length < 1)\n            return;\n        attributes.forEach(attr => {\n            this.addAttribute(attr);\n        });\n    }\n    addAttribute(attribute) {\n        if (!attribute || (this.attributes.indexOf(attribute) > -1)) {\n            return;\n        }\n        if (this.findAttributeByPropertyName(attribute.propertyName)) {\n            throw new Error(\"There already is an attribute with property name: \" + attribute.propertyName\n                + \" in presentation model with id: \" + this.id);\n        }\n        if (attribute.getQualifier() && this.findAttributeByQualifier(attribute.getQualifier())) {\n            throw new Error(\"There already is an attribute with qualifier: \" + attribute.getQualifier()\n                + \" in presentation model with id: \" + this.id);\n        }\n        attribute.setPresentationModel(this);\n        this.attributes.push(attribute);\n        attribute.onValueChange(() => {\n            this.invalidBus.trigger({ source: this });\n        });\n    }\n    onInvalidated(handleInvalidate) {\n        this.invalidBus.onEvent(handleInvalidate);\n    }\n    /** returns a copy of the internal state */\n    getAttributes() {\n        return this.attributes.slice(0);\n    }\n    getAt(propertyName) {\n        return this.findAttributeByPropertyName(propertyName);\n    }\n    findAllAttributesByPropertyName(propertyName) {\n        var result = [];\n        if (!propertyName)\n            return null;\n        this.attributes.forEach((attribute) => {\n            if (attribute.propertyName == propertyName) {\n                result.push(attribute);\n            }\n        });\n        return result;\n    }\n    findAttributeByPropertyName(propertyName) {\n        if (!propertyName)\n            return null;\n        for (var i = 0; i < this.attributes.length; i++) {\n            if ((this.attributes[i].propertyName == propertyName)) {\n                return this.attributes[i];\n            }\n        }\n        return null;\n    }\n    findAttributeByQualifier(qualifier) {\n        if (!qualifier)\n            return null;\n        for (var i = 0; i < this.attributes.length; i++) {\n            if (this.attributes[i].getQualifier() == qualifier) {\n                return this.attributes[i];\n            }\n        }\n        return null;\n    }\n    findAttributeById(id) {\n        if (!id)\n            return null;\n        for (var i = 0; i < this.attributes.length; i++) {\n            if (this.attributes[i].id == id) {\n                return this.attributes[i];\n            }\n        }\n        return null;\n    }\n    syncWith(sourcePresentationModel) {\n        this.attributes.forEach((targetAttribute) => {\n            var sourceAttribute = sourcePresentationModel.getAt(targetAttribute.propertyName);\n            if (sourceAttribute) {\n                targetAttribute.syncWith(sourceAttribute);\n            }\n        });\n    }\n}\n","import BlindCommandBatcher from './commandBatcher';\nimport Codec from './commands/codec';\nimport ClientPresentationModel from './clientPresentationModel'\nimport { LoggerFactory } from '../logging';\n\nexport default class ClientConnector {\n\n    constructor(transmitter, clientDolphin, slackMS = 0, maxBatchSize = 50) {\n\n        this.commandQueue = [];\n        this.currentlySending = false;\n        this.pushEnabled = false;\n        this.waiting = false;\n        this.transmitter = transmitter;\n        this.clientDolphin = clientDolphin;\n        this.slackMS = slackMS;\n        this.codec = new Codec();\n        this.commandBatcher = new BlindCommandBatcher(true, maxBatchSize);\n    }\n\n    setCommandBatcher(newBatcher) {\n        this.commandBatcher = newBatcher;\n    }\n\n    setPushEnabled(enabled) {\n        this.pushEnabled = enabled;\n    }\n\n    setPushListener(newListener) {\n        this.pushListener = newListener;\n    }\n\n    setReleaseCommand(newCommand) {\n        this.releaseCommand = newCommand;\n    }\n\n    send(command, onFinished) {\n        this.commandQueue.push({ command: command, handler: onFinished });\n        if (this.currentlySending) {\n            this.release(); // there is not point in releasing if we do not send atm\n            return;\n        }\n        this.doSendNext();\n    }\n\n    doSendNext() {\n        if (this.commandQueue.length < 1) {\n            if (this.pushEnabled) {\n                this.enqueuePushCommand();\n            }\n            else {\n                this.currentlySending = false;\n                return;\n            }\n        }\n        this.currentlySending = true;\n        let cmdsAndHandlers = this.commandBatcher.batch(this.commandQueue);\n\n        if(cmdsAndHandlers.length > 0) {\n            let callback = cmdsAndHandlers[cmdsAndHandlers.length - 1].handler;\n            let commands = cmdsAndHandlers.map(cah => { return cah.command; });\n            this.transmitter.transmit(commands, (response) => {\n                let touchedPMs = [];\n                response.forEach((command) => {\n                    let touched = this.handle(command);\n                    if (touched)\n                        touchedPMs.push(touched);\n                });\n                if (callback) {\n                    callback.onFinished(touchedPMs); // todo: make them unique?\n                }\n                setTimeout(() => this.doSendNext(), this.slackMS);\n            }, (error) => {\n                callback.onError(error);\n            });\n        } else {\n            setTimeout(() => this.doSendNext(), this.slackMS);\n        }\n    }\n\n    handle(command) {\n        if (command.id === \"DeletePresentationModel\") {\n            return this.handleDeletePresentationModelCommand(command);\n        }\n        else if (command.id === \"CreatePresentationModel\") {\n            return this.handleCreatePresentationModelCommand(command);\n        }\n        else if (command.id === \"ValueChanged\") {\n            return this.handleValueChangedCommand(command);\n        }\n        else if (command.id === \"AttributeMetadataChanged\") {\n            return this.handleAttributeMetadataChangedCommand(command);\n        }\n        else {\n            ClientConnector.LOGGER.error(\"Cannot handle, unknown command \" + command);\n        }\n        return null;\n    }\n\n    handleDeletePresentationModelCommand(serverCommand) {\n        let model = this.clientDolphin.findPresentationModelById(serverCommand.pmId);\n        if (!model)\n            return null;\n        this.clientDolphin.getClientModelStore().deletePresentationModel(model, true);\n        return model;\n    }\n\n    handleCreatePresentationModelCommand(serverCommand) {\n        if (this.clientDolphin.getClientModelStore().containsPresentationModel(serverCommand.pmId)) {\n            throw new Error(\"There already is a presentation model with id \" + serverCommand.pmId + \"  known to the client.\");\n        }\n        let attributes = [];\n        serverCommand.attributes.forEach((attr) => {\n            let clientAttribute = this.clientDolphin.attribute(attr.propertyName, attr.qualifier, attr.value);\n            if (attr.id && attr.id.match(\".*S$\")) {\n                clientAttribute.id = attr.id;\n            }\n            attributes.push(clientAttribute);\n        });\n        let clientPm = new ClientPresentationModel(serverCommand.pmId, serverCommand.pmType);\n        clientPm.addAttributes(attributes);\n        if (serverCommand.clientSideOnly) {\n            clientPm.clientSideOnly = true;\n        }\n        this.clientDolphin.getClientModelStore().add(clientPm, false);\n        this.clientDolphin.updatePresentationModelQualifier(clientPm);\n        return clientPm;\n    }\n\n    handleValueChangedCommand(serverCommand) {\n        let clientAttribute = this.clientDolphin.getClientModelStore().findAttributeById(serverCommand.attributeId);\n        if (!clientAttribute) {\n            ClientConnector.LOGGER.error(\"attribute with id \" + serverCommand.attributeId + \" not found, cannot update to new value \" + serverCommand.newValue);\n            return null;\n        }\n        if (clientAttribute.getValue() === serverCommand.newValue) {\n            return null;\n        }\n        clientAttribute.setValueFromServer(serverCommand.newValue);\n        return null;\n    }\n\n    handleAttributeMetadataChangedCommand(serverCommand) {\n        let clientAttribute = this.clientDolphin.getClientModelStore().findAttributeById(serverCommand.attributeId);\n        if (!clientAttribute)\n            return null;\n        clientAttribute[serverCommand.metadataName] = serverCommand.value;\n        return null;\n    }\n\n    listen() {\n        if (!this.pushEnabled)\n            return;\n        if (this.waiting)\n            return;\n        // todo: how to issue a warning if no pushListener is set?\n        if (!this.currentlySending) {\n            this.doSendNext();\n        }\n    }\n\n    enqueuePushCommand() {\n        let me = this;\n        this.waiting = true;\n        this.commandQueue.push({\n            command: this.pushListener,\n            handler: {\n                onFinished: function () { me.waiting = false; },\n                onFinishedData: null\n            }\n        });\n    }\n\n    release() {\n        if (!this.waiting)\n            return;\n        this.waiting = false;\n        // todo: how to issue a warning if no releaseCommand is set?\n        this.transmitter.signal(this.releaseCommand);\n    }\n}\n\nClientConnector.LOGGER = LoggerFactory.getLogger('ClientConnector');","import EventBus from './eventBus';\nimport { LoggerFactory } from '../logging';\n\nexport default class ClientAttribute {\n\n    constructor(propertyName, qualifier, value) {\n\n        this.propertyName = propertyName;\n        this.id = \"\" + (ClientAttribute.clientAttributeInstanceCount++) + \"C\";\n        this.valueChangeBus = new EventBus();\n        this.qualifierChangeBus = new EventBus();\n        this.setValue(value);\n        this.setQualifier(qualifier);\n    }\n\n    copy() {\n        let result = new ClientAttribute(this.propertyName, this.getQualifier(), this.getValue());\n        return result;\n    }\n\n    setPresentationModel(presentationModel) {\n        if (this.presentationModel) {\n            throw new Error(\"You can not set a presentation model for an attribute that is already bound.\");\n        }\n        this.presentationModel = presentationModel;\n    }\n\n    getPresentationModel() {\n        return this.presentationModel;\n    }\n\n    getValue() {\n        return this.value;\n    }\n\n    setValueFromServer(newValue) {\n        let verifiedValue = ClientAttribute.checkValue(newValue);\n        if (this.value === verifiedValue)\n            return;\n        let oldValue = this.value;\n        this.value = verifiedValue;\n        this.valueChangeBus.trigger({ 'oldValue': oldValue, 'newValue': verifiedValue, 'sendToServer': false });\n    }\n\n    setValue(newValue) {\n        let verifiedValue = ClientAttribute.checkValue(newValue);\n        if (this.value === verifiedValue)\n            return;\n        let oldValue = this.value;\n        this.value = verifiedValue;\n        this.valueChangeBus.trigger({ 'oldValue': oldValue, 'newValue': verifiedValue, 'sendToServer': true });\n    }\n\n    setQualifier(newQualifier) {\n        if (this.qualifier === newQualifier)\n            return;\n        let oldQualifier = this.qualifier;\n        this.qualifier = newQualifier;\n        this.qualifierChangeBus.trigger({ 'oldValue': oldQualifier, 'newValue': newQualifier });\n        this.valueChangeBus.trigger({ \"oldValue\": this.value, \"newValue\": this.value, 'sendToServer': false });\n    }\n\n    getQualifier() {\n        return this.qualifier;\n    }\n\n    onValueChange(eventHandler) {\n        this.valueChangeBus.onEvent(eventHandler);\n        eventHandler({ \"oldValue\": this.value, \"newValue\": this.value, 'sendToServer': false });\n    }\n\n    onQualifierChange(eventHandler) {\n        this.qualifierChangeBus.onEvent(eventHandler);\n    }\n\n    syncWith(sourceAttribute) {\n        if (sourceAttribute) {\n            this.setQualifier(sourceAttribute.getQualifier()); // sequence is important\n            this.setValue(sourceAttribute.value);\n        }\n    }\n\n    static checkValue(value) {\n        if (value == null || typeof value === 'undefined') {\n            return null;\n        }\n        let result = value;\n        if (result instanceof String || result instanceof Boolean || result instanceof Number) {\n            result = value.valueOf();\n        }\n        if (result instanceof ClientAttribute) {\n            ClientAttribute.LOGGER.warn(\"An Attribute may not itself contain an attribute as a value. Assuming you forgot to call value.\");\n            result = this.checkValue(value.value);\n        }\n        let ok = false;\n        if (this.SUPPORTED_VALUE_TYPES.indexOf(typeof result) > -1 || result instanceof Date) {\n            ok = true;\n        }\n        if (!ok) {\n            throw new Error(\"Attribute values of this type are not allowed: \" + typeof value);\n        }\n        return result;\n    }\n\n}\n\nClientAttribute.LOGGER = LoggerFactory.getLogger('ClientAttribute');\nClientAttribute.SUPPORTED_VALUE_TYPES = [\"string\", \"number\", \"boolean\"];\nClientAttribute.clientAttributeInstanceCount = 0;\n","import ClientAttribute from './clientAttribute'\nimport ClientPresentationModel from './clientPresentationModel'\n\nexport default class ClientDolphin {\n\n    constructor() {\n    }\n\n    setClientConnector(clientConnector) {\n        this.clientConnector = clientConnector;\n    }\n\n    getClientConnector() {\n        return this.clientConnector;\n    }\n\n    send(command, onFinished) {\n        this.clientConnector.send(command, onFinished);\n    }\n\n    attribute(propertyName, qualifier, value) {\n        return new ClientAttribute(propertyName, qualifier, value);\n    }\n\n    presentationModel(id, type, ...attributes) {\n        const model = new ClientPresentationModel(id, type);\n        if (attributes && attributes.length > 0) {\n            attributes.forEach((attribute) => {\n                model.addAttribute(attribute);\n            });\n        }\n        this.getClientModelStore().add(model, true);\n        return model;\n    }\n\n    setClientModelStore(clientModelStore) {\n        this.clientModelStore = clientModelStore;\n    }\n\n    getClientModelStore() {\n        return this.clientModelStore;\n    }\n\n    listPresentationModelIds() {\n        return this.getClientModelStore().listPresentationModelIds();\n    }\n\n    listPresentationModels() {\n        return this.getClientModelStore().listPresentationModels();\n    }\n\n    findAllPresentationModelByType(presentationModelType) {\n        return this.getClientModelStore().findAllPresentationModelByType(presentationModelType);\n    }\n\n    getAt(id) {\n        return this.findPresentationModelById(id);\n    }\n\n    findPresentationModelById(id) {\n        return this.getClientModelStore().findPresentationModelById(id);\n    }\n\n    deletePresentationModel(modelToDelete) {\n        this.getClientModelStore().deletePresentationModel(modelToDelete, true);\n    }\n\n    updatePresentationModelQualifier(presentationModel) {\n        presentationModel.getAttributes().forEach(sourceAttribute => {\n            this.updateAttributeQualifier(sourceAttribute);\n        });\n    }\n\n    updateAttributeQualifier(sourceAttribute) {\n        if (!sourceAttribute.getQualifier())\n            return;\n        const attributes = this.getClientModelStore().findAllAttributesByQualifier(sourceAttribute.getQualifier());\n        attributes.forEach(targetAttribute => {\n            targetAttribute.setValue(sourceAttribute.getValue()); // should always have the same value\n        });\n    }\n\n    startPushListening(pushCommand, releaseCommand) {\n        this.clientConnector.setPushListener(pushCommand);\n        this.clientConnector.setReleaseCommand(releaseCommand);\n        this.clientConnector.setPushEnabled(true);\n\n        setTimeout(() => {\n            this.clientConnector.listen();\n        }, 0);\n    }\n\n    stopPushListening() {\n        this.clientConnector.setPushEnabled(false);\n    }\n}","\nexport default class Attribute {\n}\n\nAttribute.QUALIFIER_PROPERTY = \"qualifier\";\nAttribute.VALUE = \"value\";\n","import CreateContextCommand from './impl/createContextCommand';\nimport CreateControllerCommand from './impl/createControllerCommand';\nimport CallActionCommand from './impl/callActionCommand';\nimport DestroyControllerCommand from './impl/destroyControllerCommand';\nimport DestroyContextCommand from './impl/destroyContextCommand';\nimport StartLongPollCommand from './impl/startLongPollCommand';\nimport InterruptLongPollCommand from './impl/interruptLongPollCommand';\nimport CreatePresentationModelCommand from './impl/createPresentationModelCommand';\nimport DeletePresentationModelCommand from './impl/deletePresentationModelCommand';\nimport PresentationModelDeletedCommand from './impl/presentationModelDeletedCommand';\nimport ValueChangedCommand from './impl/valueChangedCommand';\nimport ChangeAttributeMetadataCommand from './impl/changeAttributeMetadataCommand';\nimport AttributeMetadataChangedCommand from './impl/attributeMetadataChangedCommand';\n\nexport default class CommandFactory {\n\n    static createCreateContextCommand() {\n        return new CreateContextCommand();\n    }\n\n    static createCreateControllerCommand(controllerName, parentControllerId) {\n        const command = new CreateControllerCommand();\n        command.init(controllerName, parentControllerId);\n        return command;\n    }\n\n    static createCallActionCommand(controllerid, actionName, params) {\n        const command = new CallActionCommand();\n        command.init(controllerid, actionName, params);\n        return command;\n    }\n\n    static createDestroyControllerCommand(controllerId) {\n        const command = new DestroyControllerCommand();\n        command.init(controllerId);\n        return command;\n    }\n\n    static createDestroyContextCommand() {\n        return new DestroyContextCommand();\n    }\n\n    static createStartLongPollCommand() {\n        return new StartLongPollCommand();\n    }\n\n    static createInterruptLongPollCommand() {\n        return new InterruptLongPollCommand();\n    }\n\n    static createCreatePresentationModelCommand(presentationModel) {\n        const command = new CreatePresentationModelCommand();\n        command.init(presentationModel);\n        return command;\n    }\n\n    static createDeletePresentationModelCommand(pmId) {\n        const command = new DeletePresentationModelCommand();\n        command.init(pmId);\n        return command;\n    }\n\n    static createPresentationModelDeletedCommand(pmId) {\n        let command = new PresentationModelDeletedCommand();\n        command.init(pmId);\n        return command;\n    }\n\n    static createValueChangedCommand(attributeId, newValue) {\n        let command = new ValueChangedCommand();\n        command.init(attributeId, newValue);\n        return command;\n    }\n\n    static createChangeAttributeMetadataCommand(attributeId, metadataName, value) {\n        let command = new ChangeAttributeMetadataCommand();\n        command.init(attributeId, metadataName, value);\n        return command;\n    }\n\n    static createAttributeMetadataChangedCommand(attributeId, metadataName, value) {\n        let command = new AttributeMetadataChangedCommand();\n        command.init(attributeId, metadataName, value);\n        return command;\n    }\n}","import Attribute from './attribute'\nimport EventBus from './eventBus'\nimport CommandFactory from './commands/commandFactory';\nimport {ADDED_TYPE, REMOVED_TYPE} from './constants'\nimport { LoggerFactory } from '../logging';\n\nexport default class ClientModelStore {\n\n    constructor(clientDolphin) {\n\n        this.clientDolphin = clientDolphin;\n        this.presentationModels = new Map();\n        this.presentationModelsPerType = new Map();\n        this.attributesPerId = new Map();\n        this.attributesPerQualifier = new Map();\n        this.modelStoreChangeBus = new EventBus();\n    }\n\n    getClientDolphin() {\n        return this.clientDolphin;\n    }\n\n    registerAttribute(attribute) {\n        this.addAttributeById(attribute);\n        if (attribute.getQualifier()) {\n            this.addAttributeByQualifier(attribute);\n        }\n        // whenever an attribute changes its value, the server needs to be notified\n        // and all other attributes with the same qualifier are given the same value\n        attribute.onValueChange((evt) => {\n            if(evt.newValue !== evt.oldValue && evt.sendToServer === true) {\n                const command = CommandFactory.createValueChangedCommand(attribute.id, evt.newValue);\n                this.clientDolphin.getClientConnector().send(command, null);\n            }\n\n            if (attribute.getQualifier()) {\n                let attrs = this.findAttributesByFilter((attr) => {\n                    return attr !== attribute && attr.getQualifier() === attribute.getQualifier();\n                });\n                attrs.forEach((attr) => {\n                    attr.setValue(attribute.getValue());\n                });\n            }\n\n        });\n        attribute.onQualifierChange((evt) => {\n            this.clientDolphin.getClientConnector().send(CommandFactory.createChangeAttributeMetadataCommand(attribute.id, Attribute.QUALIFIER_PROPERTY, evt.newValue), null);\n        });\n    }\n\n    add(model, sendToServer = true) {\n        if (!model) {\n            return false;\n        }\n        if (this.presentationModels.has(model.id)) {\n            ClientModelStore.LOGGER.error(\"There already is a PM with id \" + model.id);\n        }\n        let added = false;\n        if (!this.presentationModels.has(model.id)) {\n            this.presentationModels.set(model.id, model);\n            this.addPresentationModelByType(model);\n\n            if(sendToServer) {\n                let connector = this.clientDolphin.getClientConnector();\n                connector.send(CommandFactory.createCreatePresentationModelCommand(model), null);\n            }\n\n            model.getAttributes().forEach(attribute => {\n                this.registerAttribute(attribute);\n            });\n            this.modelStoreChangeBus.trigger({ 'eventType': ADDED_TYPE, 'clientPresentationModel': model });\n            added = true;\n        }\n        return added;\n    }\n\n    remove(model) {\n        if (!model) {\n            return false;\n        }\n        let removed = false;\n        if (this.presentationModels.has(model.id)) {\n            this.removePresentationModelByType(model);\n            this.presentationModels.delete(model.id);\n            model.getAttributes().forEach((attribute) => {\n                this.removeAttributeById(attribute);\n                if (attribute.getQualifier()) {\n                    this.removeAttributeByQualifier(attribute);\n                }\n            });\n            this.modelStoreChangeBus.trigger({ 'eventType': REMOVED_TYPE, 'clientPresentationModel': model });\n            removed = true;\n        }\n        return removed;\n    }\n\n    findAttributesByFilter(filter) {\n        let matches = [];\n        this.presentationModels.forEach((model) => {\n            model.getAttributes().forEach((attr) => {\n                if (filter(attr)) {\n                    matches.push(attr);\n                }\n            });\n        });\n        return matches;\n    }\n\n    addPresentationModelByType(model) {\n        if (!model) {\n            return;\n        }\n        let type = model.presentationModelType;\n        if (!type) {\n            return;\n        }\n        let presentationModels = this.presentationModelsPerType.get(type);\n        if (!presentationModels) {\n            presentationModels = [];\n            this.presentationModelsPerType.set(type, presentationModels);\n        }\n        if (!(presentationModels.indexOf(model) > -1)) {\n            presentationModels.push(model);\n        }\n    }\n\n    removePresentationModelByType(model) {\n        if (!model || !(model.presentationModelType)) {\n            return;\n        }\n        let presentationModels = this.presentationModelsPerType.get(model.presentationModelType);\n        if (!presentationModels) {\n            return;\n        }\n        if (presentationModels.length > -1) {\n            presentationModels.splice(presentationModels.indexOf(model), 1);\n        }\n        if (presentationModels.length === 0) {\n            this.presentationModelsPerType.delete(model.presentationModelType);\n        }\n    }\n\n    listPresentationModelIds() {\n        let result = [];\n        let iter = this.presentationModels.keys();\n        let next = iter.next();\n        while (!next.done) {\n            result.push(next.value);\n            next = iter.next();\n        }\n        return result;\n    }\n\n    listPresentationModels() {\n        let result = [];\n        let iter = this.presentationModels.values();\n        let next = iter.next();\n        while (!next.done) {\n            result.push(next.value);\n            next = iter.next();\n        }\n        return result;\n    }\n\n    findPresentationModelById(id) {\n        return this.presentationModels.get(id);\n    }\n\n    findAllPresentationModelByType(type) {\n        if (!type || !this.presentationModelsPerType.has(type)) {\n            return [];\n        }\n        return this.presentationModelsPerType.get(type).slice(0); // slice is used to clone the array\n    }\n\n    deletePresentationModel(model, notify) {\n        if (!model) {\n            return;\n        }\n        if (this.containsPresentationModel(model.id)) {\n            this.remove(model);\n            if (!notify || model.clientSideOnly) {\n                return;\n            }\n            this.clientDolphin.getClientConnector().send(CommandFactory.createPresentationModelDeletedCommand(model.id), null);\n        }\n    }\n\n    containsPresentationModel(id) {\n        return this.presentationModels.has(id);\n    }\n\n    addAttributeById(attribute) {\n        if (!attribute || this.attributesPerId.has(attribute.id)) {\n            return;\n        }\n        this.attributesPerId.set(attribute.id, attribute);\n    }\n\n    removeAttributeById(attribute) {\n        if (!attribute || !this.attributesPerId.has(attribute.id)) {\n            return;\n        }\n        this.attributesPerId.delete(attribute.id);\n    }\n\n    findAttributeById(id) {\n        return this.attributesPerId.get(id);\n    }\n\n    addAttributeByQualifier(attribute) {\n        if (!attribute || !attribute.getQualifier()) {\n            return;\n        }\n        let attributes = this.attributesPerQualifier.get(attribute.getQualifier());\n        if (!attributes) {\n            attributes = [];\n            this.attributesPerQualifier.set(attribute.getQualifier(), attributes);\n        }\n        if (!(attributes.indexOf(attribute) > -1)) {\n            attributes.push(attribute);\n        }\n    }\n\n    removeAttributeByQualifier(attribute) {\n        if (!attribute || !attribute.getQualifier()) {\n            return;\n        }\n        let attributes = this.attributesPerQualifier.get(attribute.getQualifier());\n        if (!attributes) {\n            return;\n        }\n        if (attributes.length > -1) {\n            attributes.splice(attributes.indexOf(attribute), 1);\n        }\n        if (attributes.length === 0) {\n            this.attributesPerQualifier.delete(attribute.getQualifier());\n        }\n    }\n\n    findAllAttributesByQualifier(qualifier) {\n        if (!qualifier || !this.attributesPerQualifier.has(qualifier)) {\n            return [];\n        }\n        return this.attributesPerQualifier.get(qualifier).slice(0); // slice is used to clone the array\n    }\n\n    onModelStoreChange(eventHandler) {\n        this.modelStoreChangeBus.onEvent(eventHandler);\n    }\n\n    onModelStoreChangeForType(presentationModelType, eventHandler) {\n        this.modelStoreChangeBus.onEvent(pmStoreEvent => {\n            if (pmStoreEvent.clientPresentationModel.presentationModelType == presentationModelType) {\n                eventHandler(pmStoreEvent);\n            }\n        });\n    }\n}\n\nClientModelStore.LOGGER = LoggerFactory.getLogger('ClientModelStore');\n\n","export default class NoTransmitter {\n\n    transmit(commands, onDone) {\n        // do nothing special\n        onDone([]);\n    }\n\n    signal() {\n        // do nothing\n    }\n\n    reset() {\n        // do nothing\n    }\n}","import ClientConnector from './clientConnector'\nimport ClientDolphin from './clientDolphin'\nimport ClientModelStore from './clientModelStore'\nimport NoTransmitter from './noTransmitter'\nimport { LoggerFactory } from '../logging';\n\n\nclass DolphinBuilder {\n\n    constructor() {\n        this.slackMS = 300;\n        this.maxBatchSize = 50;\n        this.transmitter = null;\n    }\n\n    withSlackMS(slackMS) {\n        this.slackMS = slackMS;\n        return this;\n    }\n\n    withMaxBatchSize(maxBatchSize) {\n        this.maxBatchSize = maxBatchSize;\n        return this;\n    }\n\n    withTransmitter(transmitter) {\n        this.transmitter = transmitter;\n        return this;\n    }\n\n    build() {\n        const clientDolphin = new ClientDolphin();\n        let transmitter;\n        if (this.transmitter) {\n            transmitter = this.transmitter;\n        } else {\n            transmitter = new NoTransmitter();\n        }\n        clientDolphin.setClientConnector(new ClientConnector(transmitter, clientDolphin, this.slackMS, this.maxBatchSize));\n        clientDolphin.setClientModelStore(new ClientModelStore(clientDolphin));\n        DolphinBuilder.LOGGER.debug(\"Remoting client initialized\", clientDolphin, transmitter);\n        return clientDolphin;\n    }\n}\n\nDolphinBuilder.LOGGER = LoggerFactory.getLogger('DolphinBuilder');\n\nconst dolphinBuilder = new DolphinBuilder();\n\nexport { dolphinBuilder }","import {exists, checkMethod, checkParam} from '../utils';\nimport CommandFactory from './commands/commandFactory';\nimport {ADDED_TYPE, REMOVED_TYPE} from './constants';\n\n\nconst DOLPHIN_BEAN = '@@@ R_BEAN @@@';\nconst ACTION_CALL_BEAN = '@@@ CONTROLLER_ACTION_CALL_BEAN @@@';\nconst HIGHLANDER_BEAN = '@@@ HIGHLANDER_BEAN @@@';\nconst DOLPHIN_LIST_SPLICE = '@R:LS@';\nconst SOURCE_SYSTEM = '@@@ SOURCE_SYSTEM @@@';\nconst SOURCE_SYSTEM_CLIENT = 'client';\nconst SOURCE_SYSTEM_SERVER = 'server';\n\nexport default class Connector{\n\n    constructor(url, dolphin, classRepository, config) {\n        checkMethod('Connector(url, dolphin, classRepository, config)');\n        checkParam(url, 'url');\n        checkParam(dolphin, 'dolphin');\n        checkParam(classRepository, 'classRepository');\n\n        let self = this;\n        this.dolphin = dolphin;\n        this.config = config;\n        this.classRepository = classRepository;\n        this.highlanderPMResolver = function() {};\n        this.highlanderPMPromise = new Promise((resolve) => {\n            self.highlanderPMResolver = resolve;\n        });\n\n        dolphin.getClientModelStore().onModelStoreChange((event) => {\n            let model = event.clientPresentationModel;\n            let sourceSystem = model.findAttributeByPropertyName(SOURCE_SYSTEM);\n            if (exists(sourceSystem) && sourceSystem.value === SOURCE_SYSTEM_SERVER) {\n                if (event.eventType === ADDED_TYPE) {\n                    self.onModelAdded(model);\n                } else if (event.eventType === REMOVED_TYPE) {\n                    self.onModelRemoved(model);\n                }\n            }\n        });\n    }\n    connect() {\n        let that = this;\n            that.dolphin.startPushListening(CommandFactory.createStartLongPollCommand(), CommandFactory.createInterruptLongPollCommand());\n    }\n\n    onModelAdded(model) {\n        checkMethod('Connector.onModelAdded(model)');\n        checkParam(model, 'model');\n\n        var type = model.presentationModelType;\n        switch (type) {\n            case ACTION_CALL_BEAN:\n                // ignore\n                break;\n            case DOLPHIN_BEAN:\n                this.classRepository.registerClass(model);\n                break;\n            case HIGHLANDER_BEAN:\n                this.highlanderPMResolver(model);\n                break;\n            case DOLPHIN_LIST_SPLICE:\n                this.classRepository.spliceListEntry(model);\n                this.dolphin.deletePresentationModel(model);\n                break;\n            default:\n                this.classRepository.load(model);\n                break;\n        }\n    }\n\n    onModelRemoved(model) {\n        checkMethod('Connector.onModelRemoved(model)');\n        checkParam(model, 'model');\n        let type = model.presentationModelType;\n        switch (type) {\n            case DOLPHIN_BEAN:\n                this.classRepository.unregisterClass(model);\n                break;\n            case DOLPHIN_LIST_SPLICE:\n                // do nothing\n                break;\n            default:\n                this.classRepository.unload(model);\n                break;\n        }\n    }\n\n    invoke(command) {\n        checkMethod('Connector.invoke(command)');\n        checkParam(command, 'command');\n\n        var dolphin = this.dolphin;\n        return new Promise((resolve, reject) => {\n            dolphin.send(command, {\n                onFinished: (params) => {\n                    resolve(params);\n                },\n                onError: (reason) => {\n                    reject(reason);\n                } \n            });\n        });\n    }\n\n    getHighlanderPM() {\n        return this.highlanderPMPromise;\n    }\n}\n\nexport { SOURCE_SYSTEM, SOURCE_SYSTEM_CLIENT, SOURCE_SYSTEM_SERVER, ACTION_CALL_BEAN };\n","import {exists, checkMethod, checkParam} from '../utils';\nimport { LoggerFactory } from '../logging';\n\nexport default class BeanManager {\n\n    constructor(classRepository) {\n        checkMethod('BeanManager(classRepository)');\n        checkParam(classRepository, 'classRepository');\n\n        this.classRepository = classRepository;\n        this.addedHandlers = new Map();\n        this.removedHandlers = new Map();\n        this.updatedHandlers = new Map();\n        this.arrayUpdatedHandlers = new Map();\n        this.allAddedHandlers = [];\n        this.allRemovedHandlers = [];\n        this.allUpdatedHandlers = [];\n        this.allArrayUpdatedHandlers = [];\n\n        this._handleBeanAdded = this._handleBeanAdded.bind(this);\n        this._handleBeanRemoved = this._handleBeanRemoved.bind(this);\n        this._handleBeanUpdate = this._handleBeanUpdate.bind(this);\n        this._handleArrayUpdate = this._handleArrayUpdate.bind(this);\n\n        this.classRepository.onBeanAdded(this._handleBeanAdded);\n        this.classRepository.onBeanRemoved(this._handleBeanRemoved);\n        this.classRepository.onBeanUpdate(this._handleBeanUpdate);\n        this.classRepository.onArrayUpdate(this._handleArrayUpdate);\n    }\n\n    _handleBeanAdded(type, bean) {\n        const handlerList = this.addedHandlers.get(type);\n        if (exists(handlerList)) {\n            handlerList.forEach((handler) => {\n                try {\n                    handler(bean);\n                } catch (e) {\n                    BeanManager.LOGGER.error('An exception occurred while calling an onBeanAdded-handler for type', type, e);\n                }\n            });\n        }\n        this.allAddedHandlers.forEach((handler) => {\n            try {\n                handler(bean);\n            } catch (e) {\n                BeanManager.LOGGER.error('An exception occurred while calling a general onBeanAdded-handler', e);\n            }\n        });\n    }\n\n    _handleBeanRemoved(type, bean) {\n        const handlerList = this.removedHandlers.get(type);\n        if (exists(handlerList)) {\n            handlerList.forEach((handler) => {\n                try {\n                    handler(bean);\n                } catch (e) {\n                    BeanManager.LOGGER.error('An exception occurred while calling an onBeanRemoved-handler for type', type, e);\n                }\n            });\n        }\n        this.allRemovedHandlers.forEach((handler) => {\n            try {\n                handler(bean);\n            } catch (e) {\n                BeanManager.LOGGER.error('An exception occurred while calling a general onBeanRemoved-handler', e);\n            }\n        });\n    }\n\n    _handleArrayUpdate(type, bean, propertyName, index, count, newElements) {\n        const handlerList = this.arrayUpdatedHandlers.get(type);\n        if (exists(handlerList)) {\n            handlerList.forEach((handler) => {\n                try {\n                    handler(bean, propertyName, index, count, newElements);\n                } catch (e) {\n                    BeanManager.LOGGER.error('An exception occurred while calling an onArrayUpdate-handler for type', type, e);\n                }\n            });\n        }\n        this.allArrayUpdatedHandlers.forEach((handler) => {\n            try {\n                handler(bean, propertyName, index, count, newElements);\n            } catch (e) {\n                BeanManager.LOGGER.error('An exception occurred while calling a general onArrayUpdate-handler', e);\n            }\n        });\n    }\n\n    _handleBeanUpdate(type, bean, propertyName, newValue, oldValue) {\n        const handlerList = this.updatedHandlers.get(type);\n        if (exists(handlerList)) {\n            handlerList.forEach((handler) => {\n                try {\n                    handler(bean, propertyName, newValue, oldValue);\n                } catch (e) {\n                    BeanManager.LOGGER.error('An exception occurred while calling an onBeanUpdate-handler for type', type, e);\n                }\n            });\n        }\n        this.allUpdatedHandlers.forEach((handler) => {\n            try {\n                handler(bean, propertyName, newValue, oldValue);\n            } catch (e) {\n                BeanManager.LOGGER.error('An exception occurred while calling a general onBeanUpdate-handler', e);\n            }\n        });\n    }\n\n\n    notifyBeanChange(bean, propertyName, newValue) {\n        checkMethod('BeanManager.notifyBeanChange(bean, propertyName, newValue)');\n        checkParam(bean, 'bean');\n        checkParam(propertyName, 'propertyName');\n\n        return this.classRepository.notifyBeanChange(bean, propertyName, newValue);\n    }\n\n\n    notifyArrayChange(bean, propertyName, index, count, removedElements) {\n        checkMethod('BeanManager.notifyArrayChange(bean, propertyName, index, count, removedElements)');\n        checkParam(bean, 'bean');\n        checkParam(propertyName, 'propertyName');\n        checkParam(index, 'index');\n        checkParam(count, 'count');\n        checkParam(removedElements, 'removedElements');\n\n        this.classRepository.notifyArrayChange(bean, propertyName, index, count, removedElements);\n    }\n\n\n    isManaged(bean) {\n        checkMethod('BeanManager.isManaged(bean)');\n        checkParam(bean, 'bean');\n\n        // TODO: Implement dolphin.isManaged() [DP-7]\n        throw new Error(\"Not implemented yet\");\n    }\n\n\n    create(type) {\n        checkMethod('BeanManager.create(type)');\n        checkParam(type, 'type');\n\n        // TODO: Implement dolphin.create() [DP-7]\n        throw new Error(\"Not implemented yet\");\n    }\n\n\n    add(type, bean) {\n        checkMethod('BeanManager.add(type, bean)');\n        checkParam(type, 'type');\n        checkParam(bean, 'bean');\n\n        // TODO: Implement dolphin.add() [DP-7]\n        throw new Error(\"Not implemented yet\");\n    }\n\n\n    addAll(type, collection) {\n        checkMethod('BeanManager.addAll(type, collection)');\n        checkParam(type, 'type');\n        checkParam(collection, 'collection');\n\n        // TODO: Implement dolphin.addAll() [DP-7]\n        throw new Error(\"Not implemented yet\");\n    }\n\n\n    remove(bean) {\n        checkMethod('BeanManager.remove(bean)');\n        checkParam(bean, 'bean');\n\n        // TODO: Implement dolphin.remove() [DP-7]\n        throw new Error(\"Not implemented yet\");\n    }\n\n\n    removeAll(collection) {\n        checkMethod('BeanManager.removeAll(collection)');\n        checkParam(collection, 'collection');\n\n        // TODO: Implement dolphin.removeAll() [DP-7]\n        throw new Error(\"Not implemented yet\");\n    }\n\n\n    removeIf(predicate) {\n        checkMethod('BeanManager.removeIf(predicate)');\n        checkParam(predicate, 'predicate');\n\n        // TODO: Implement dolphin.removeIf() [DP-7]\n        throw new Error(\"Not implemented yet\");\n    }\n\n\n    onAdded(type, eventHandler) {\n        let self = this;\n        if (!exists(eventHandler)) {\n            eventHandler = type;\n            checkMethod('BeanManager.onAdded(eventHandler)');\n            checkParam(eventHandler, 'eventHandler');\n\n            this.allAddedHandlers = this.allAddedHandlers.concat(eventHandler);\n            return {\n                unsubscribe: () => {\n                    self.allAddedHandlers = self.allAddedHandlers.filter((value) => {\n                        return value !== eventHandler;\n                    });\n                }\n            };\n        } else {\n            checkMethod('BeanManager.onAdded(type, eventHandler)');\n            checkParam(type, 'type');\n            checkParam(eventHandler, 'eventHandler');\n\n            let handlerList = this.addedHandlers.get(type);\n            if (!exists(handlerList)) {\n                handlerList = [];\n            }\n            this.addedHandlers.set(type, handlerList.concat(eventHandler));\n            return {\n                unsubscribe: () => {\n                    const handlerList = self.addedHandlers.get(type);\n                    if (exists(handlerList)) {                   \n                        self.addedHandlers.set(type, handlerList.filter((value) => {\n                            return value !== eventHandler;\n                        }));\n                    }\n                }\n            };\n        }\n    }\n\n\n    onRemoved(type, eventHandler) {\n        let self = this;\n        if (!exists(eventHandler)) {\n            eventHandler = type;\n            checkMethod('BeanManager.onRemoved(eventHandler)');\n            checkParam(eventHandler, 'eventHandler');\n\n            this.allRemovedHandlers = this.allRemovedHandlers.concat(eventHandler);\n            return {\n                unsubscribe: () => {\n                    self.allRemovedHandlers = self.allRemovedHandlers.filter((value) => {\n                        return value !== eventHandler;\n                    });\n                }\n            };\n        } else {\n            checkMethod('BeanManager.onRemoved(type, eventHandler)');\n            checkParam(type, 'type');\n            checkParam(eventHandler, 'eventHandler');\n\n            let handlerList = this.removedHandlers.get(type);\n            if (!exists(handlerList)) {\n                handlerList = [];\n            }\n            this.removedHandlers.set(type, handlerList.concat(eventHandler));\n            return {\n                unsubscribe: () => {\n                    const handlerList = self.removedHandlers.get(type);\n                    if (exists(handlerList)) {\n                        self.removedHandlers.set(type, handlerList.filter((value) => {\n                            return value !== eventHandler;\n                        }));\n                    }\n                }\n            };\n        }\n    }\n\n\n    onBeanUpdate(type, eventHandler) {\n        let self = this;\n        if (!exists(eventHandler)) {\n            eventHandler = type;\n            checkMethod('BeanManager.onBeanUpdate(eventHandler)');\n            checkParam(eventHandler, 'eventHandler');\n\n            this.allUpdatedHandlers = this.allUpdatedHandlers.concat(eventHandler);\n            return {\n                unsubscribe: () => {\n                    self.allUpdatedHandlers = self.allUpdatedHandlers.filter((value) => {\n                        return value !== eventHandler;\n                    });\n                }\n            };\n        } else {\n            checkMethod('BeanManager.onBeanUpdate(type, eventHandler)');\n            checkParam(type, 'type');\n            checkParam(eventHandler, 'eventHandler');\n\n            let handlerList = this.updatedHandlers.get(type);\n            if (!exists(handlerList)) {\n                handlerList = [];\n            }\n            this.updatedHandlers.set(type, handlerList.concat(eventHandler));\n            return {\n                unsubscribe: () => {\n                    let handlerList = self.updatedHandlers.get(type);\n                    if (exists(handlerList)) {\n                        self.updatedHandlers.set(type, handlerList.filter((value) => {\n                            return value !== eventHandler;\n                        }));\n                    }\n                }\n            };\n        }\n    }\n\n    onArrayUpdate(type, eventHandler) {\n        let self = this;\n        if (!exists(eventHandler)) {\n            eventHandler = type;\n            checkMethod('BeanManager.onArrayUpdate(eventHandler)');\n            checkParam(eventHandler, 'eventHandler');\n\n            this.allArrayUpdatedHandlers = this.allArrayUpdatedHandlers.concat(eventHandler);\n            return {\n                unsubscribe: () => {\n                    self.allArrayUpdatedHandlers = self.allArrayUpdatedHandlers.filter((value) => {\n                        return value !== eventHandler;\n                    });\n                }\n            };\n        } else {\n            checkMethod('BeanManager.onArrayUpdate(type, eventHandler)');\n            checkParam(type, 'type');\n            checkParam(eventHandler, 'eventHandler');\n\n            let handlerList = this.arrayUpdatedHandlers.get(type);\n            if (!exists(handlerList)) {\n                handlerList = [];\n            }\n            this.arrayUpdatedHandlers.set(type, handlerList.concat(eventHandler));\n            return {\n                unsubscribe: () => {\n                    let handlerList = self.arrayUpdatedHandlers.get(type);\n                    if (exists(handlerList)) {\n                        self.arrayUpdatedHandlers.set(type, handlerList.filter((value) => {\n                            return value !== eventHandler;\n                        }));\n                    }\n                }\n            };\n        }\n    }\n}\n\nBeanManager.LOGGER = LoggerFactory.getLogger('BeanManager');\n","import * as consts from './constants';\nimport {exists, checkMethod, checkParam} from '../utils';\nimport { LoggerFactory } from '../logging';\n\nclass ClassRepository {\n\n    constructor(dolphin) {\n        checkMethod('ClassRepository(dolphin)');\n        checkParam(dolphin, 'dolphin');\n\n        this.dolphin = dolphin;\n        this.classes = new Map();\n        this.beanFromDolphin = new Map();\n        this.beanToDolphin = new Map();\n        this.classInfos = new Map();\n        this.beanAddedHandlers = [];\n        this.beanRemovedHandlers = [];\n        this.propertyUpdateHandlers = [];\n        this.arrayUpdateHandlers = [];\n        this.blocked = null;\n    }\n\n    sendListSplice(classRepository, modelId, propertyName, from, to, newElements) {\n        let dolphin = classRepository.dolphin;\n        let model = dolphin.findPresentationModelById(modelId);\n        if (exists(model)) {\n            let classInfo = classRepository.classes.get(model.presentationModelType);\n            let type = classInfo[propertyName];\n            if (exists(type)) {\n\n                let attributes = [\n                    dolphin.attribute('@@@ SOURCE_SYSTEM @@@', null, 'client'),\n                    dolphin.attribute('source', null, modelId),\n                    dolphin.attribute('attribute', null, propertyName),\n                    dolphin.attribute('from', null, from),\n                    dolphin.attribute('to', null, to),\n                    dolphin.attribute('count', null, newElements.length)\n                ];\n                newElements.forEach(function (element, index) {\n                    attributes.push(dolphin.attribute(index.toString(), null, ClassRepository.toDolphin(classRepository, type, element)));\n                });\n                dolphin.presentationModel.apply(dolphin, [null, '@DP:LS@'].concat(attributes));\n            }\n        }\n    }\n\n    validateList(classRepository, type, bean, propertyName) {\n        let list = bean[propertyName];\n        if (!exists(list)) {\n            classRepository.propertyUpdateHandlers.forEach(function (handler) {\n                try {\n                    handler(type, bean, propertyName, [], undefined);\n                } catch (e) {\n                    ClassRepository.LOGGER.error('An exception occurred while calling an onBeanUpdate-handler', e);\n                }\n            });\n        }\n    }\n\n    block(bean, propertyName) {\n        if (exists(this.blocked)) {\n            throw new Error('Trying to create a block while another block exists');\n        }\n        this.blocked = {\n            bean: bean,\n            propertyName: propertyName\n        };\n    }\n\n    isBlocked(bean, propertyName) {\n        return exists(this.blocked) && this.blocked.bean === bean && this.blocked.propertyName === propertyName;\n    }\n\n    unblock() {\n        this.blocked = null;\n    }\n\n    notifyBeanChange(bean, propertyName, newValue) {\n        checkMethod('ClassRepository.notifyBeanChange(bean, propertyName, newValue)');\n        checkParam(bean, 'bean');\n        checkParam(propertyName, 'propertyName');\n\n        let modelId = this.beanToDolphin.get(bean);\n        if (exists(modelId)) {\n            let model = this.dolphin.findPresentationModelById(modelId);\n            if (exists(model)) {\n                let classInfo = this.classes.get(model.presentationModelType);\n                let type = classInfo[propertyName];\n                let attribute = model.findAttributeByPropertyName(propertyName);\n                if (exists(type) && exists(attribute)) {\n                    let oldValue = attribute.getValue();\n                    attribute.setValue(ClassRepository.toDolphin(this, type, newValue));\n                    return ClassRepository.fromDolphin(this, type, oldValue);\n                }\n            }\n        }\n    }\n\n    notifyArrayChange(bean, propertyName, index, count, removedElements) {\n        checkMethod('ClassRepository.notifyArrayChange(bean, propertyName, index, count, removedElements)');\n        checkParam(bean, 'bean');\n        checkParam(propertyName, 'propertyName');\n        checkParam(index, 'index');\n        checkParam(count, 'count');\n        checkParam(removedElements, 'removedElements');\n\n        if (this.isBlocked(bean, propertyName)) {\n            return;\n        }\n        let modelId = this.beanToDolphin.get(bean);\n        let array = bean[propertyName];\n        if (exists(modelId) && exists(array)) {\n            let removedElementsCount = Array.isArray(removedElements) ? removedElements.length : 0;\n            this.sendListSplice(this, modelId, propertyName, index, index + removedElementsCount, array.slice(index, index + count));\n        }\n    }\n\n    onBeanAdded(handler) {\n        checkMethod('ClassRepository.onBeanAdded(handler)');\n        checkParam(handler, 'handler');\n        this.beanAddedHandlers.push(handler);\n    }\n\n    onBeanRemoved(handler) {\n        checkMethod('ClassRepository.onBeanRemoved(handler)');\n        checkParam(handler, 'handler');\n        this.beanRemovedHandlers.push(handler);\n    }\n\n    onBeanUpdate(handler) {\n        checkMethod('ClassRepository.onBeanUpdate(handler)');\n        checkParam(handler, 'handler');\n        this.propertyUpdateHandlers.push(handler);\n    }\n\n    onArrayUpdate(handler) {\n        checkMethod('ClassRepository.onArrayUpdate(handler)');\n        checkParam(handler, 'handler');\n        this.arrayUpdateHandlers.push(handler);\n    }\n\n    registerClass(model) {\n        checkMethod('ClassRepository.registerClass(model)');\n        checkParam(model, 'model');\n\n        if (this.classes.has(model.id)) {\n            return;\n        }\n\n        let classInfo = {};\n        model.attributes.filter(function (attribute) {\n            return attribute.propertyName.search(/^@/) < 0;\n        }).forEach(function (attribute) {\n            classInfo[attribute.propertyName] = attribute.value;\n        });\n        this.classes.set(model.id, classInfo);\n    }\n\n    unregisterClass(model) {\n        checkMethod('ClassRepository.unregisterClass(model)');\n        checkParam(model, 'model');\n        this.classes['delete'](model.id);\n    }\n\n    load(model) {\n        checkMethod('ClassRepository.load(model)');\n        checkParam(model, 'model');\n\n        let self = this;\n        let classInfo = this.classes.get(model.presentationModelType);\n        let bean = {};\n        model.attributes.filter(function (attribute) {\n            return (attribute.propertyName.search(/^@/) < 0);\n        }).forEach(function (attribute) {\n            bean[attribute.propertyName] = null;\n            attribute.onValueChange(function (event) {\n                if (event.oldValue !== event.newValue) {\n                    let oldValue = ClassRepository.fromDolphin(self, classInfo[attribute.propertyName], event.oldValue);\n                    let newValue = ClassRepository.fromDolphin(self, classInfo[attribute.propertyName], event.newValue);\n                    self.propertyUpdateHandlers.forEach((handler) => {\n                        try {\n                            handler(model.presentationModelType, bean, attribute.propertyName, newValue, oldValue);\n                        } catch (e) {\n                            ClassRepository.LOGGER.error('An exception occurred while calling an onBeanUpdate-handler', e);\n                        }\n                    });\n                }\n            });\n        });\n        this.beanFromDolphin.set(model.id, bean);\n        this.beanToDolphin.set(bean, model.id);\n        this.classInfos.set(model.id, classInfo);\n        this.beanAddedHandlers.forEach((handler) => {\n            try {\n                handler(model.presentationModelType, bean);\n            } catch (e) {\n                ClassRepository.LOGGER.error('An exception occurred while calling an onBeanAdded-handler', e);\n            }\n        });\n        return bean;\n    }\n\n    unload(model) {\n        checkMethod('ClassRepository.unload(model)');\n        checkParam(model, 'model');\n\n        let bean = this.beanFromDolphin.get(model.id);\n        this.beanFromDolphin['delete'](model.id);\n        this.beanToDolphin['delete'](bean);\n        this.classInfos['delete'](model.id);\n        if (exists(bean)) {\n            this.beanRemovedHandlers.forEach((handler) => {\n                try {\n                    handler(model.presentationModelType, bean);\n                } catch (e) {\n                    ClassRepository.LOGGER.error('An exception occurred while calling an onBeanRemoved-handler', e);\n                }\n            });\n        }\n        return bean;\n    }\n\n    spliceListEntry(model) {\n        checkMethod('ClassRepository.spliceListEntry(model)');\n        checkParam(model, 'model');\n\n        let source = model.findAttributeByPropertyName('source');\n        let attribute = model.findAttributeByPropertyName('attribute');\n        let from = model.findAttributeByPropertyName('from');\n        let to = model.findAttributeByPropertyName('to');\n        let count = model.findAttributeByPropertyName('count');\n\n        if (exists(source) && exists(attribute) && exists(from) && exists(to) && exists(count)) {\n            let classInfo = this.classInfos.get(source.value);\n            let bean = this.beanFromDolphin.get(source.value);\n            if (exists(bean) && exists(classInfo)) {\n                let type = model.presentationModelType;\n                //var entry = fromDolphin(this, classInfo[attribute.value], element.value);\n                this.validateList(this, type, bean, attribute.value);\n                let newElements = [],\n                    element = null;\n                for (let i = 0; i < count.value; i++) {\n                    element = model.findAttributeByPropertyName(i.toString());\n                    if (!exists(element)) {\n                        throw new Error(\"Invalid list modification update received\");\n                    }\n                    newElements.push(ClassRepository.fromDolphin(this, classInfo[attribute.value], element.value));\n                }\n                try {\n                    this.block(bean, attribute.value);\n                    this.arrayUpdateHandlers.forEach((handler) => {\n                        try {\n                            handler(type, bean, attribute.value, from.value, to.value - from.value, newElements);\n                        } catch (e) {\n                            ClassRepository.LOGGER.error('An exception occurred while calling an onArrayUpdate-handler', e);\n                        }\n                    });\n                } finally {\n                    this.unblock();\n                }\n            } else {\n                throw new Error(\"Invalid list modification update received. Source bean unknown.\");\n            }\n        } else {\n            throw new Error(\"Invalid list modification update received\");\n        }\n    }\n\n    mapParamToDolphin(param) {\n        if (!exists(param)) {\n            return param;\n        }\n        let type = typeof param;\n        if (type === 'object') {\n            if (param instanceof Date) {\n                return param.toISOString();\n            } else {\n                let value = this.beanToDolphin.get(param);\n                if (exists(value)) {\n                    return value;\n                }\n                throw new TypeError(\"Only managed remoting beans can be used\");\n            }\n        }\n        if (type === 'string' || type === 'number' || type === 'boolean') {\n            return param;\n        }\n        throw new TypeError(\"Only managed remoting beans and primitive types can be used\");\n    }\n\n    mapDolphinToBean(value) {\n        return ClassRepository.fromDolphin(this, consts.REMOTING_BEAN, value);\n    }\n}\n\nClassRepository.fixType = function(type, value) {\n    switch (type) {\n        case consts.BYTE:\n        case consts.SHORT:\n        case consts.INT:\n        case consts.LONG:\n            return parseInt(value);\n        case consts.FLOAT:\n        case consts.DOUBLE:\n            return parseFloat(value);\n        case consts.BOOLEAN:\n            return 'true' === String(value).toLowerCase();\n        case consts.STRING:\n        case consts.ENUM:\n            return String(value);\n        default:\n            return value;\n    }\n};\n\nClassRepository.fromDolphin = function(classRepository, type, value) {\n    if (!exists(value)) {\n        return null;\n    }\n    switch (type) {\n        case consts.REMOTING_BEAN:\n            return classRepository.beanFromDolphin.get(String(value));\n        case consts.DATE:\n            return new Date(String(value));\n        case consts.CALENDAR:\n            return new Date(String(value));\n        case consts.LOCAL_DATE_FIELD_TYPE:\n            return new Date(String(value));\n        case consts.LOCAL_DATE_TIME_FIELD_TYPE:\n            return new Date(String(value));\n        case consts.ZONED_DATE_TIME_FIELD_TYPE:\n            return new Date(String(value));\n        default:\n            return ClassRepository.fixType(type, value);\n    }\n};\n\nClassRepository.toDolphin = function(classRepository, type, value) {\n    if (!exists(value)) {\n        return null;\n    }\n    switch (type) {\n        case consts.REMOTING_BEAN:\n            return classRepository.beanToDolphin.get(value);\n        case consts.DATE:\n            return value instanceof Date ? value.toISOString() : value;\n        case consts.CALENDAR:\n            return value instanceof Date ? value.toISOString() : value;\n        case consts.LOCAL_DATE_FIELD_TYPE:\n            return value instanceof Date ? value.toISOString() : value;\n        case consts.LOCAL_DATE_TIME_FIELD_TYPE:\n            return value instanceof Date ? value.toISOString() : value;\n        case consts.ZONED_DATE_TIME_FIELD_TYPE:\n            return value instanceof Date ? value.toISOString() : value;\n        default:\n            return ClassRepository.fixType(type, value);\n    }\n};\n\nClassRepository.LOGGER = LoggerFactory.getLogger('ClassRepository');\n\nexport default ClassRepository;\n","import {checkMethod, checkParam} from '../utils';\nimport { LoggerFactory } from '../logging';\n\nexport default class ControllerProxy {\n\n    constructor(controllerId, model, manager){\n        checkMethod('ControllerProxy(controllerId, model, manager)');\n        checkParam(controllerId, 'controllerId');\n        checkParam(model, 'model');\n        checkParam(manager, 'manager');\n\n        this.controllerId = controllerId;\n        this.model = model;\n        this.manager = manager;\n        this.destroyed = false;\n        this.onDestroyedHandlers = new Set();\n    }\n\n    getModel() {\n        return this.model;\n    }\n\n    getId() {\n        return this.controllerId;\n    }\n\n    invoke(name, params){\n        checkMethod('ControllerProxy.invoke(name, params)');\n        checkParam(name, 'name');\n\n        if (this.destroyed) {\n            throw new Error('The controller was already destroyed');\n        }\n        return this.manager.invokeAction(this.controllerId, name, params);\n    }\n\n    createController(name) {\n        return this.manager._createController(name, this.getId());\n    }\n\n    destroy(){\n        if (this.destroyed) {\n            throw new Error('The controller was already destroyed');\n        }\n        this.destroyed = true;\n        this.onDestroyedHandlers.forEach((handler) => {\n            try {\n                handler(this);\n            } catch(e) {\n                ControllerProxy.LOGGER.error('An exception occurred while calling an onDestroyed-handler', e);\n            }\n        }, this);\n        return this.manager.destroyController(this);\n    }\n\n    onDestroyed(handler){\n        checkMethod('ControllerProxy.onDestroyed(handler)');\n        checkParam(handler, 'handler');\n\n        let self = this;\n        this.onDestroyedHandlers.add(handler);\n        return {\n            unsubscribe: () => {\n                self.onDestroyedHandlers.delete(handler);\n            }\n        };\n    }\n}\n\nControllerProxy.LOGGER = LoggerFactory.getLogger('ControllerProxy');\n","import {exists, checkMethod, checkParam} from '../utils';\n\nimport ControllerProxy from './controllerProxy.js';\n\nimport CommandFactory from './commands/commandFactory.js';\n\n\nimport { SOURCE_SYSTEM } from './connector.js';\nimport { SOURCE_SYSTEM_CLIENT } from './connector.js';\nimport { ACTION_CALL_BEAN } from './connector.js';\n\nconst CONTROLLER_ID = 'controllerId';\nconst MODEL = 'model';\nconst ERROR_CODE = 'errorCode';\n\nexport default class ControllerManager {\n\n    constructor(dolphin, classRepository, connector) {\n        checkMethod('ControllerManager(dolphin, classRepository, connector)');\n        checkParam(dolphin, 'dolphin');\n        checkParam(classRepository, 'classRepository');\n        checkParam(connector, 'connector');\n\n        this.dolphin = dolphin;\n        this.classRepository = classRepository;\n        this.connector = connector;\n        this.controllers = new Set();\n    }\n\n    createController(name) {\n        return this._createController(name, null);\n    }\n\n    _createController(name, parentControllerId) {\n        checkMethod('ControllerManager.createController(name)');\n        checkParam(name, 'name');\n\n        let self = this;\n\n        return new Promise((resolve, reject) => {\n            self.connector.getHighlanderPM().then((highlanderPM) => {\n                const MSG_ERROR_CREATING_CONTROLLER = 'Error creating controller: ';\n\n                self.connector.invoke(CommandFactory.createCreateControllerCommand(name, parentControllerId)).then(() => {\n                    let controllerId;\n\n                    self.getValueWithRetry(\n                            () => highlanderPM.findAttributeByPropertyName(CONTROLLER_ID).getValue(),\n                            'Could not get an controllerID from highlanderPM.'\n                        ).then((ctrlId) => {\n                            controllerId = ctrlId;\n                            return self.getValueWithRetry(\n                                () => highlanderPM.findAttributeByPropertyName(MODEL).getValue(),\n                                'Could not get an modelID from highlanderPM.'\n                            );\n                        })\n                        .then((modelId) => {\n                            return self.getValueWithRetry(\n                                () => self.classRepository.mapDolphinToBean(modelId),\n                                'Could not get an model from classRepository for ID: ' + modelId\n                            );\n                        })\n                        .then((model) => {\n                            try {\n                                const controller = new ControllerProxy(controllerId, model, self);\n                                self.controllers.add(controller);\n                                resolve(controller);\n                            } catch (e) {\n                                reject(MSG_ERROR_CREATING_CONTROLLER + e);\n                            }\n                        }).catch((error) => {\n                            reject(MSG_ERROR_CREATING_CONTROLLER + error);\n                        });\n                }).catch((error) => {\n                    reject(MSG_ERROR_CREATING_CONTROLLER + error);\n                });\n            });\n        });\n    }\n\n\n    getValueWithRetry(getValueCall, errorMessage) {\n        return new Promise((resolve, reject) => {\n            const RETRIES = 1000;\n            const RETRY_TIME = 5;\n            let i = 0;\n            const intervalID = setInterval(() => {\n                let value = getValueCall();\n                \n                if (!(typeof value !== 'undefined' && value !== null)) {\n                    i++;\n                    if (i >= RETRIES) {\n                        clearInterval(intervalID);\n                        reject(errorMessage + \" after \" + i + \" retries.\");\n                    }\n                } else {\n                    clearInterval(intervalID);\n                    resolve(value);\n                }\n            }, RETRY_TIME);\n        });\n    }\n\n    invokeAction(controllerId, actionName, params) {\n        checkMethod('ControllerManager.invokeAction(controllerId, actionName, params)');\n        checkParam(controllerId, 'controllerId');\n        checkParam(actionName, 'actionName');\n\n        let self = this;\n        return new Promise((resolve, reject) => {\n\n            let attributes = [\n                self.dolphin.attribute(SOURCE_SYSTEM, null, SOURCE_SYSTEM_CLIENT),\n                self.dolphin.attribute(ERROR_CODE)\n            ];\n\n            let pm = self.dolphin.presentationModel.apply(self.dolphin, [null, ACTION_CALL_BEAN].concat(attributes));\n\n            let actionParams = [];\n            if (exists(params)) {\n                for (var param in params) {\n                    if (params.hasOwnProperty(param)) {\n                        let value = self.classRepository.mapParamToDolphin(params[param]);\n                        actionParams.push({\n                            name: param,\n                            value: value\n                        });\n                    }\n                }\n            }\n\n            self.connector.invoke(CommandFactory.createCallActionCommand(controllerId, actionName, actionParams)).then(() => {\n                let isError = pm.findAttributeByPropertyName(ERROR_CODE).getValue();\n                if (isError) {\n                    reject(new Error(\"Server side ControllerAction \" + actionName + \" caused an error. Please see server log for details.\"));\n                } else {\n                    resolve();\n                }\n                self.dolphin.deletePresentationModel(pm);\n            }).catch(reject);\n        });\n    }\n\n    destroyController(controller) {\n        checkMethod('ControllerManager.destroyController(controller)');\n        checkParam(controller, 'controller');\n\n        let self = this;\n        return new Promise((resolve, reject) => {\n            self.connector.getHighlanderPM().then((highlanderPM) => {\n                self.controllers.delete(controller);\n                highlanderPM.findAttributeByPropertyName(CONTROLLER_ID).setValue(controller.controllerId);\n                self.connector.invoke(CommandFactory.createDestroyControllerCommand(controller.getId())).then(resolve).catch(reject);\n            });\n        });\n    }\n\n    destroy() {\n        let controllersCopy = this.controllers;\n        let promises = [];\n        this.controllers = new Set();\n        controllersCopy.forEach((controller) => {\n            try {\n                promises.push(controller.destroy());\n            } catch (e) {\n                // ignore\n            }\n        });\n        return Promise.all(promises);\n    }\n}\n","import Emitter from 'emitter-component';\nimport CommandFactory from './commands/commandFactory';\nimport {exists, checkMethod, checkParam} from '../utils';\n\nexport default class ClientContext{\n\n    constructor(dolphin, beanManager, controllerManager, connector){\n        checkMethod('ClientContext(dolphin, beanManager, controllerManager, connector)');\n        checkParam(dolphin, 'dolphin');\n        checkParam(beanManager, 'beanManager');\n        checkParam(controllerManager, 'controllerManager');\n        checkParam(connector, 'connector');\n\n        this.dolphin = dolphin;\n        this.beanManager = beanManager;\n        this._controllerManager = controllerManager;\n        this._connector = connector;\n        this.connectionPromise = null;\n        this.isConnected = false;\n    }\n\n    connect(){\n        let self = this;\n        this.connectionPromise = new Promise((resolve, reject) => {\n            self._connector.connect();\n            self._connector.invoke(CommandFactory.createCreateContextCommand()).then(() => {\n                self.isConnected = true;\n                resolve();\n            }).catch(reject);\n        });\n        return this.connectionPromise;\n    }\n\n    onConnect(){\n        if(exists(this.connectionPromise)){\n            if(!this.isConnected){\n                return this.connectionPromise;\n            }else{\n                return new Promise((resolve) => {\n                    resolve();\n                });\n            }\n        }else{\n            return this.connect();\n        }\n    }\n\n    createController(name){\n        checkMethod('ClientContext.createController(name)');\n        checkParam(name, 'name');\n\n        return this._controllerManager.createController(name);\n    }\n\n    disconnect(){\n        let self = this;\n        this.dolphin.stopPushListening();\n        return new Promise((resolve) => {\n            self._controllerManager.destroy().then(() => {\n                self._connector.invoke(CommandFactory.createDestroyContextCommand());\n                self.dolphin = null;\n                self.beanManager = null;\n                self._controllerManager = null;\n                self._connector = null;\n                resolve();\n            });\n        });\n    }\n}\n\nEmitter(ClientContext.prototype);","export class DolphinRemotingError extends Error {\n  constructor(message = 'Remoting Error', detail) {\n    super(message);\n    this.detail = detail || undefined;\n  }\n}\n\nexport class DolphinSessionError extends Error {\n  constructor(message = 'Session Error') {\n    super(message);\n  }\n}\n\nexport class HttpResponseError extends Error {\n  constructor(message = 'Http Response Error') {\n    super(message);\n  }\n}\n\nexport class HttpNetworkError extends Error {\n    constructor(message = 'Http Network Error') {\n        super(message);\n    }\n}","import { LoggerFactory } from '../logging';\n\nexport default class RemotingErrorHandler {\n\n    onError(error) {\n        RemotingErrorHandler.LOGGER.error(error);\n    }\n\n}\n\nRemotingErrorHandler.LOGGER = LoggerFactory.getLogger('RemotingErrorHandler');","import Emitter from 'emitter-component';\n\n\nimport { exists } from '../utils';\nimport { DolphinRemotingError, DolphinSessionError } from './errors';\nimport Codec from './commands/codec';\nimport RemotingErrorHandler from './remotingErrorHandler';\nimport { LoggerFactory, LogLevel } from '../logging';\nimport {VALUE_CHANGED_COMMAND_ID, START_LONG_POLL_COMMAND_ID} from './commands/commandConstants';\n\nconst DOLPHIN_SESSION_TIMEOUT = 408;\n\nexport default class PlatformHttpTransmitter {\n\n    constructor(url, config, client) {\n        this.url = url;\n        this.config = config;\n        this.client = client;\n        this.headersInfo = exists(config) ? config.headersInfo : null;\n        this.failed_attempt = 0;\n\n        const connectionConfig =  this._connectionConfig();\n        this.maxRetry = exists(connectionConfig) && exists(connectionConfig.maxRetry)?connectionConfig.maxRetry: 3;\n        this.timeout = exists(connectionConfig) && exists(connectionConfig.timeout)?connectionConfig.timeout: 5000;\n    }\n\n    _connectionConfig() {\n        return exists(this.config) ? this.config.connection : null;\n    }\n\n    _handleError(reject, error) {\n        const connectionConfig =  this._connectionConfig();\n        let errorHandlers = exists(connectionConfig) && exists(connectionConfig.errorHandlers)?connectionConfig.errorHandlers: [new RemotingErrorHandler()];\n        errorHandlers.forEach(function(handler) {\n            handler.onError(error);\n        });\n        reject(error);\n    }\n\n    _send(commands) {\n        const self = this;\n        return new Promise((resolve, reject) => {\n            if (this.client) {\n                const encodedCommands = Codec.encode(commands);\n\n                if (PlatformHttpTransmitter.LOGGER.isLogLevelUseable(LogLevel.DEBUG) && !PlatformHttpTransmitter.LOGGER.isLogLevelUseable(LogLevel.TRACE)) {\n                    for (let i = 0; i < commands.length; i++) {\n                        let command = commands[i];\n                        if (command.id === VALUE_CHANGED_COMMAND_ID) {\n                            PlatformHttpTransmitter.LOGGER.debug('send', command, encodedCommands);\n                        }\n                    }\n                }\n\n                const useWorker = commands.length === 1 && commands[0].id === START_LONG_POLL_COMMAND_ID;\n                const httpClient = this.client.getService('HttpClient');\n                if (httpClient && self.failed_attempt <= self.maxRetry) {\n                    httpClient.post(self.url)\n                    .withHeadersInfo(this.headersInfo)\n                    .withContent(encodedCommands)\n                    .readString()\n                    .execute(useWorker)\n                    .then((response) => {\n                        resolve(response.content);\n                    })\n                    .catch((exception) => {\n                        const status = exception.getStatus();\n                        self.failed_attempt += 1;\n                        if (status === DOLPHIN_SESSION_TIMEOUT) {\n                            self._handleError(reject, new DolphinSessionError('PlatformHttpTransmitter: Session Timeout'));\n                        } else {\n                            self._handleError(reject, exception);\n                        }\n                    });\n                } else {\n                    //TODO handle failure\n                    PlatformHttpTransmitter.LOGGER.error('Cannot reach the sever');\n                }\n            } else {\n                PlatformHttpTransmitter.LOGGER.error('No Rico client found!');\n            }\n        });\n    }\n\n    transmit(commands, onDone, onError) {\n        this._send(commands)\n            .then(responseText => {\n                if (responseText.trim().length > 0) {\n                    try {\n                        const responseCommands = Codec.decode(responseText);\n                        onDone(responseCommands);\n                    } catch (err) {\n                        const errorMsg = 'PlatformHttpTransmitter: Parse error: (Incorrect response = ' + responseText + ')';\n                        this.emit('error', new DolphinRemotingError(errorMsg));\n                        onError(errorMsg);\n                    }\n                } else {\n                    const errorMsg = 'PlatformHttpTransmitter: Empty response';\n                    this.emit('error', new DolphinRemotingError(errorMsg));\n                    onError(errorMsg);\n                }\n            })\n            .catch(error => {\n                this.emit('error', error);\n                onError(error);\n            });\n    }\n\n    signal(command) {\n        this._send([command])\n            .catch(error => this.emit('error', error));\n    }\n}\n\nPlatformHttpTransmitter.LOGGER = LoggerFactory.getLogger('PlatformHttpTransmitter');\n\nEmitter(PlatformHttpTransmitter.prototype);\n","import { dolphinBuilder } from './dolphinBuilder';\nimport { checkMethod, checkParam } from '../utils';\nimport { LoggerFactory } from '../logging';\nimport Connector from './connector';\nimport BeanManager from './beanManager';\nimport ClassRepository from './classRepository';\nimport ControllerManager from './controllerManager';\nimport ClientContext from './clientContext';\nimport PlatformHttpTransmitter from './platformHttpTransmitter';\n\nclass ClientContextFactory {\n\n    constructor(client) {\n        this.client = client;\n        if (!client && ClientContextFactory.legecyClientSupport) {\n            ClientContextFactory.LOGGER.warn('Legecy support used.');\n            this.client = ClientContextFactory.legecyClientSupport;\n        }\n    }\n\n    create(url, config){\n        checkMethod('connect(url, config)');\n        checkParam(url, 'url');\n        ClientContextFactory.LOGGER.debug('Creating client context', url, config);\n\n        const transmitter = new PlatformHttpTransmitter(url, config, this.client);\n        transmitter.on('error', function (error) {\n            clientContext.emit('error', error);\n        });\n\n        const dolphin = dolphinBuilder\n            .withTransmitter(transmitter)\n            .withSlackMS(4)\n            .withMaxBatchSize(Number.MAX_SAFE_INTEGER)\n            .build();\n\n\n        const classRepository = new ClassRepository(dolphin);\n        const beanManager = new BeanManager(classRepository);\n        const connector = new Connector(url, dolphin, classRepository, config);\n        const controllerManager = new ControllerManager(dolphin, classRepository, connector);\n\n        const clientContext = new ClientContext(dolphin, beanManager, controllerManager, connector);\n\n        ClientContextFactory.LOGGER.debug('clientContext created with', clientContext);\n\n        return clientContext;\n    }\n}\n\nClientContextFactory.LOGGER = LoggerFactory.getLogger('ClientContextFactory');\nClientContextFactory.legecyClientSupport = false;\n\nlet createClientContext = (client) => new ClientContextFactory(client).create;\n\nexport { createClientContext, ClientContextFactory };","import { checkMethod, checkParam, exists } from '../utils';\nimport { HTTP, RESPONSE_TYPE } from '../platform/constants'\n\nclass KeycloakConnection {\n\n    constructor() {\n    }\n\n    createDirectConnection(authEndpoint, realmName) {\n        checkMethod('createDirectConnection');\n        checkParam(authEndpoint, 'authEndpoint');\n        checkParam(realmName, 'realmName');\n\n        const httpRequest = new XMLHttpRequest();\n        httpRequest.open(HTTP.METHOD.POST, authEndpoint + '/auth/realms/' + realmName + '/protocol/openid-connect/token', true);\n        httpRequest.setRequestHeader(HTTP.HEADER_NAME.CONTENT_TYPE, HTTP.CONTENT_TYPE.APPLICATION_X_WWW_FORM_URLENCODED);\n        httpRequest.responseType = RESPONSE_TYPE.JSON;\n\n        return httpRequest;\n    }\n\n    createServerProxyConnection(authEndpoint, realmName) {\n        checkMethod('createServerProxyConnection');\n        checkParam(authEndpoint, 'authEndpoint');\n\n        const httpRequest = new XMLHttpRequest();\n        httpRequest.open(HTTP.METHOD.POST, authEndpoint, true);\n        httpRequest.setRequestHeader(HTTP.HEADER_NAME.CONTENT_TYPE, HTTP.CONTENT_TYPE.TEXT_PLAIN);\n        if (exists(realmName)) {\n            httpRequest.setRequestHeader(HTTP.HEADER_NAME.X_PLATFORM_SECURITY_REALM, realmName);\n        }\n        httpRequest.responseType = RESPONSE_TYPE.JSON;\n\n        return httpRequest;\n    }\n\n}\n\nexport { KeycloakConnection }","import { HTTP } from '../platform/constants'\nimport { exists } from '../utils';\nimport { LoggerFactory } from '../logging';\nimport { KeycloakConnection } from './keycloakConnection';\n\nclass KeycloakFunctions {\n\n    constructor() {\n        this.connection = new KeycloakConnection();\n    }\n\n    createLoginConnection(directConnection, authEndpoint, realmName, appName, user, password) {\n        let connection;\n        let content;\n\n        const encodedUser = encodeURIComponent(user);\n        const encodedPassword = encodeURIComponent(password);\n        const encodedAppName = encodeURIComponent(appName);\n\n        if (directConnection) {\n            if (exists(appName)) {\n                connection = this.connection.createDirectConnection(authEndpoint,realmName);\n                content = 'client_id=' + encodedAppName + '&username=' + encodedUser + '&password=' + encodedPassword + '&grant_type=password';\n            } else {\n                throw Error('No app name set!');\n            }\n        } else {\n            connection = this.connection.createServerProxyConnection(authEndpoint, realmName);\n            content = 'username=' + encodedUser + '&password=' + encodedPassword + '&grant_type=password';\n        }\n\n        return { connection, content };\n    }\n\n    createRefreshConnection(directConnection, authEndpoint, realmName, appName, refreshToken) {\n        let connection;\n        let content;\n\n        const encodedAppName = encodeURIComponent(appName);\n\n        if (directConnection) {\n            if (exists(appName)) {\n                connection = this.connection.createDirectConnection(authEndpoint, realmName);\n                content = 'grant_type=refresh_token&refresh_token=' + refreshToken + '&client_id=' + encodedAppName;\n            } else {\n                throw Error('No app name set!');\n            }\n        } else {\n            connection = this.connection.createServerProxyConnection(authEndpoint, realmName);\n            content = 'grant_type=refresh_token&refresh_token=' + refreshToken;\n        }\n\n        return { connection, content };\n    }\n\n    receiveToken(httpRequest, body) {\n        return new Promise((resolve, reject) => {\n            httpRequest.ontimeout = function (error) {\n                reject(error);\n            }\n\n            httpRequest.onerror = function (error) {\n                reject(error);\n            }\n\n            httpRequest.onreadystatechange = function () {\n                if (this.readyState === HTTP.XMLHTTPREQUEST_READYSTATE.DONE && this.status === HTTP.STATUS.OK) {\n                    resolve(this.response);\n                } else if (this.readyState === HTTP.XMLHTTPREQUEST_READYSTATE.DONE && this.status !== HTTP.STATUS.OK) {\n                    reject(this.status);\n                }\n            }\n            \n            KeycloakFunctions.LOGGER.trace('Receiving token');\n            httpRequest.send(body);\n        });\n    }\n\n    refreshToken(directConnection, authEndpoint, realmName, appName, refreshToken) {\n        const { connection, content } = this.createRefreshConnection(directConnection, authEndpoint, realmName, appName, refreshToken);\n        return this.receiveToken(connection, content);\n    }\n    \n}\n\nKeycloakFunctions.LOGGER = LoggerFactory.getLogger('KeycloakFunctions');\n\nexport { KeycloakFunctions }","import { checkMethod, checkParam, exists } from '../utils'\nimport { LoggerFactory } from '../logging'\nimport { HTTP } from '../platform/constants'\n\nclass SecurityHttpClientInterceptor {\n\n    constructor() {\n        this.token = null;\n        this.appName = null;\n        this.realm = null;\n    }\n\n    setToken(token) {\n        this.token = token;\n    }\n\n    setAppName(appName) {\n        this.appName = appName;\n    }\n\n    setRealm(realm) {\n        this.realm = realm;\n    }\n\n    handleRequest(httpRequest) {\n        checkMethod('handleRequest');\n        checkParam(httpRequest, 'httpRequest');\n\n        if (exists(this.token)) {\n            SecurityHttpClientInterceptor.LOGGER.trace('Using token', this.token);\n            httpRequest.setRequestHeader(HTTP.HEADER_NAME.AUTHORIZATION, 'Bearer ' + this.token);\n        }\n\n        if (exists(this.appName)) {\n            SecurityHttpClientInterceptor.LOGGER.trace('Using appName', this.appName);\n            httpRequest.setRequestHeader(HTTP.HEADER_NAME.X_PLATFORM_SECURITY_APPLICATION, this.appName);\n        }\n\n        if (exists(this.realm)) {\n            SecurityHttpClientInterceptor.LOGGER.trace('Using realm', this.realm);\n            httpRequest.setRequestHeader(HTTP.HEADER_NAME.X_PLATFORM_SECURITY_REALM, this.realm);\n        }\n\n        httpRequest.setRequestHeader(HTTP.HEADER_NAME.X_PLATFORM_SECURITY_BEARER_ONLY, 'true');\n        \n    }\n}\n\nSecurityHttpClientInterceptor.LOGGER = LoggerFactory.getLogger('SecurityHttpClientInterceptor');\n\nexport { SecurityHttpClientInterceptor };","import { LoggerFactory } from '../logging';\nimport { exists, checkMethod, checkParam } from '../utils';\nimport { KeycloakFunctions } from './keycloakFunctions';\nimport { SecurityHttpClientInterceptor } from './securityHttpClientInterceptor';\nimport { SECURITY } from '../platform/constants'\n\nclass KeycloakSecurity {\n\n    constructor() {\n        this.functions = new KeycloakFunctions();\n        this.interceptor = new SecurityHttpClientInterceptor();\n        this.intervall = null;\n\n        this.configuration = {\n            directConnection: false,\n            authEndpoint: SECURITY.AUTH_ENDPOINT,\n            appName: null,\n            realmName: null\n        }\n       \n    }\n\n    login(user, password, configuration) {\n        if (this.isAuthorized()) {\n            throw new Error('Already logged in!');\n        }\n\n        if (configuration) {\n            this.configuration.directConnection = configuration.directConnection || this.configuration.directConnection;\n            this.configuration.authEndpoint = configuration.authEndpoint || this.configuration.authEndpoint;\n            this.configuration.appName = configuration.appName || this.configuration.appName;\n            this.configuration.realmName = configuration.realmName || this.configuration.realmName;\n        }\n\n        const { directConnection, authEndpoint, appName, realmName } = this.configuration;\n\n        const { connection, content } = this.functions.createLoginConnection(directConnection, authEndpoint, realmName, appName, user, password);\n        const self = this;\n        return new Promise((resolve, reject) => {\n            KeycloakSecurity.LOGGER.debug('Receiving access token');\n            this.functions.receiveToken(connection, content)\n            .then((result) => {\n                if (result && result.access_token) {\n                    self.token = result;\n                    this.interceptor.setToken(result.access_token);\n                    this.interceptor.setRealm(realmName);\n                    this.interceptor.setAppName(appName);\n                    const expires =  result.expires_in || KeycloakSecurity.MIN_TOKEN_EXPIRES_RUN;\n                    const sleepTime = Math.max(KeycloakSecurity.MIN_TOKEN_EXPIRES_RUN, expires - KeycloakSecurity.TOKEN_EXPIRES_DELTA);\n                    self.intervall = setInterval(() => {\n                        KeycloakSecurity.LOGGER.debug('Refreshing access token');\n                        self.functions.refreshToken(directConnection, authEndpoint, realmName, appName, result.refresh_token).then((result) => {\n                            self.token = result;\n                            self.interceptor.setToken(result.access_token);\n                        });\n                    }, sleepTime);\n                    resolve(result.access_token);\n                } else {\n                    reject('No access token found');\n                }\n            })\n            .catch((error) => reject(error));\n        });\n    }\n\n    logout() {\n        const self = this;\n        KeycloakSecurity.LOGGER.debug('Logout');\n        return new Promise((resolve) => {\n            delete self.token;\n            self.interceptor.setToken(null);\n            if (exists(this.intervall)) {\n                clearInterval(this.intervall);\n                this.intervall = null;\n            }\n            resolve();\n        });\n    }\n\n    isAuthorized() {\n        return exists(this.token);\n    }\n\n    initServiceProvider(client) {\n        checkMethod('initServiceProvider');\n        checkParam(client, 'client');\n        client.getService('HttpClientInterceptor').addRequestInterceptor(this.interceptor);\n    }\n}\n\nKeycloakSecurity.TOKEN_EXPIRES_DELTA = 10000;\nKeycloakSecurity.MIN_TOKEN_EXPIRES_RUN = 30000;\n\nKeycloakSecurity.LOGGER = LoggerFactory.getLogger('KeycloakSecurity');\n\nexport { KeycloakSecurity };\n","import { HttpClient } from './httpClient';\nimport { HttpClientInterceptor } from './httpClientInterceptor';\nimport { ServiceProvider } from '../platform/serviceProvider';\nimport { exists } from '../utils'\n\nfunction register(client) {\n    if (exists(client)) {\n        const httpClientProvider = new ServiceProvider(HttpClient, 'HttpClient', client);\n        const httpClientInterceptorProvider = new ServiceProvider(HttpClientInterceptor, 'HttpClientInterceptor', client);\n    \n        client.registerServiceProvider(httpClientProvider);\n        client.registerServiceProvider(httpClientInterceptorProvider);\n    }\n}\n\nexport { register }","import { LoggerFactory, LogLevel } from './logging';\nimport { Client } from './platform/client';\nimport { ServiceProvider } from './platform/serviceProvider';\nimport { HTTP } from './platform/constants';\nimport { register as registerHttp } from './http';\nimport { register as registerClientScope } from './platform/clientScope';\nimport { register as registerRemotingScope } from './remoting'\nimport { register as registerSecurity } from './security'\n\nregisterHttp(Client);\nregisterClientScope(Client);\nregisterRemotingScope(Client);\nregisterSecurity(Client);\nClient.init();\n\nconst getService = Client.getService;\nconst hasService = Client.hasService;\nconst registerServiceProvider = Client.registerServiceProvider;\n\n/* eslint-disable */\nClient.LOGGER.info('Rico Version:' , RICO_VERSION);\n/* eslint-enable */\n\nexport { LoggerFactory, LogLevel, getService, hasService, registerServiceProvider, HTTP }\n\nif (window.Worker && window.Blob && window.URL && URL.createObjectURL) {\n    Client.LOGGER.debug('Creating Worker');\n    class HttpWorker {\n        constructor() {\n            /* eslint-disable */\n            this.blob = new Blob([RICO_WORKER], {type: \"application/javascript\"});\n            /* eslint-enable */\n        }\n\n        createWorker() {\n            return new Worker(URL.createObjectURL(this.blob));\n        }\n    }\n\n    const httpWorkerProvider = new ServiceProvider(HttpWorker, 'HttpWorker');\n    Client.registerServiceProvider(httpWorkerProvider);\n}\n\n/* \n * Provide dependencies as global dolphin object for backward compatibility.\n * The code below this comment is deprecated and should be removed in a feature version.\n */\nimport { createClientContext, ClientContextFactory } from './remoting/clientContextFactory'\n\nconst LOGGER = LoggerFactory.getLogger('Deprecated:');\nlet showWarning = true;\nfunction warn() {\n    if (showWarning) {\n        LOGGER.warn('Please do not use \"dolphin\" anymore, it may be removed in the next version! Use the new API instead!');\n        showWarning = false;\n    }\n}\n\nif (window) {\n    window.dolphin = { // TODO remove in next major release\n        get ClientContextFactory() {\n            warn();\n            ClientContextFactory.legecyClientSupport = Client;\n            return ClientContextFactory;\n        },\n        get createClientContext() {\n            warn();\n            return createClientContext(Client);\n        },\n        get LoggerFactory() {\n            warn();\n            return LoggerFactory;\n        },\n        get LogLevel() {\n            warn();\n            return LogLevel;\n        }\n    };\n}","import { ClientContextFactory } from './clientContextFactory'\nimport { ServiceProvider } from '../platform/serviceProvider'\nimport { exists } from '../utils'\n\nfunction register(client) {\n    if (exists(client)) {\n        const clientContextFactoryProvider = new ServiceProvider(ClientContextFactory, 'ClientContextFactory', client);\n\n        client.registerServiceProvider(clientContextFactoryProvider);\n    }\n}\n\nexport { register };","\nimport { ServiceProvider } from '../platform/serviceProvider';\nimport { exists } from '../utils'\nimport { KeycloakSecurity } from './keycloakSecurity';\n\nfunction register(client) {\n    if (exists(client)) {\n        const securityProvider = new ServiceProvider(KeycloakSecurity, 'Security', client);\n        client.registerServiceProvider(securityProvider);\n    }\n}\n\nexport { register }"],"sourceRoot":""}