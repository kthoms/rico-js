{"version":3,"sources":["webpack://ricojs/webpack/universalModuleDefinition","webpack://ricojs/webpack/bootstrap","webpack://ricojs/./node_modules/emitter-component/index.js","webpack://ricojs/./src/logging/constants.js","webpack://ricojs/./src/utils/index.js","webpack://ricojs/./src/logging/logger.js","webpack://ricojs/./src/logging/loggerfactory.js","webpack://ricojs/./src/platform/client.js","webpack://ricojs/./src/platform/serviceProvider.js","webpack://ricojs/./src/platform/constants.js","webpack://ricojs/./src/http/httpResponse.js","webpack://ricojs/./src/http/httpException.js","webpack://ricojs/./src/http/executor.js","webpack://ricojs/./src/http/reponseBuilder.js","webpack://ricojs/./src/http/requestBuilder.js","webpack://ricojs/./src/http/httpClient.js","webpack://ricojs/./src/http/httpClientInterceptor.js","webpack://ricojs/./src/platform/clientScope.js","webpack://ricojs/./src/remoting/commands/commandConstants.js","webpack://ricojs/./src/remoting/commandBatcher.js","webpack://ricojs/./src/remoting/constants.js","webpack://ricojs/./src/remoting/commands/impl/valueChangedCommand.js","webpack://ricojs/./src/remoting/commands/impl/attributeMetadataChangedCommand.js","webpack://ricojs/./src/remoting/commands/impl/callActionCommand.js","webpack://ricojs/./src/remoting/commands/impl/changeAttributeMetadataCommand.js","webpack://ricojs/./src/remoting/commands/impl/createContextCommand.js","webpack://ricojs/./src/remoting/commands/impl/createControllerCommand.js","webpack://ricojs/./src/remoting/commands/impl/createPresentationModelCommand.js","webpack://ricojs/./src/remoting/commands/impl/deletePresentationModelCommand.js","webpack://ricojs/./src/remoting/commands/impl/destroyContextCommand.js","webpack://ricojs/./src/remoting/commands/impl/destroyControllerCommand.js","webpack://ricojs/./src/remoting/commands/impl/interruptLongPollCommand.js","webpack://ricojs/./src/remoting/commands/impl/presentationModelDeletedCommand.js","webpack://ricojs/./src/remoting/commands/impl/startLongPollCommand.js","webpack://ricojs/./src/remoting/commands/codecError.js","webpack://ricojs/./src/remoting/commands/codec.js","webpack://ricojs/./src/remoting/eventBus.js","webpack://ricojs/./src/remoting/clientPresentationModel.js","webpack://ricojs/./src/remoting/clientConnector.js","webpack://ricojs/./src/remoting/clientAttribute.js","webpack://ricojs/./src/remoting/clientDolphin.js","webpack://ricojs/./src/remoting/attribute.js","webpack://ricojs/./src/remoting/commands/commandFactory.js","webpack://ricojs/./src/remoting/clientModelStore.js","webpack://ricojs/./src/remoting/noTransmitter.js","webpack://ricojs/./src/remoting/dolphinBuilder.js","webpack://ricojs/./src/remoting/connector.js","webpack://ricojs/./src/remoting/beanManager.js","webpack://ricojs/./src/remoting/classRepository.js","webpack://ricojs/./src/remoting/controllerProxy.js","webpack://ricojs/./src/remoting/controllerManager.js","webpack://ricojs/./src/remoting/clientContext.js","webpack://ricojs/./src/remoting/errors.js","webpack://ricojs/./src/remoting/remotingErrorHandler.js","webpack://ricojs/./src/remoting/platformHttpTransmitter.js","webpack://ricojs/./src/remoting/clientContextFactory.js","webpack://ricojs/./src/security/keycloakConnection.js","webpack://ricojs/./src/security/keycloakFunctions.js","webpack://ricojs/./src/security/securityHttpClientInterceptor.js","webpack://ricojs/./src/security/keycloakSecurity.js","webpack://ricojs/./src/http/index.js","webpack://ricojs/./src/index.js","webpack://ricojs/./src/remoting/index.js","webpack://ricojs/./src/security/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Emitter","obj","mixin","on","addEventListener","event","fn","this","_callbacks","push","once","self","off","apply","arguments","removeListener","removeAllListeners","removeEventListener","length","cb","callbacks","splice","emit","args","slice","len","listeners","hasListeners","_checkMethodName","LogLevel","NONE","text","level","ALL","TRACE","DEBUG","INFO","WARN","ERROR","exists","checkMethod","checkParam","param","parameterName","Error","parseUrl","url","scheme","matches","match","substring","query","fragment","path","split","reduce","params","hash","_hash$split2","_slicedToArray","val","assign","hostname","port","location","protocol","indexOf","parseInt","user","password","LOCALS","pad","size","result","internalLog","Array","from","func","shift","context","logLevel","date","Date","dateString","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","concat","_toConsumableArray","getCookie","document","cookie","parts","pop","Logger","rootLogger","_classCallCheck","console","isLogLevel","log","warn","error","getLogLevel","levelName","ROOT_LOGGER","loggers","Map","LoggerFactory","existingLogger","logger","set","Client","LOGGER","getLogger","services","serviceProviders","configuration","getService","service","provider","hasService","getAllServiceTypes","forEach","serviceProvider","registerServiceProvider","getName","debug","init","trace","initServiceProvider","ServiceProvider","serviceClass","client","serviceProvider_classCallCheck","serviceInstance","RESPONSE_TYPE","HTTP","METHOD","GET","POST","PUT","DELETE","STATUS","ACCEPTED","BAD_GATEWAY","BAD_REQUEST","CONFLICT","CONTINUE","CREATED","EXPECTATION_FAILED","FAILED_DEPENDENCY","FORBIDDEN","GATEWAY_TIMEOUT","GONE","HTTP_VERSION_NOT_SUPPORTED","IM_A_TEAPOT","INSUFFICIENT_SPACE_ON_RESOURCE","INSUFFICIENT_STORAGE","INTERNAL_SERVER_ERROR","LENGTH_REQUIRED","LOCKED","METHOD_FAILURE","METHOD_NOT_ALLOWED","MOVED_PERMANENTLY","MOVED_TEMPORARILY","MULTI_STATUS","MULTIPLE_CHOICES","NETWORK_AUTHENTICATION_REQUIRED","NO_CONTENT","NON_AUTHORITATIVE_INFORMATION","NOT_ACCEPTABLE","NOT_FOUND","NOT_IMPLEMENTED","NOT_MODIFIED","OK","PARTIAL_CONTENT","PAYMENT_REQUIRED","PERMANENT_REDIRECT","PRECONDITION_FAILED","PRECONDITION_REQUIRED","PROCESSING","PROXY_AUTHENTICATION_REQUIRED","REQUEST_HEADER_FIELDS_TOO_LARGE","REQUEST_TIMEOUT","REQUEST_TOO_LONG","REQUEST_URI_TOO_LONG","REQUESTED_RANGE_NOT_SATISFIABLE","RESET_CONTENT","SEE_OTHER","SERVICE_UNAVAILABLE","SWITCHING_PROTOCOLS","TEMPORARY_REDIRECT","TOO_MANY_REQUESTS","UNAUTHORIZED","UNPROCESSABLE_ENTITY","UNSUPPORTED_MEDIA_TYPE","USE_PROXY","HEADER_NAME","ACCEPT","ACCEPT_CHARSET","ACCEPT_ENCODING","ACCEPT_LANGUAGE","ACCEPT_DATETIME","AUTHORIZATION","CACHE_CONTROL","CONNECTION","COOKIE","CONTENT_LENGTH","CONTENT_MD5","CONTENT_TYPE","DATE","EXPECT","FORWARDED","FROM","HOST","IF_MATCH","IF_MODIFIED_SINCE","IF_NONE_MATCH","IF_RANGE","MAX_FORWARDS","PRAGMA","PROXY_AUTHORIZATION","REFERER","TE","USER_AGENT","X_CLIENT_ID","X_CLIENT_SESSION_ID","X_PLATFORM_SECURITY_REALM","X_PLATFORM_SECURITY_BEARER_ONLY","X_PLATFORM_SECURITY_APPLICATION","APPLICATION_JSON","APPLICATION_X_WWW_FORM_URLENCODED","TEXT_HTML","TEXT_PLAIN","XMLHTTPREQUEST_READYSTATE","UNSENT","OPENED","HEADERS_RECEIVED","LOADING","DONE","SECURITY","HttpResponse","status","content","headers","httpResponse_classCallCheck","headerArray","trim","header","toLowerCase","join","HttpException","message","timedout","httpException_classCallCheck","Executor","executor_classCallCheck","timeout","worker","_this","httpWorker","useWorker","timeoutToUse","requestInterceptors","getRequestInterceptors","responseInterceptors","getResponseInterceptors","directCall","resolve","reject","httpRequest","XMLHttpRequest","open","method","withCredentials","handleRequest","setRequestHeader","responseType","ontimeout","statusText","httpException","onerror","onreadystatechange","readyState","httpResponse","response","getAllResponseHeaders","handleResponse","send","requestBody","workerCall","collectedRequestHeaders","createWorker","onmessage","terminate","msg","data","responseHeaders","postMessage","conf","requestHeaders","Promise","ResponseBuilder","reponseBuilder_classCallCheck","executor","RequestBuilder","requestBuilder_classCallCheck","reponseBuilder","headersInfo","HttpClient","httpClient_classCallCheck","requestBuilder","request","HttpClientInterceptor","httpClientInterceptor_classCallCheck","requestHandlers","Set","responseHandlers","handler","add","list","ClientScope","clientScope_classCallCheck","clientIds","clientId","getClientId","newClientId","getHeaderByName","setClientId","addRequestInterceptor","addResponseInterceptor","calcKey","ATTRIBUTE_METADATA_CHANGED_COMMAND_ID","CALL_ACTION_COMMAND_ID","CHANGE_ATTRIBUTE_METADATA_COMMAND_ID","CREATE_CONTEXT_COMMAND_ID","CREATE_CONTROLLER_COMMAND_ID","CREATE_PRESENTATION_MODEL_COMMAND_ID","DELETE_PRESENTATION_MODEL_COMMAND_ID","DESTROY_CONTEXT_COMMAND_ID","DESTROY_CONTROLLER_COMMAND_ID","INTERRUPT_LONG_POLL_COMMAND_ID","PRESENTATION_MODEL_DELETED_COMMAND_ID","START_LONG_POLL_COMMAND_ID","VALUE_CHANGED_COMMAND_ID","ATTRIBUTE_ID","PM_ID","CONTROLLER_ID","BlindCommandBatcher","folding","undefined","maxBatchSize","commandBatcher_classCallCheck","queue","batch","batchLength","element","command","id","attributeId","newValue","REMOVED_TYPE","ValueChangedCommand","valueChangedCommand_classCallCheck","AttributeMetadataChangedCommand","attributeMetadataChangedCommand_classCallCheck","metadataName","CallActionCommand","callActionCommand_classCallCheck","controllerid","actionName","ChangeAttributeMetadataCommand","changeAttributeMetadataCommand_classCallCheck","CreateContextCommand","createContextCommand_classCallCheck","CreateControllerCommand","createControllerCommand_classCallCheck","controllerName","parentControllerId","CreatePresentationModelCommand","createPresentationModelCommand_classCallCheck","presentationModel","attributes","clientSideOnly","pmId","pmType","presentationModelType","getAttributes","attr","propertyName","getValue","DeletePresentationModelCommand","deletePresentationModelCommand_classCallCheck","DestroyContextCommand","destroyContextCommand_classCallCheck","DestroyControllerCommand","destroyControllerCommand_classCallCheck","controllerId","InterruptLongPollCommand","interruptLongPollCommand_classCallCheck","PresentationModelDeletedCommand","presentationModelDeletedCommand_classCallCheck","StartLongPollCommand","startLongPollCommand_classCallCheck","CodecError","codecError_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","Codec","jsonCommand","map","attribute","commands","JSON","stringify","_encodeAttributeMetadataChangedCommand","_encodeCallActionCommand","_encodeChangeAttributeMetadataCommand","_encodeCreateContextCommand","_encodeCreateControllerCommand","_encodeCreatePresentationModelCommand","_encodeDeletePresentationModelCommand","_encodeDestroyContextCommand","_encodeDestroyControllerCommand","_encodeInterruptLongPollCommand","_encodePresentationModelDeletedCommand","_encodeStartLongPollCommand","_encodeValueChangedCommand","transmitted","codec_typeof","parse","_decodeAttributeMetadataChangedCommand","_decodeCallActionCommand","_decodeChangeAttributeMetadataCommand","_decodeCreateContextCommand","_decodeCreateControllerCommand","_decodeCreatePresentationModelCommand","_decodeDeletePresentationModelCommand","_decodeDestroyContextCommand","_decodeDestroyControllerCommand","_decodeInterruptLongPollCommand","_decodePresentationModelDeletedCommand","_decodeStartLongPollCommand","_decodeValueChangedCommand","EventBus","eventBus_classCallCheck","eventHandlers","eventHandler","handle","presentationModelInstanceCount","ClientPresentationModel","clientPresentationModel_classCallCheck","dirty","toString","invalidBus","dirtyValueChangeBus","attributeCopy","copy","addAttribute","_this2","findAttributeByPropertyName","getQualifier","findAttributeByQualifier","setPresentationModel","onValueChange","trigger","source","handleInvalidate","onEvent","qualifier","sourcePresentationModel","targetAttribute","sourceAttribute","getAt","syncWith","ClientConnector","transmitter","clientDolphin","slackMS","clientConnector_classCallCheck","commandQueue","currentlySending","pushEnabled","waiting","codec","commandBatcher","newBatcher","enabled","newListener","pushListener","newCommand","releaseCommand","onFinished","release","doSendNext","enqueuePushCommand","cmdsAndHandlers","callback","cah","transmit","touchedPMs","touched","setTimeout","onError","handleDeletePresentationModelCommand","handleCreatePresentationModelCommand","handleValueChangedCommand","handleAttributeMetadataChangedCommand","serverCommand","model","findPresentationModelById","getClientModelStore","deletePresentationModel","containsPresentationModel","clientAttribute","clientPm","addAttributes","updatePresentationModelQualifier","findAttributeById","setValueFromServer","me","onFinishedData","signal","ClientAttribute","clientAttribute_classCallCheck","clientAttributeInstanceCount","valueChangeBus","qualifierChangeBus","setValue","setQualifier","String","Boolean","Number","valueOf","checkValue","ok","SUPPORTED_VALUE_TYPES","clientAttribute_typeof","verifiedValue","oldValue","sendToServer","newQualifier","oldQualifier","ClientDolphin","clientDolphin_classCallCheck","clientConnector","type","_len","_key","clientModelStore","listPresentationModelIds","listPresentationModels","findAllPresentationModelByType","modelToDelete","updateAttributeQualifier","findAllAttributesByQualifier","pushCommand","setPushListener","setReleaseCommand","setPushEnabled","listen","Attribute","QUALIFIER_PROPERTY","VALUE","CommandFactory","ClientModelStore","clientModelStore_classCallCheck","presentationModels","presentationModelsPerType","attributesPerId","attributesPerQualifier","modelStoreChangeBus","addAttributeById","addAttributeByQualifier","evt","createValueChangedCommand","getClientConnector","findAttributesByFilter","onQualifierChange","createChangeAttributeMetadataCommand","has","added","addPresentationModelByType","createCreatePresentationModelCommand","registerAttribute","eventType","clientPresentationModel","_this3","removed","removePresentationModelByType","delete","removeAttributeById","removeAttributeByQualifier","filter","iter","keys","next","done","values","notify","remove","createPresentationModelDeletedCommand","pmStoreEvent","NoTransmitter","onDone","DolphinBuilder","dolphinBuilder_classCallCheck","setClientConnector","setClientModelStore","dolphinBuilder","DOLPHIN_BEAN","ACTION_CALL_BEAN","SOURCE_SYSTEM","Connector","dolphin","classRepository","config","connector_classCallCheck","highlanderPMResolver","highlanderPMPromise","onModelStoreChange","sourceSystem","onModelAdded","onModelRemoved","startPushListening","createStartLongPollCommand","createInterruptLongPollCommand","registerClass","spliceListEntry","load","unregisterClass","unload","reason","BeanManager","beanManager_classCallCheck","addedHandlers","removedHandlers","updatedHandlers","arrayUpdatedHandlers","allAddedHandlers","allRemovedHandlers","allUpdatedHandlers","allArrayUpdatedHandlers","_handleBeanAdded","_handleBeanRemoved","_handleBeanUpdate","_handleArrayUpdate","onBeanAdded","onBeanRemoved","onBeanUpdate","onArrayUpdate","bean","handlerList","e","index","count","newElements","notifyBeanChange","removedElements","notifyArrayChange","collection","predicate","unsubscribe","ClassRepository","classRepository_classCallCheck","classes","beanFromDolphin","beanToDolphin","classInfos","beanAddedHandlers","beanRemovedHandlers","propertyUpdateHandlers","arrayUpdateHandlers","blocked","modelId","to","toDolphin","fromDolphin","isBlocked","array","removedElementsCount","isArray","sendListSplice","classInfo","search","validateList","block","unblock","classRepository_typeof","toISOString","TypeError","fixType","parseFloat","ControllerProxy","manager","controllerProxy_classCallCheck","destroyed","onDestroyedHandlers","invokeAction","_createController","getId","destroyController","ERROR_CODE","ControllerManager","connector","controllerManager_classCallCheck","controllers","getHighlanderPM","then","highlanderPM","MSG_ERROR_CREATING_CONTROLLER","invoke","createCreateControllerCommand","getValueWithRetry","ctrlId","mapDolphinToBean","controller","catch","getValueCall","errorMessage","intervalID","setInterval","clearInterval","pm","actionParams","mapParamToDolphin","createCallActionCommand","createDestroyControllerCommand","controllersCopy","promises","destroy","all","ClientContext","beanManager","controllerManager","clientContext_classCallCheck","_controllerManager","_connector","connectionPromise","isConnected","connect","createCreateContextCommand","createController","stopPushListening","createDestroyContextCommand","DolphinRemotingError","_Error","detail","errors_classCallCheck","errors_possibleConstructorReturn","errors_getPrototypeOf","errors_inherits","errors_wrapNativeSuper","DolphinSessionError","_Error2","_Error3","HttpResponseError","_Error4","HttpNetworkError","RemotingErrorHandler","PlatformHttpTransmitter","platformHttpTransmitter_classCallCheck","failed_attempt","connectionConfig","_connectionConfig","maxRetry","connection","errorHandlers","encodedCommands","encode","isLogLevelUseable","httpClient","post","withHeadersInfo","withContent","readString","execute","exception","getStatus","_handleError","_send","responseText","responseCommands","decode","err","errorMsg","ClientContextFactory","clientContextFactory_classCallCheck","legecyClientSupport","clientContext","withTransmitter","withSlackMS","withMaxBatchSize","MAX_SAFE_INTEGER","build","KeycloakConnection","keycloakConnection_classCallCheck","authEndpoint","realmName","KeycloakFunctions","keycloakFunctions_classCallCheck","directConnection","appName","encodedUser","encodeURIComponent","encodedPassword","encodedAppName","createDirectConnection","createServerProxyConnection","refreshToken","body","_this$createRefreshCo","createRefreshConnection","receiveToken","SecurityHttpClientInterceptor","securityHttpClientInterceptor_classCallCheck","token","realm","KeycloakSecurity","keycloakSecurity_classCallCheck","functions","interceptor","intervall","isAuthorized","_this$configuration","_this$functions$creat","createLoginConnection","access_token","setToken","setRealm","setAppName","expires","expires_in","MIN_TOKEN_EXPIRES_RUN","sleepTime","Math","max","TOKEN_EXPIRES_DELTA","refresh_token","httpClientProvider","httpClientInterceptorProvider","registerHttp","clientScopeProvider","registerClientScope","clientContextFactoryProvider","registerRemotingScope","securityProvider","registerSecurity","info","RICO_VERSION","Worker","Blob","URL","createObjectURL","HttpWorker","src_classCallCheck","blob","RICO_WORKER","httpWorkerProvider","showWarning","createClientContext"],"mappings":"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","file":"rico.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ricojs\"] = factory();\n\telse\n\t\troot[\"ricojs\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","\n/**\n * Expose `Emitter`.\n */\n\nmodule.exports = Emitter;\n\n/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nfunction Emitter(obj) {\n  if (obj) return mixin(obj);\n};\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks[event] = this._callbacks[event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  var self = this;\n  this._callbacks = this._callbacks || {};\n\n  function on() {\n    self.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks[event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks[event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n  var args = [].slice.call(arguments, 1)\n    , callbacks = this._callbacks[event];\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks[event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n","const LogLevel = {\n    NONE: { name: 'NONE', text: '[NONE ]', level: 0 },\n    ALL: { name: 'ALL', text: '[ALL  ]', level: 100 },\n    TRACE: { name: 'TRACE', text: '[TRACE]', level: 5 },\n    DEBUG: { name: 'DEBUG', text: '[DEBUG]', level: 4 },\n    INFO: { name: 'INFO', text: '[INFO ]', level: 3 },\n    WARN: { name: 'WARN', text: '[WARN ]', level: 2 },\n    ERROR: { name: 'ERROR', text: '[ERROR]', level: 1 },\n};\n\nexport { LogLevel };","var _checkMethodName;\n\nexport function exists(object) {\n    return typeof object !== 'undefined' && object !== null;\n}\n\nexport function checkMethod(name) {\n    _checkMethodName = name;\n}\n\nexport function checkParam(param, parameterName) {\n    if(!exists(param)) {\n        throw new Error('The parameter ' + parameterName + ' is mandatory in ' + _checkMethodName);\n    }\n}\n\nexport function parseUrl(url) {\n    //https://jsperf.com/url-parsing\n    const pattern = /^(((([^:\\/#\\?]+:)?(?:(\\/\\/)((?:(([^:@\\/#\\?]+)(?:\\:([^:@\\/#\\?]+))?)@)?(([^:\\/#\\?\\]\\[]+|\\[[^\\/\\]@#?]+\\])(?:\\:([0-9]+))?))?)?)?((\\/?(?:[^\\/\\?#]+\\/+)*)([^\\?#]*)))?(\\?[^#]+)?)(#.*)?/\n    const matches =  url.match(pattern);\n\n    let scheme;\n    if (matches[4] && matches[4].length > 1) {\n        scheme = matches[4].substring(0, matches[4].length-1);\n    }\n\n    let path = matches[13];\n\n    let query;\n    if (matches[16] && matches[16].length > 1) {\n        query = matches[16].substring(1, matches[16].length);\n        const hashes = query.split('&');\n        query = hashes.reduce((params, hash) => {\n            let [key, val] = hash.split('=')\n            return Object.assign(params, {[key]: val})\n        }, {});\n    }\n\n    let fragment;\n    if (matches[17] && matches[17].length > 1) {\n        fragment = matches[17].substring(1, matches[17].length);\n    }\n\n    let hostname = matches[11];\n    let port = matches[12];\n    if (hostname && !port && scheme === 'http') {\n        port = 80;\n    } else if (hostname && !port && scheme === 'https') {\n        port = 443;\n    }\n\n    //relative url? get hostname and port from the browser\n    if (!hostname && !port && !scheme) {\n        \n        if (window && window.location && window.location.hostname) {\n            hostname = window.location.hostname;\n        }\n        if (window && window.location && window.location.port) {\n            port = window.location.port;\n        }\n        if (window && window.location && window.location.protocol) {\n            scheme = window.location.protocol.substring(0, window.location.protocol.length-1) ;\n        }\n        // strip '.' from relative path\n        if (path.indexOf('.') === 0) {\n            path = path.substring(1, path.length);\n        }\n    }\n\n    // port should be a number, always\n    if (port) {\n        port = parseInt(port);\n    }\n\n    return {\n        scheme: scheme,\n        user: matches[8],\n        password: matches[9],\n        hostname: hostname,\n        port: port,\n        path: path,\n        query: query,\n        fragment: fragment\n    };\n    \n}\n\n","import {checkParam, exists} from '../utils'\nimport { LogLevel } from \"./constants\";\n\n// private methods\nconst LOCALS = {\n    pad (text, size) {\n        let result = '' + text;\n        while (result.length < size) {\n            result = '0' + result;\n        }\n        return result;\n    },\n    internalLog () {\n        const args = Array.from(arguments);\n        const func = args.shift();\n        const context = args.shift();\n        const logLevel = args.shift();\n        const date = new Date();\n        const dateString =  date.getFullYear() + '-' + LOCALS.pad(date.getMonth() + 1, 2) + '-' + LOCALS.pad(date.getDate(), 2) + ' ' + LOCALS.pad(date.getHours(), 2) + ':' + LOCALS.pad(date.getMinutes(), 2) + ':' + LOCALS.pad(date.getSeconds(), 2) + '.' + LOCALS.pad(date.getMilliseconds(), 3);\n        func(dateString, logLevel.text, context, ...args);\n\n    },\n    getCookie (name) {\n        if (exists(window) && exists(window.document) && exists(window.document.cookie)) {       \n            const value = '; ' + window.document.cookie;\n            const parts = value.split('; ' + name + '=');\n            if ( parts.length === 2 ) {\n                return parts.pop().split(';').shift();\n            }\n        }\n    }\n};\n\n\n// public\nclass Logger {\n\n    constructor(context, rootLogger) {\n        this.context = context;\n        this.rootLogger = rootLogger;\n        const cookieLogLevel = LOCALS.getCookie('RICO_LOGGER_' + this.context);\n        switch (cookieLogLevel) {\n            case 'NONE':\n                this.logLevel = LogLevel.NONE;\n                break;\n            case 'ALL':\n                this.logLevel = LogLevel.ALL;\n                break;\n            case 'TRACE':\n                this.logLevel = LogLevel.TRACE;\n                break;\n            case 'DEBUG':\n                this.logLevel = LogLevel.DEBUG;\n                break;\n            case 'INFO':\n                this.logLevel = LogLevel.INFO;\n                break;\n            case 'WARN':\n                this.logLevel = LogLevel.WARN;\n                break;\n            case 'ERROR':\n                this.logLevel = LogLevel.ERROR;\n                break;\n        }\n\n    }\n\n    trace() {\n        if (exists(console) && this.isLogLevel(LogLevel.TRACE)) {\n            LOCALS.internalLog(console.log, this.context, LogLevel.TRACE, ...arguments);\n        }\n    }\n\n    debug() {\n        if (exists(console) && this.isLogLevel(LogLevel.DEBUG)) {\n            LOCALS.internalLog(console.log, this.context, LogLevel.DEBUG, ...arguments);\n        }\n    }\n\n    info() {\n        if (exists(console) && this.isLogLevel(LogLevel.INFO)) {\n            LOCALS.internalLog(console.log, this.context, LogLevel.INFO, ...arguments);\n        }\n    }\n\n    warn() {\n        if (exists(console) && this.isLogLevel(LogLevel.WARN)) {\n            LOCALS.internalLog(console.warn, this.context, LogLevel.WARN, ...arguments);\n        }\n    }\n\n    error() {\n        if (exists(console) && this.isLogLevel(LogLevel.ERROR)) {\n            LOCALS.internalLog(console.error, this.context, LogLevel.ERROR, ...arguments);\n        }\n    }\n\n    getLogLevel() {\n        if (exists(this.logLevel)) {\n            return this.logLevel;\n        } else if (exists(this.rootLogger)) {\n            return this.rootLogger.getLogLevel();\n        } else {\n            return LogLevel.INFO;\n        }\n    }\n\n    setLogLevel(level) {\n        this.logLevel = level;\n    }\n\n    setLogLevelByName(levelName) {\n        if (exists(LogLevel[levelName])) {\n            this.logLevel = LogLevel[levelName];\n        }\n    }\n\n    isLogLevel(level) {\n        if (this.getLogLevel() === LogLevel.NONE) {\n            return false;\n        }\n        if (this.getLogLevel() === LogLevel.ALL) {\n            return true;\n        }\n        if (this.getLogLevel() === LogLevel.TRACE) {\n            return true;\n        }\n        if (this.getLogLevel() === LogLevel.DEBUG && level !== LogLevel.TRACE) {\n            return true;\n        }\n        if (this.getLogLevel() === LogLevel.INFO && level !== LogLevel.TRACE && level !== LogLevel.DEBUG) {\n            return true;\n        }\n        if (this.getLogLevel() === LogLevel.WARN && level !== LogLevel.TRACE && level !== LogLevel.DEBUG && level !== LogLevel.INFO) {\n            return true;\n        }\n        if (this.getLogLevel() === LogLevel.ERROR && level !== LogLevel.TRACE && level !== LogLevel.DEBUG && level !== LogLevel.INFO && level !== LogLevel.WARN) {\n            return true;\n        }\n        return false;\n    }\n\n    isLogLevelUseable(level) {\n        checkParam(level, 'level');\n        if (level.level) {\n            return this.getLogLevel().level >= level.level;\n        } else {\n            return false;\n        }\n    }\n}\n\nexport { Logger };","import { exists } from \"../utils\";\nimport { Logger } from \"./logger\";\n\nconst ROOT_LOGGER = new Logger('ROOT');\n\n// private methods\nconst LOCALS = {\n    loggers: new Map()\n};\n\n\n// public\nclass LoggerFactory {\n\n    static getLogger(context) {\n        if (!exists(context) || context === 'ROOT') {\n            return ROOT_LOGGER;\n        }\n        const existingLogger = LOCALS.loggers.get(context);\n        if (existingLogger) {\n            return existingLogger;\n        }\n\n        const logger = new Logger(context, ROOT_LOGGER);\n        LOCALS.loggers.set(context, logger);\n        return logger;\n    }\n}\n\nexport { LoggerFactory }","import {exists} from '../utils';\nimport { LoggerFactory } from '../logging';\n\nclass Client {\n\n}\n\nClient.LOGGER = LoggerFactory.getLogger('Client');\n\nClient.services = new Map();\nClient.serviceProviders = new Map();\nClient.configuration = {};\n\nClient.getService = function(name) {\n    let service = Client.services.get(name);\n    if (!exists(service)) {\n        let provider = Client.serviceProviders.get(name);\n        if (!exists(provider)) {\n            throw new Error('No service provider found for ' + name);\n        } else {\n            service = provider.getService(Client.configuration);\n            Client.services.set(name, service);\n        }\n    }\n    return service;\n};\n\nClient.hasService = function(name) {\n    const provider = Client.serviceProviders.get(name);\n    if (!exists(provider)) {\n        return false;\n    } else {\n        return true;\n    }\n};\n\nClient.getAllServiceTypes = function() {\n    let result = [];\n    Client.serviceProviders.forEach((serviceProvider) => result.push(serviceProvider));\n    return result;\n};\n\n\nClient.registerServiceProvider = function(serviceProvider) {\n    if (serviceProvider === null || typeof serviceProvider === 'undefined') {\n        throw new Error('Cannot register empty service provider');\n    }\n    \n    if (typeof serviceProvider.getName === 'function' && typeof serviceProvider.getService === 'function') {\n        const current = Client.serviceProviders.get(serviceProvider.getName());\n        if (!current) {\n            Client.serviceProviders.set(serviceProvider.getName(), serviceProvider);\n            Client.LOGGER.debug('Service provider registered with name', serviceProvider.getName());\n        } else {\n            throw new Error('Cannot register another service provider. Name already in use.');\n        }\n    } else {\n        throw new Error('Cannot register service provider without getName() and getService() methods');\n    }\n};\n\nClient.init = function() {\n    Client.serviceProviders.forEach((serviceProvider) => {\n        const service = serviceProvider.getService();\n        Client.LOGGER.trace('Initializing service for service provider', serviceProvider.getName());\n        if (typeof service.initServiceProvider === 'function') {\n            Client.LOGGER.debug('Initializing service', service);\n            service.initServiceProvider(Client);\n        }\n    });\n}\n\nexport { Client }","import { checkMethod, checkParam } from '../utils'\nclass ServiceProvider {\n\n    constructor(serviceClass, name, client) {\n        checkMethod('constructor');\n        checkParam(serviceClass, 'serviceClass');\n        checkParam(name, 'name');\n        \n        this.serviceInstance = new serviceClass(client);\n        this.name = name;\n    }\n\n    getName() {\n        return this.name;\n    }\n\n    getService() {\n        return this.serviceInstance;\n    }\n}\n\nexport { ServiceProvider }","// Reponse type\nexport const RESPONSE_TYPE = {\n    ARRAY_BUFFER: 'arraybuffer',\n    TEXT: 'text',\n    JSON: 'json'\n}\n\n// HTTP methods and status codes\nexport const HTTP = {\n    METHOD: {\n        GET: 'GET',\n        POST: 'POST',\n        PUT: 'PUT',\n        DELETE: 'DELETE'\n    },\n    STATUS: {\n        ACCEPTED: 202,\n        BAD_GATEWAY: 502,\n        BAD_REQUEST: 400,\n        CONFLICT: 409,\n        CONTINUE: 100,\n        CREATED: 201,\n        EXPECTATION_FAILED: 417,\n        FAILED_DEPENDENCY : 424,\n        FORBIDDEN: 403,\n        GATEWAY_TIMEOUT: 504,\n        GONE: 410,\n        HTTP_VERSION_NOT_SUPPORTED: 505,\n        IM_A_TEAPOT: 418,\n        INSUFFICIENT_SPACE_ON_RESOURCE: 419,\n        INSUFFICIENT_STORAGE: 507,\n        INTERNAL_SERVER_ERROR: 500,\n        LENGTH_REQUIRED: 411,\n        LOCKED: 423,\n        METHOD_FAILURE: 420,\n        METHOD_NOT_ALLOWED: 405,\n        MOVED_PERMANENTLY: 301,\n        MOVED_TEMPORARILY: 302,\n        MULTI_STATUS: 207,\n        MULTIPLE_CHOICES: 300,\n        NETWORK_AUTHENTICATION_REQUIRED: 511,\n        NO_CONTENT: 204,\n        NON_AUTHORITATIVE_INFORMATION: 203,\n        NOT_ACCEPTABLE: 406,\n        NOT_FOUND: 404,\n        NOT_IMPLEMENTED: 501,\n        NOT_MODIFIED: 304,\n        OK: 200,\n        PARTIAL_CONTENT: 206,\n        PAYMENT_REQUIRED: 402,\n        PERMANENT_REDIRECT: 308,\n        PRECONDITION_FAILED: 412,\n        PRECONDITION_REQUIRED: 428,\n        PROCESSING: 102,\n        PROXY_AUTHENTICATION_REQUIRED: 407,\n        REQUEST_HEADER_FIELDS_TOO_LARGE: 431,\n        REQUEST_TIMEOUT: 408,\n        REQUEST_TOO_LONG: 413,\n        REQUEST_URI_TOO_LONG: 414,\n        REQUESTED_RANGE_NOT_SATISFIABLE: 416,\n        RESET_CONTENT: 205,\n        SEE_OTHER: 303,\n        SERVICE_UNAVAILABLE: 503,\n        SWITCHING_PROTOCOLS: 101,\n        TEMPORARY_REDIRECT: 307,\n        TOO_MANY_REQUESTS: 429,\n        UNAUTHORIZED: 401,\n        UNPROCESSABLE_ENTITY: 422,\n        UNSUPPORTED_MEDIA_TYPE: 415,\n        USE_PROXY: 305\n    },\n    HEADER_NAME: {\n        ACCEPT: 'Accept',\n        ACCEPT_CHARSET: 'Accept-Charset', \n        ACCEPT_ENCODING: 'Accept-Encoding', \n        ACCEPT_LANGUAGE: 'Accept-Language',\n        ACCEPT_DATETIME: 'Accept-Datetime',\n        AUTHORIZATION: 'Authorization',\n        CACHE_CONTROL: 'Cache-Control',\n        CONNECTION: 'Connection',\n        COOKIE: 'Cookie',\n        CONTENT_LENGTH: 'Content-Length',\n        CONTENT_MD5: 'Content-MD5',\n        CONTENT_TYPE: 'Content-Type',\n        DATE: 'Date',\n        EXPECT: 'Expect',\n        FORWARDED: 'Forwarded',\n        FROM: 'From',\n        HOST: 'Host', \n        IF_MATCH: 'If-Match', \n        IF_MODIFIED_SINCE: 'If-Modified_Since',\n        IF_NONE_MATCH: 'If-None_Match',\n        IF_RANGE: 'If-Range',\n        MAX_FORWARDS: 'Max-Forwards',\n        PRAGMA: 'Pragma', \n        PROXY_AUTHORIZATION: 'Proxy-Authorization',\n        REFERER: 'Referer',\n        TE: 'TE',\n        USER_AGENT: 'User-Agent',\n        X_CLIENT_ID: 'X-Client-Id',\n        X_CLIENT_SESSION_ID: 'X-Client-Session-Id',\n        X_PLATFORM_SECURITY_REALM: 'X-platform-security-realm',\n        X_PLATFORM_SECURITY_BEARER_ONLY: 'X-platform-security-bearer-only',\n        X_PLATFORM_SECURITY_APPLICATION: 'X-platform-security-application'\n    },\n    CONTENT_TYPE: {\n        APPLICATION_JSON: 'application/json',\n        APPLICATION_X_WWW_FORM_URLENCODED: 'application/x-www-form-urlencoded',\n        TEXT_HTML: 'text/html',\n        TEXT_PLAIN: 'text/plain'\n    },\n    XMLHTTPREQUEST_READYSTATE: {\n        UNSENT: 0,\n        OPENED: 1,\n        HEADERS_RECEIVED: 2,\n        LOADING: 3,\n        DONE:4\n    }\n}\n\n// Security\nexport const SECURITY = {\n    AUTH_ENDPOINT: '/openid-connect'\n}","import { exists, checkMethod, checkParam } from '../utils';\nclass HttpResponse {\n\n    constructor(url, status, content, headers) {\n        this.url = url;\n        this.status = status;\n        this.content = content;\n        this.headers = {};\n        if (exists(headers) && typeof headers === 'string') {\n            const headerArray = headers.trim().split(/[\\r\\n]+/);\n            for (let i = 0; i < headerArray.length; i++) {\n                const line = headerArray[i];\n                const parts = line.split(': ');\n                if (parts.length === 2) {\n                    const header = parts.shift().toLowerCase();\n                    const value = parts.join(': ');\n                    this.headers[header] = value;\n                }\n            }\n        }\n    }\n\n    getUrl() {\n        return this.url;\n    }\n\n    getContent() {\n        return this.content;\n    }\n\n    getStatus() {\n        return this.status;\n    }\n\n    getHeaders() {\n        return this.headers;\n    }\n\n    getHeaderByName(name) {\n        checkMethod('getHeaderByName');\n        checkParam(name, 'name');\n        \n        return this.headers[name.toLowerCase()];\n    }\n\n}\n\nexport { HttpResponse }","class HttpException {\n\n    constructor(message, status, timedout) {\n        this.message = message;\n        this.status = status || 0;\n        this.timedout = timedout || false;\n    }\n\n    getMessage() {\n        return this.message;\n    }\n\n    getStatus() {\n        return this.status;\n    }\n\n    isTimedout() {\n        return this.timedout;\n    }\n\n}\n\nexport { HttpException }","import { LoggerFactory } from '../logging';\nimport { HttpResponse } from './httpResponse';\nimport { HttpException } from './httpException';\nimport { HTTP } from '../platform/constants';\nclass Executor {\n\n    constructor(configuration, client) {\n        this.configuration = configuration;\n        this.client = client;\n    }\n\n    execute(timeout, worker) {\n\n        let httpWorker = null;\n        if (this.client && this.client.hasService('HttpWorker')) {\n            httpWorker = this.client.getService('HttpWorker');\n        }\n\n        const useWorker = httpWorker !== null && (worker === true || timeout === true);\n        let timeoutToUse = 0;\n        if (timeout !== true && timeout !== false) {\n            timeoutToUse = timeout;\n        }\n\n        let requestInterceptors = [];\n        if (this.client) {\n            requestInterceptors = this.client.getService('HttpClientInterceptor').getRequestInterceptors();\n            Executor.LOGGER.trace('Request interceptors found:', requestInterceptors);\n        }\n\n        let responseInterceptors = [];\n        if (this.client) {\n            responseInterceptors = this.client.getService('HttpClientInterceptor').getResponseInterceptors();\n            Executor.LOGGER.trace('Response interceptors found:', responseInterceptors);\n        }\n\n        let directCall = (resolve, reject) => {\n\n            const self = this;\n            const httpRequest = new XMLHttpRequest();\n            const async = true;\n            \n            httpRequest.open(this.configuration.method, this.configuration.url, async);\n            httpRequest.url = this.configuration.url;\n            httpRequest.method = this.configuration.method;\n            httpRequest.withCredentials = true;\n\n            for (let i = 0; i < requestInterceptors.length; i++) {\n                const requestInterceptor = requestInterceptors[i];\n                requestInterceptor.handleRequest(httpRequest);\n            }\n\n            if (this.configuration.headers && this.configuration.headers.length > 0) {\n                for (let i = 0; i < this.configuration.headers.length; i++) {\n                    const header = this.configuration.headers[i];\n                    httpRequest.setRequestHeader(header.name, header.value);\n                }\n            }\n\n            httpRequest.timeout = timeoutToUse;\n\n            if (this.configuration.responseType) {\n                httpRequest.responseType = this.configuration.responseType;\n            }\n\n            httpRequest.ontimeout = function () {\n                const message = this.statusText || 'Timeout occurred';\n                const httpException = new HttpException(message, this.status, true);\n                Executor.LOGGER.error(httpException);\n                reject(httpException);\n            }\n\n            httpRequest.onerror = function () {\n                let message = this.statusText || 'Unspecified error occured';\n                const httpException = new HttpException(message, this.status);\n                Executor.LOGGER.error(httpException);\n                reject(httpException);\n            }\n\n            httpRequest.onreadystatechange = function () {\n                if (this.readyState === HTTP.XMLHTTPREQUEST_READYSTATE.DONE) {\n                    Executor.LOGGER.trace('Request to ', self.configuration.url, 'finished with', this.status);\n                }\n                if (this.readyState === HTTP.XMLHTTPREQUEST_READYSTATE.DONE && this.status >= 200 && this.status < 300) {\n                    // https://www.w3.org/TR/cors/#simple-response-header\n                    const httpResponse = new HttpResponse(this.url, this.status, this.response, this.getAllResponseHeaders());\n                    \n                    for (let i = 0; i < responseInterceptors.length; i++) {\n                        const responseInterceptor = responseInterceptors[i];\n                        responseInterceptor.handleResponse(httpResponse);\n                    }\n\n                    resolve(httpResponse);\n                } else if (this.readyState === HTTP.XMLHTTPREQUEST_READYSTATE.DONE && this.status >= 300) {\n                    const httpException = new HttpException(this.statusText, this.status);\n                    Executor.LOGGER.error(httpException);\n                    reject(httpException);\n                }\n            }\n\n            httpRequest.send(this.configuration.requestBody);\n\n        }\n        directCall = directCall.bind(this);\n\n        let workerCall = (resolve, reject) => {\n           \n            const collectedRequestHeaders = [];\n            for (let i = 0; i < requestInterceptors.length; i++) {\n                const requestInterceptor = requestInterceptors[i];\n                \n                requestInterceptor.handleRequest({\n                    url: this.configuration.url,\n                    setRequestHeader: (name, value) => {\n                        const header = {name, value};\n                        collectedRequestHeaders.push(header);\n                    }\n                });\n            }\n\n            const worker = httpWorker.createWorker();\n            try {\n                worker.onmessage = function(event) {\n                    worker.terminate();\n                    Executor.LOGGER.trace('Message form Worker', event);\n                    const msg = event.data;\n                    if (msg.error) {\n                        const httpException = new HttpException(msg.message, msg.status, msg.timedout);\n                        Executor.LOGGER.error(httpException);\n                        reject(httpException);\n                    } else {\n                        const httpResponse = new HttpResponse(msg.url, msg.status, msg.response, msg.responseHeaders);\n\n                        for (let i = 0; i < responseInterceptors.length; i++) {\n                            const responseInterceptor = responseInterceptors[i];\n                            responseInterceptor.handleResponse(httpResponse);\n                        }\n\n                        resolve(httpResponse);\n                    }\n                }\n                worker.onerror = function(event) {\n                    const httpException = new HttpException(event.data, 0, false);\n                    reject(httpException);\n                }\n                worker.postMessage({conf: this.configuration, timeout: timeoutToUse, requestHeaders: collectedRequestHeaders});\n            } catch (error) {\n                const httpException = new HttpException(error, 0, false);\n                reject(httpException);\n            }\n\n        }\n\n        workerCall = workerCall.bind(this);\n\n        return new Promise((resolve, reject) => {\n            if (useWorker && this.client && this.client.hasService('HttpWorker')) {\n                workerCall(resolve, reject);\n            } else {\n                directCall(resolve, reject);\n            }\n        });\n        \n    }\n\n}\n\nExecutor.LOGGER = LoggerFactory.getLogger('Executor');\n\nexport { Executor }","import { Executor } from './executor';\nimport { RESPONSE_TYPE } from '../platform/constants';\nclass ResponseBuilder {\n\n    constructor(configuration, client) {\n        this.configuration = configuration;\n        this.executor = new Executor(configuration, client);\n    }\n\n    readBytes() {\n        this.configuration.responseType = RESPONSE_TYPE.ARRAY_BUFFER;\n        return this.executor;\n    }\n\n    readString() {\n        this.configuration.responseType = RESPONSE_TYPE.TEXT;\n        return this.executor;\n    }\n\n    readObject() {\n        this.configuration.responseType = RESPONSE_TYPE.JSON;\n        return this.executor;\n    }\n\n    withoutResult() {\n        return this.executor;\n    }\n}\n\nexport { ResponseBuilder }","import { ResponseBuilder } from './reponseBuilder';\nimport { exists } from '../utils';\nclass RequestBuilder {\n\n    constructor(configuration, client) {\n        this.configuration = configuration;\n        this.reponseBuilder = new ResponseBuilder(configuration, client);\n    }\n\n    withHeader(name, value) {\n        if (!this.configuration.headers) {\n            this.configuration.headers = [];\n        }\n        this.configuration.headers.push({ name, value });\n        return this;\n    }\n\n    withHeadersInfo(headersInfo) {\n        if (exists(headersInfo)) {\n            if (!this.configuration.headers) {\n                this.configuration.headers = [];\n            }\n            for (let name in headersInfo) {\n                if (headersInfo.hasOwnProperty(name)) {\n                    const value = headersInfo[name];\n                    this.configuration.headers.push({ name, value });\n                }\n            }\n        }\n        return this;\n    }\n\n    withContent(data) {\n        this.configuration.requestBody = data;\n        return this.reponseBuilder;\n    }\n\n    withoutContent() {\n        return this.reponseBuilder;\n    }\n}\n\nexport { RequestBuilder }","import { RequestBuilder } from './requestBuilder';\nimport { HTTP } from '../platform/constants';\nclass HttpClient {\n\n    constructor(client) {\n        this.client = client;\n    }\n\n    request(url, method) {\n        const configuration = {\n            url, method\n        }\n        this.requestBuilder = new RequestBuilder(configuration, this.client);\n        return this.requestBuilder;\n    }\n\n    get(url) {\n        return this.request(url, HTTP.METHOD.GET);\n    }\n\n    post(url) {\n        return this.request(url, HTTP.METHOD.POST);\n    }\n\n    put(url) {\n        return this.request(url, HTTP.METHOD.PUT);\n    }\n\n    delete(url) {\n        return this.request(url, HTTP.METHOD.DELETE);\n    }\n}\n\nexport { HttpClient }","class HttpClientInterceptor {\n\n    constructor() {\n        this.requestHandlers = new Set();\n        this.responseHandlers = new Set();\n    }\n\n    addRequestInterceptor(handler) {\n        this.requestHandlers.add(handler);\n    }\n\n    getRequestInterceptors() {\n        let list = [];\n        this.requestHandlers.forEach(handler => list.push(handler));\n        return list;\n    }\n\n    addResponseInterceptor(handler) {\n        this.responseHandlers.add(handler);\n    }\n\n    getResponseInterceptors() {\n        let list = [];\n        this.responseHandlers.forEach(handler => list.push(handler));\n        return list;\n    }\n}\n\nexport { HttpClientInterceptor }","import { checkMethod, checkParam, parseUrl, exists } from '../utils';\nimport { ServiceProvider  } from './serviceProvider';\nimport { LoggerFactory } from '../logging';\nimport { HTTP } from './constants';\n\nclass ClientScope {\n\n    constructor() {\n        this.clientIds = new Map();\n    }\n\n    handleRequest(httpRequest) {\n        checkMethod('handleRequest');\n        checkParam(httpRequest, 'httpRequest');\n        const clientId = this.getClientId(httpRequest.url);\n        if (exists(clientId)) {\n            ClientScope.LOGGER.trace('Using ClientId', clientId);\n            httpRequest.setRequestHeader(HTTP.HEADER_NAME.X_CLIENT_SESSION_ID, clientId);\n        }\n    }\n\n    handleResponse(httpResponse) {\n        checkMethod('handleResponse');\n        checkParam(httpResponse, 'httpResponse');\n        const clientId = this.getClientId(httpResponse.url);\n        const newClientId = httpResponse.getHeaderByName(HTTP.HEADER_NAME.X_CLIENT_SESSION_ID);\n        if (exists(clientId) && exists(newClientId) && clientId !== newClientId) {\n            throw new Error('Client Id does not match!');\n        }\n        if (!exists(clientId) && exists(newClientId)) {\n            ClientScope.LOGGER.debug('New ClientId found', newClientId);\n            this.setClientId(httpResponse.url, newClientId);\n        }\n    }\n\n    initServiceProvider(client) {\n        checkMethod('initServiceProvider');\n        checkParam(client, 'client');\n        client.getService('HttpClientInterceptor').addRequestInterceptor(this);\n        client.getService('HttpClientInterceptor').addResponseInterceptor(this);\n    }\n\n    getClientId(url) {\n        const result = parseUrl(url);\n        const key = ClientScope.calcKey(result.hostname, result.port)\n        return this.clientIds.get(key);\n    }\n\n    setClientId(url, clientId) {\n        const result = parseUrl(url);\n        const key = ClientScope.calcKey(result.hostname, result.port)\n        this.clientIds.set(key, clientId);\n        ClientScope.LOGGER.trace('Setting ClientId', clientId, 'for', url, 'with key', key);\n    }\n\n}\n\nClientScope.calcKey = function(hostname, port) {\n    return hostname + port;\n}\n\nClientScope.LOGGER = LoggerFactory.getLogger('ClientScope');\n\nfunction register(client) {\n    if (exists(client)) {\n        const clientScopeProvider = new ServiceProvider(ClientScope, 'ClientScope');\n\n        client.registerServiceProvider(clientScopeProvider);\n    }\n}\n\nexport { register }","export const ATTRIBUTE_METADATA_CHANGED_COMMAND_ID = 'AttributeMetadataChanged';\nexport const CALL_ACTION_COMMAND_ID = 'CallAction';\nexport const CHANGE_ATTRIBUTE_METADATA_COMMAND_ID = 'ChangeAttributeMetadata';\nexport const CREATE_CONTEXT_COMMAND_ID = 'CreateContext';\nexport const CREATE_CONTROLLER_COMMAND_ID = 'CreateController';\nexport const CREATE_PRESENTATION_MODEL_COMMAND_ID = 'CreatePresentationModel';\nexport const DELETE_PRESENTATION_MODEL_COMMAND_ID = 'DeletePresentationModel';\nexport const DESTROY_CONTEXT_COMMAND_ID = 'DestroyContext';\nexport const DESTROY_CONTROLLER_COMMAND_ID = 'DestroyController';\nexport const INTERRUPT_LONG_POLL_COMMAND_ID = 'InterruptLongPoll';\nexport const PRESENTATION_MODEL_DELETED_COMMAND_ID = 'PresentationModelDeleted';\nexport const START_LONG_POLL_COMMAND_ID = 'StartLongPoll';\nexport const VALUE_CHANGED_COMMAND_ID = 'ValueChanged';\n\nexport const ID = \"id\";\nexport const ATTRIBUTE_ID = \"a_id\";\nexport const PM_ID = \"p_id\";\nexport const CONTROLLER_ID = \"c_id\";\nexport const PM_TYPE = \"t\";\nexport const NAME = \"n\";\nexport const VALUE = \"v\";\nexport const PARAMS = \"p\";\nexport const PM_ATTRIBUTES = \"a\";","import {VALUE_CHANGED_COMMAND_ID, PRESENTATION_MODEL_DELETED_COMMAND_ID} from './commands/commandConstants';\n\nexport default class BlindCommandBatcher {\n    constructor(folding = true, maxBatchSize = 50) {\n        this.folding = folding;\n        this.maxBatchSize = maxBatchSize;\n    }\n    batch(queue) {\n        let batch = [];\n        let batchLength = 0;\n        while(queue[batchLength] && batchLength <= this.maxBatchSize) {\n            const element = queue[batchLength];\n            batchLength++;\n            if(this.folding) {\n                if(element.command.id == VALUE_CHANGED_COMMAND_ID &&\n                    batch.length > 0 &&\n                    batch[batch.length - 1].command.id == VALUE_CHANGED_COMMAND_ID &&\n                    element.command.attributeId == batch[batch.length - 1].command.attributeId) {\n                    //merge ValueChange for same value\n                    batch[batch.length - 1].command.newValue = element.command.newValue;\n                } else if(element.command.id == PRESENTATION_MODEL_DELETED_COMMAND_ID) {\n                    //We do not need it...\n                } else {\n                    batch.push(element);\n                }\n            } else {\n                batch.push(element);\n            }\n            if(element.handler) {\n                break;\n            }\n        }\n        queue.splice(0, batchLength);\n        return batch;\n    }\n}","export const JS_STRING_TYPE = 'string';\n\nexport const REMOTING_BEAN = 0;\nexport const BYTE = 1;\nexport const SHORT = 2;\nexport const INT = 3;\nexport const LONG = 4;\nexport const FLOAT = 5;\nexport const DOUBLE = 6;\nexport const BOOLEAN = 7;\nexport const STRING = 8;\nexport const DATE = 9;\nexport const ENUM = 10;\nexport const CALENDAR = 11;\nexport const LOCAL_DATE_FIELD_TYPE = 55;\nexport const LOCAL_DATE_TIME_FIELD_TYPE = 52;\nexport const ZONED_DATE_TIME_FIELD_TYPE = 54;\n\n\nexport const ADDED_TYPE = \"ADDED\";\nexport const REMOVED_TYPE = \"REMOVED\";\n","import {VALUE_CHANGED_COMMAND_ID} from '../commandConstants';\nimport {checkMethod, checkParam} from '../../../utils';\n\nexport default class ValueChangedCommand {\n\n    constructor() {\n        this.id = VALUE_CHANGED_COMMAND_ID;\n    }\n\n    init(attributeId, newValue) {\n        checkMethod('ValueChangedCommand.init()');\n        checkParam(attributeId, 'attributeId');\n\n        this.attributeId = attributeId;\n        this.newValue = newValue;\n    }\n}","import {ATTRIBUTE_METADATA_CHANGED_COMMAND_ID} from '../commandConstants';\nimport {checkMethod, checkParam} from '../../../utils';\n\nexport default class AttributeMetadataChangedCommand {\n\n    constructor() {\n        this.id = ATTRIBUTE_METADATA_CHANGED_COMMAND_ID;\n    }\n\n    init(attributeId, metadataName, value) {\n        checkMethod('AttributeMetadataChangedCommand.init()');\n        checkParam(attributeId, 'attributeId');\n        checkParam(metadataName, 'metadataName');\n\n        this.attributeId = attributeId;\n        this.metadataName = metadataName;\n        this.value = value;\n    }\n}","import {CALL_ACTION_COMMAND_ID} from '../commandConstants';\nimport {checkMethod, checkParam} from '../../../utils';\n\nexport default class CallActionCommand {\n    \n    constructor() {\n        this.id = CALL_ACTION_COMMAND_ID;\n    }\n\n    init(controllerid, actionName, params) {\n        checkMethod('CreateControllerCommand.init()');\n        checkParam(controllerid, 'controllerid');\n        checkParam(actionName, 'actionName');\n\n        this.controllerid = controllerid;\n        this.actionName = actionName;\n        this.params = params;\n    }\n\n}","import {CHANGE_ATTRIBUTE_METADATA_COMMAND_ID} from '../commandConstants';\nimport {checkMethod, checkParam} from '../../../utils';\n\nexport default class ChangeAttributeMetadataCommand {\n\n    constructor() {\n        this.id = CHANGE_ATTRIBUTE_METADATA_COMMAND_ID;\n    }\n\n    init(attributeId, metadataName, value) {\n        checkMethod('ChangeAttributeMetadataCommand.init()');\n        checkParam(attributeId, 'attributeId');\n        checkParam(metadataName, 'metadataName');\n\n        this.attributeId = attributeId;\n        this.metadataName = metadataName;\n        this.value = value;\n    }\n}","import {CREATE_CONTEXT_COMMAND_ID} from '../commandConstants';\n\nexport default class CreateContextCommand {\n\n    constructor() {\n        this.id = CREATE_CONTEXT_COMMAND_ID;\n    }\n\n}","import {CREATE_CONTROLLER_COMMAND_ID} from '../commandConstants';\nimport {checkMethod, checkParam} from '../../../utils';\n\nexport default class CreateControllerCommand {\n\n    constructor() {\n        this.id = CREATE_CONTROLLER_COMMAND_ID;\n    }\n\n    init(controllerName, parentControllerId) {\n        checkMethod('CreateControllerCommand.init()');\n        checkParam(controllerName, 'controllerName');\n\n        this.controllerName = controllerName;\n        this.parentControllerId = parentControllerId;\n    }\n\n}","import {CREATE_PRESENTATION_MODEL_COMMAND_ID} from '../commandConstants';\nimport {checkMethod, checkParam} from '../../../utils';\n\nexport default class CreatePresentationModelCommand {\n\n    constructor() {\n        this.id = CREATE_PRESENTATION_MODEL_COMMAND_ID;\n    }\n\n    init(presentationModel) {\n        checkMethod('CreatePresentationModelCommand.init()');\n        checkParam(presentationModel, 'presentationModel');\n\n        this.attributes = [];\n        this.clientSideOnly = false;\n        this.pmId = presentationModel.id;\n        this.pmType = presentationModel.presentationModelType;\n        var command = this;\n        presentationModel.getAttributes().forEach(function (attr) {\n            command.attributes.push({\n                propertyName: attr.propertyName,\n                id: attr.id,\n                value: attr.getValue()\n            });\n        });\n    }\n}","import {DELETE_PRESENTATION_MODEL_COMMAND_ID} from '../commandConstants';\nimport {checkMethod, checkParam} from '../../../utils';\n\nexport default class DeletePresentationModelCommand {\n\n    constructor() {\n        this.id = DELETE_PRESENTATION_MODEL_COMMAND_ID;\n    }\n\n    init(pmId) {\n        checkMethod('DeletePresentationModelCommand.init()');\n        checkParam(pmId, 'pmId');\n\n        this.pmId = pmId;\n    }\n}\n","import {DESTROY_CONTEXT_COMMAND_ID} from '../commandConstants';\n\nexport default class DestroyContextCommand {\n\n    constructor() {\n        this.id = DESTROY_CONTEXT_COMMAND_ID;\n    }\n\n}","import {DESTROY_CONTROLLER_COMMAND_ID} from '../commandConstants';\nimport {checkMethod, checkParam} from '../../../utils';\n\nexport default class DestroyControllerCommand {\n\n    constructor() {\n        this.id = DESTROY_CONTROLLER_COMMAND_ID;\n    }\n\n    init(controllerId) {\n        checkMethod('DestroyControllerCommand.init()');\n        checkParam(controllerId, 'controllerId');\n\n        this.controllerId = controllerId;\n    }\n\n}","import {INTERRUPT_LONG_POLL_COMMAND_ID} from '../commandConstants'\n\nexport default class InterruptLongPollCommand {\n\n    constructor() {\n        this.id = INTERRUPT_LONG_POLL_COMMAND_ID;\n    }\n}","import {PRESENTATION_MODEL_DELETED_COMMAND_ID} from '../commandConstants';\nimport {checkMethod, checkParam} from '../../../utils';\n\nexport default class PresentationModelDeletedCommand {\n\n    constructor() {\n        this.id = PRESENTATION_MODEL_DELETED_COMMAND_ID;\n    }\n\n    init(pmId) {\n        checkMethod('PresentationModelDeletedCommand.init()');\n        checkParam(pmId, 'pmId');\n\n        this.pmId = pmId;\n    }\n}","import {START_LONG_POLL_COMMAND_ID} from '../commandConstants'\n\nexport default class StartLongPollCommand {\n\n    constructor() {\n        this.id = START_LONG_POLL_COMMAND_ID;\n    }\n}\n","export default class CodecError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}","import {exists, checkMethod, checkParam} from '../../utils';\nimport {JS_STRING_TYPE} from '../constants';\nimport {\n    CREATE_PRESENTATION_MODEL_COMMAND_ID,\n    VALUE_CHANGED_COMMAND_ID,\n    ATTRIBUTE_METADATA_CHANGED_COMMAND_ID,\n    CALL_ACTION_COMMAND_ID,\n    CHANGE_ATTRIBUTE_METADATA_COMMAND_ID,\n    CREATE_CONTEXT_COMMAND_ID,\n    CREATE_CONTROLLER_COMMAND_ID,\n    DELETE_PRESENTATION_MODEL_COMMAND_ID,\n    DESTROY_CONTEXT_COMMAND_ID,\n    DESTROY_CONTROLLER_COMMAND_ID,\n    INTERRUPT_LONG_POLL_COMMAND_ID,\n    PRESENTATION_MODEL_DELETED_COMMAND_ID,\n    START_LONG_POLL_COMMAND_ID\n} from './commandConstants';\nimport {ID, PM_ID, PM_TYPE, PM_ATTRIBUTES, NAME, ATTRIBUTE_ID, VALUE, CONTROLLER_ID, PARAMS} from './commandConstants';\nimport ValueChangedCommand from './impl/valueChangedCommand';\nimport AttributeMetadataChangedCommand from './impl/attributeMetadataChangedCommand';\nimport CallActionCommand from './impl/callActionCommand';\nimport ChangeAttributeMetadataCommand from './impl/changeAttributeMetadataCommand';\nimport CreateContextCommand from './impl/createContextCommand';\nimport CreateControllerCommand from './impl/createControllerCommand';\nimport CreatePresentationModelCommand from './impl/createPresentationModelCommand';\nimport DeletePresentationModelCommand from './impl/deletePresentationModelCommand';\nimport DestroyContextCommand from './impl/destroyContextCommand';\nimport DestroyControllerCommand from './impl/destroyControllerCommand';\nimport InterruptLongPollCommand from './impl/interruptLongPollCommand';\nimport PresentationModelDeletedCommand from './impl/presentationModelDeletedCommand';\nimport StartLongPollCommand from './impl/startLongPollCommand';\nimport CodecError from './codecError';\n\n\nexport default class Codec {\n\n    static _encodeAttributeMetadataChangedCommand(command) {\n        checkMethod(\"Codec.encodeAttributeMetadataChangedCommand\");\n        checkParam(command, \"command\");\n        checkParam(command.attributeId, \"command.attributeId\");\n        checkParam(command.metadataName, \"command.metadataName\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = ATTRIBUTE_METADATA_CHANGED_COMMAND_ID;\n        jsonCommand[ATTRIBUTE_ID] = command.attributeId;\n        jsonCommand[NAME] = command.metadataName;\n        jsonCommand[VALUE] = command.value;\n        return jsonCommand;\n    }\n\n    static _decodeAttributeMetadataChangedCommand(jsonCommand) {\n        checkMethod(\"Codec.decodeAttributeMetadataChangedCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n        checkParam(jsonCommand[ATTRIBUTE_ID], \"jsonCommand[ATTRIBUTE_ID]\");\n        checkParam(jsonCommand[NAME], \"jsonCommand[NAME]\");\n\n        let command = new AttributeMetadataChangedCommand();\n        command.attributeId = jsonCommand[ATTRIBUTE_ID];\n        command.metadataName = jsonCommand[NAME];\n        command.value = jsonCommand[VALUE];\n        return command;\n    }\n\n    static _encodeCallActionCommand(command) {\n        checkMethod(\"Codec.encodeCallActionCommand\");\n        checkParam(command, \"command\");\n        checkParam(command.controllerid, \"command.controllerid\");\n        checkParam(command.actionName, \"command.actionName\");\n        checkParam(command.params, \"command.params\");\n\n\n        let jsonCommand = {};\n        jsonCommand[ID] = CALL_ACTION_COMMAND_ID;\n        jsonCommand[CONTROLLER_ID] = command.controllerid;\n        jsonCommand[NAME] = command.actionName;\n        jsonCommand[PARAMS] = command.params.map((param) => {\n            let result = {};\n            result[NAME] = param.name;\n            if (exists(param.value)) {\n                result[VALUE] = param.value;\n            }\n            return result;\n        });\n        return jsonCommand;\n    }\n\n    static _decodeCallActionCommand(jsonCommand) {\n        checkMethod(\"Codec.decodeCallActionCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n        checkParam(jsonCommand[CONTROLLER_ID], \"jsonCommand[CONTROLLER_ID]\");\n        checkParam(jsonCommand[NAME], \"jsonCommand[NAME]\");\n        checkParam(jsonCommand[PARAMS], \"jsonCommand[PARAMS]\");\n\n        let command = new CallActionCommand();\n        command.controllerid = jsonCommand[CONTROLLER_ID];\n        command.actionName = jsonCommand[NAME];\n        //TODO: Für die Params sollten wir eine Klasse bereitstellen\n        command.params = jsonCommand[PARAMS].map((param) => {\n            return {\n                'name': param[NAME],\n                'value': exists(param[VALUE]) ? param[VALUE] : null\n            };\n        });\n        return command;\n    }\n\n    static _encodeChangeAttributeMetadataCommand(command) {\n        checkMethod(\"Codec.encodeChangeAttributeMetadataCommand\");\n        checkParam(command, \"command\");\n        checkParam(command.attributeId, \"command.attributeId\");\n        checkParam(command.metadataName, \"command.metadataName\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = CHANGE_ATTRIBUTE_METADATA_COMMAND_ID;\n        jsonCommand[ATTRIBUTE_ID] = command.attributeId;\n        jsonCommand[NAME] = command.metadataName;\n        jsonCommand[VALUE] = command.value;\n        return jsonCommand;\n    }\n\n    static _decodeChangeAttributeMetadataCommand(jsonCommand) {\n        checkMethod(\"Codec.decodeChangeAttributeMetadataCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n        checkParam(jsonCommand[ATTRIBUTE_ID], \"jsonCommand[ATTRIBUTE_ID]\");\n        checkParam(jsonCommand[NAME], \"jsonCommand[NAME]\");\n\n        let command = new ChangeAttributeMetadataCommand();\n        command.attributeId = jsonCommand[ATTRIBUTE_ID];\n        command.metadataName = jsonCommand[NAME];\n        command.value = jsonCommand[VALUE];\n        return command;\n    }\n\n    static _encodeCreateContextCommand(command) {\n        checkMethod(\"Codec.encodeCreateContextCommand\");\n        checkParam(command, \"command\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = CREATE_CONTEXT_COMMAND_ID;\n        return jsonCommand;\n    }\n\n    static _decodeCreateContextCommand(jsonCommand) {\n        checkMethod(\"Codec.decodeCreateContextCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n\n        let command = new CreateContextCommand();\n        return command;\n    }\n\n    static _encodeCreateControllerCommand(command) {\n        checkMethod(\"Codec._encodeCreateControllerCommand\");\n        checkParam(command, \"command\");\n        checkParam(command.controllerName, \"command.controllerName\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = CREATE_CONTROLLER_COMMAND_ID;\n        jsonCommand[NAME] = command.controllerName;\n        jsonCommand[CONTROLLER_ID] = command.parentControllerId;\n        return jsonCommand;\n    }\n\n    static _decodeCreateControllerCommand(jsonCommand) {\n        checkMethod(\"Codec._decodeCreateControllerCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n        checkParam(jsonCommand[NAME], \"jsonCommand[NAME]\");\n        checkParam(jsonCommand[CONTROLLER_ID], \"jsonCommand[CONTROLLER_ID]\");\n\n        let command = new CreateControllerCommand();\n        command.controllerName = jsonCommand[NAME];\n        command.parentControllerId = jsonCommand[CONTROLLER_ID];\n        return command;\n    }\n\n    static _encodeCreatePresentationModelCommand(command) {\n        checkMethod(\"Codec.encodeCreatePresentationModelCommand\");\n        checkParam(command, \"command\");\n        checkParam(command.pmId, \"command.pmId\");\n        checkParam(command.pmType, \"command.pmType\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = CREATE_PRESENTATION_MODEL_COMMAND_ID;\n        jsonCommand[PM_ID] = command.pmId;\n        jsonCommand[PM_TYPE] = command.pmType;\n        jsonCommand[PM_ATTRIBUTES] = command.attributes.map((attribute) => {\n            let result = {};\n            result[NAME] = attribute.propertyName;\n            result[ATTRIBUTE_ID] = attribute.id;\n            if (exists(attribute.value)) {\n                result[VALUE] = attribute.value;\n            }\n            return result;\n        });\n        return jsonCommand;\n    }\n\n    static _decodeCreatePresentationModelCommand(jsonCommand) {\n        checkMethod(\"Codec.decodeCreatePresentationModelCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n        checkParam(jsonCommand[PM_ID], \"jsonCommand[PM_ID]\");\n        checkParam(jsonCommand[PM_TYPE], \"jsonCommand[PM_TYPE]\");\n\n        let command = new CreatePresentationModelCommand();\n        command.pmId = jsonCommand[PM_ID];\n        command.pmType = jsonCommand[PM_TYPE];\n\n        //TODO: Für die Attribute sollten wir eine Klasse bereitstellen\n        command.attributes = jsonCommand[PM_ATTRIBUTES].map((attribute) => {\n            return {\n                'propertyName': attribute[NAME],\n                'id': attribute[ATTRIBUTE_ID],\n                'value': exists(attribute[VALUE]) ? attribute[VALUE] : null\n            };\n        });\n        return command;\n    }\n\n    static _encodeDeletePresentationModelCommand(command) {\n        checkMethod(\"Codec._encodeDeletePresentationModelCommand\");\n        checkParam(command, \"command\");\n        checkParam(command.pmId, \"command.pmId\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = DELETE_PRESENTATION_MODEL_COMMAND_ID;\n        jsonCommand[PM_ID] = command.pmId;\n        return jsonCommand;\n    }\n\n    static _decodeDeletePresentationModelCommand(jsonCommand) {\n        checkMethod(\"Codec._decodeDeletePresentationModelCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n        checkParam(jsonCommand[PM_ID], \"jsonCommand[PM_ID]\");\n\n\n        let command = new DeletePresentationModelCommand();\n        command.pmId = jsonCommand[PM_ID];\n        return command;\n    }\n\n    static _encodeDestroyContextCommand(command) {\n        checkMethod(\"Codec._encodeDestroyContextCommand\");\n        checkParam(command, \"command\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = DESTROY_CONTEXT_COMMAND_ID;\n        return jsonCommand;\n    }\n\n    static _decodeDestroyContextCommand(jsonCommand) {\n        checkMethod(\"Codec._decodeDestroyContextCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n\n        let command = new DestroyContextCommand();\n        return command;\n    }\n\n    static _encodeDestroyControllerCommand(command) {\n        checkMethod(\"Codec._encodeDestroyControllerCommand\");\n        checkParam(command, \"command\");\n        checkParam(command.controllerId, \"command.controllerId\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = DESTROY_CONTROLLER_COMMAND_ID;\n        jsonCommand[CONTROLLER_ID] = command.controllerId;\n        return jsonCommand;\n    }\n\n    static _decodeDestroyControllerCommand(jsonCommand) {\n        checkMethod(\"Codec._decodeDestroyControllerCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n        checkParam(jsonCommand[CONTROLLER_ID], \"jsonCommand[CONTROLLER_ID]\");\n\n        let command = new DestroyControllerCommand();\n        command.controllerId = jsonCommand[CONTROLLER_ID];\n        return command;\n    }\n\n    static _encodeInterruptLongPollCommand(command) {\n        checkMethod(\"Codec._encodeInterruptLongPollCommand\");\n        checkParam(command, \"command\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = INTERRUPT_LONG_POLL_COMMAND_ID;\n        return jsonCommand;\n    }\n\n    static _decodeInterruptLongPollCommand(jsonCommand) {\n        checkMethod(\"Codec._decodeInterruptLongPollCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n\n        let command = new InterruptLongPollCommand();\n        return command;\n    }\n\n    static _encodePresentationModelDeletedCommand(command) {\n        checkMethod(\"Codec._encodePresentationModelDeletedCommand\");\n        checkParam(command, \"command\");\n        checkParam(command.pmId, \"command.pmId\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = PRESENTATION_MODEL_DELETED_COMMAND_ID;\n        jsonCommand[PM_ID] = command.pmId;\n        return jsonCommand;\n    }\n\n    static _decodePresentationModelDeletedCommand(jsonCommand) {\n        checkMethod(\"Codec._decodePresentationModelDeletedCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n        checkParam(jsonCommand[PM_ID], \"jsonCommand[PM_ID]\");\n\n        let command = new PresentationModelDeletedCommand();\n        command.pmId = jsonCommand[PM_ID];\n        return command;\n    }\n\n    static _encodeStartLongPollCommand(command) {\n        checkMethod(\"Codec._encodeStartLongPollCommand\");\n        checkParam(command, \"command\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = START_LONG_POLL_COMMAND_ID;\n        return jsonCommand;\n    }\n\n    static _decodeStartLongPollCommand(jsonCommand) {\n        checkMethod(\"Codec._decodeStartLongPollCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n\n        let command = new StartLongPollCommand();\n        return command;\n    }\n\n    static _encodeValueChangedCommand(command) {\n        checkMethod(\"Codec.encodeValueChangedCommand\");\n        checkParam(command, \"command\");\n        checkParam(command.attributeId, \"command.attributeId\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = VALUE_CHANGED_COMMAND_ID;\n        jsonCommand[ATTRIBUTE_ID] = command.attributeId;\n        if (exists(command.newValue)) {\n            jsonCommand[VALUE] = command.newValue;\n        }\n        return jsonCommand;\n    }\n\n    static _decodeValueChangedCommand(jsonCommand) {\n        checkMethod(\"Codec.decodeValueChangedCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n        checkParam(jsonCommand[ATTRIBUTE_ID], \"jsonCommand[ATTRIBUTE_ID]\");\n\n        let command = new ValueChangedCommand();\n        command.attributeId = jsonCommand[ATTRIBUTE_ID];\n        if (exists(jsonCommand[VALUE])) {\n            command.newValue = jsonCommand[VALUE];\n        } else {\n            command.newValue = null;\n        }\n        return command;\n    }\n\n    static encode(commands) {\n        checkMethod(\"Codec.encode\");\n        checkParam(commands, \"commands\");\n\n        let self = this;\n        return JSON.stringify(commands.map((command) => {\n            if (command.id === ATTRIBUTE_METADATA_CHANGED_COMMAND_ID) {\n                return self._encodeAttributeMetadataChangedCommand(command);\n            } else if (command.id === CALL_ACTION_COMMAND_ID) {\n                return self._encodeCallActionCommand(command);\n            } else if (command.id === CHANGE_ATTRIBUTE_METADATA_COMMAND_ID) {\n                return self._encodeChangeAttributeMetadataCommand(command);\n            } else if (command.id === CREATE_CONTEXT_COMMAND_ID) {\n                return self._encodeCreateContextCommand(command);\n            } else if (command.id === CREATE_CONTROLLER_COMMAND_ID) {\n                return self._encodeCreateControllerCommand(command);\n            } else if (command.id === CREATE_PRESENTATION_MODEL_COMMAND_ID) {\n                return self._encodeCreatePresentationModelCommand(command);\n            } else if (command.id === DELETE_PRESENTATION_MODEL_COMMAND_ID) {\n                return self._encodeDeletePresentationModelCommand(command);\n            } else if (command.id === DESTROY_CONTEXT_COMMAND_ID) {\n                return self._encodeDestroyContextCommand(command);\n            } else if (command.id === DESTROY_CONTROLLER_COMMAND_ID) {\n                return self._encodeDestroyControllerCommand(command);\n            } else if (command.id === INTERRUPT_LONG_POLL_COMMAND_ID) {\n                return self._encodeInterruptLongPollCommand(command);\n            } else if (command.id === PRESENTATION_MODEL_DELETED_COMMAND_ID) {\n                return self._encodePresentationModelDeletedCommand(command);\n            } else if (command.id === START_LONG_POLL_COMMAND_ID) {\n                return self._encodeStartLongPollCommand(command);\n            } else if (command.id === VALUE_CHANGED_COMMAND_ID) {\n                return self._encodeValueChangedCommand(command);\n            } else {\n                throw new CodecError('Command of type ' + command.id + ' can not be handled');\n            }\n        }));\n    }\n\n    static decode(transmitted) {\n        checkMethod(\"Codec.decode\");\n        checkParam(transmitted, \"transmitted\");\n\n        if (typeof transmitted === JS_STRING_TYPE) {\n            let self = this;\n            return JSON.parse(transmitted).map(function (command) {\n                if (command.id === ATTRIBUTE_METADATA_CHANGED_COMMAND_ID) {\n                    return self._decodeAttributeMetadataChangedCommand(command);\n                } else if (command.id === CALL_ACTION_COMMAND_ID) {\n                    return self._decodeCallActionCommand(command);\n                } else if (command.id === CHANGE_ATTRIBUTE_METADATA_COMMAND_ID) {\n                    return self._decodeChangeAttributeMetadataCommand(command);\n                } else if (command.id === CREATE_CONTEXT_COMMAND_ID) {\n                    return self._decodeCreateContextCommand(command);\n                } else if (command.id === CREATE_CONTROLLER_COMMAND_ID) {\n                    return self._decodeCreateControllerCommand(command);\n                } else if (command.id === CREATE_PRESENTATION_MODEL_COMMAND_ID) {\n                    return self._decodeCreatePresentationModelCommand(command);\n                } else if (command.id === DELETE_PRESENTATION_MODEL_COMMAND_ID) {\n                    return self._decodeDeletePresentationModelCommand(command);\n                } else if (command.id === DESTROY_CONTEXT_COMMAND_ID) {\n                    return self._decodeDestroyContextCommand(command);\n                } else if (command.id === DESTROY_CONTROLLER_COMMAND_ID) {\n                    return self._decodeDestroyControllerCommand(command);\n                } else if (command.id === INTERRUPT_LONG_POLL_COMMAND_ID) {\n                    return self._decodeInterruptLongPollCommand(command);\n                } else if (command.id === PRESENTATION_MODEL_DELETED_COMMAND_ID) {\n                    return self._decodePresentationModelDeletedCommand(command);\n                } else if (command.id === START_LONG_POLL_COMMAND_ID) {\n                    return self._decodeStartLongPollCommand(command);\n                } else if (command.id === VALUE_CHANGED_COMMAND_ID) {\n                    return self._decodeValueChangedCommand(command);\n                } else {\n                    throw new CodecError('Command of type ' + command.id + ' can not be handled');\n                }\n            });\n        } else {\n            throw new CodecError('Can not decode data that is not of type string');\n        }\n    }\n}","export default class EventBus {\n\n    constructor() {\n        this.eventHandlers = [];\n    }\n\n    onEvent(eventHandler) {\n        this.eventHandlers.push(eventHandler);\n    }\n\n    trigger(event) {\n        this.eventHandlers.forEach(handle => handle(event));\n    }\n}","import EventBus from './eventBus'\n\nvar presentationModelInstanceCount = 0; // todo dk: consider making this static in class\n\nexport default class ClientPresentationModel {\n    constructor(id, presentationModelType) {\n        this.id = id;\n        this.presentationModelType = presentationModelType;\n        this.attributes = [];\n        this.clientSideOnly = false;\n        this.dirty = false;\n        if (typeof id !== 'undefined' && id != null) {\n            this.id = id;\n        }\n        else {\n            this.id = (presentationModelInstanceCount++).toString();\n        }\n        this.invalidBus = new EventBus();\n        this.dirtyValueChangeBus = new EventBus();\n    }\n    // todo dk: align with Java version: move to ClientDolphin and auto-add to model store\n    /** a copy constructor for anything but IDs. Per default, copies are client side only, no automatic update applies. */\n    copy() {\n        var result = new ClientPresentationModel(null, this.presentationModelType);\n        result.clientSideOnly = true;\n        this.getAttributes().forEach((attribute) => {\n            var attributeCopy = attribute.copy();\n            result.addAttribute(attributeCopy);\n        });\n        return result;\n    }\n    //add array of attributes\n    addAttributes(attributes) {\n        if (!attributes || attributes.length < 1)\n            return;\n        attributes.forEach(attr => {\n            this.addAttribute(attr);\n        });\n    }\n    addAttribute(attribute) {\n        if (!attribute || (this.attributes.indexOf(attribute) > -1)) {\n            return;\n        }\n        if (this.findAttributeByPropertyName(attribute.propertyName)) {\n            throw new Error(\"There already is an attribute with property name: \" + attribute.propertyName\n                + \" in presentation model with id: \" + this.id);\n        }\n        if (attribute.getQualifier() && this.findAttributeByQualifier(attribute.getQualifier())) {\n            throw new Error(\"There already is an attribute with qualifier: \" + attribute.getQualifier()\n                + \" in presentation model with id: \" + this.id);\n        }\n        attribute.setPresentationModel(this);\n        this.attributes.push(attribute);\n        attribute.onValueChange(() => {\n            this.invalidBus.trigger({ source: this });\n        });\n    }\n    onInvalidated(handleInvalidate) {\n        this.invalidBus.onEvent(handleInvalidate);\n    }\n    /** returns a copy of the internal state */\n    getAttributes() {\n        return this.attributes.slice(0);\n    }\n    getAt(propertyName) {\n        return this.findAttributeByPropertyName(propertyName);\n    }\n    findAllAttributesByPropertyName(propertyName) {\n        var result = [];\n        if (!propertyName)\n            return null;\n        this.attributes.forEach((attribute) => {\n            if (attribute.propertyName == propertyName) {\n                result.push(attribute);\n            }\n        });\n        return result;\n    }\n    findAttributeByPropertyName(propertyName) {\n        if (!propertyName)\n            return null;\n        for (var i = 0; i < this.attributes.length; i++) {\n            if ((this.attributes[i].propertyName == propertyName)) {\n                return this.attributes[i];\n            }\n        }\n        return null;\n    }\n    findAttributeByQualifier(qualifier) {\n        if (!qualifier)\n            return null;\n        for (var i = 0; i < this.attributes.length; i++) {\n            if (this.attributes[i].getQualifier() == qualifier) {\n                return this.attributes[i];\n            }\n        }\n        return null;\n    }\n    findAttributeById(id) {\n        if (!id)\n            return null;\n        for (var i = 0; i < this.attributes.length; i++) {\n            if (this.attributes[i].id == id) {\n                return this.attributes[i];\n            }\n        }\n        return null;\n    }\n    syncWith(sourcePresentationModel) {\n        this.attributes.forEach((targetAttribute) => {\n            var sourceAttribute = sourcePresentationModel.getAt(targetAttribute.propertyName);\n            if (sourceAttribute) {\n                targetAttribute.syncWith(sourceAttribute);\n            }\n        });\n    }\n}\n","import BlindCommandBatcher from './commandBatcher';\nimport Codec from './commands/codec';\nimport ClientPresentationModel from './clientPresentationModel'\nimport { LoggerFactory } from '../logging';\n\nexport default class ClientConnector {\n\n    constructor(transmitter, clientDolphin, slackMS = 0, maxBatchSize = 50) {\n\n        this.commandQueue = [];\n        this.currentlySending = false;\n        this.pushEnabled = false;\n        this.waiting = false;\n        this.transmitter = transmitter;\n        this.clientDolphin = clientDolphin;\n        this.slackMS = slackMS;\n        this.codec = new Codec();\n        this.commandBatcher = new BlindCommandBatcher(true, maxBatchSize);\n    }\n\n    setCommandBatcher(newBatcher) {\n        this.commandBatcher = newBatcher;\n    }\n\n    setPushEnabled(enabled) {\n        this.pushEnabled = enabled;\n    }\n\n    setPushListener(newListener) {\n        this.pushListener = newListener;\n    }\n\n    setReleaseCommand(newCommand) {\n        this.releaseCommand = newCommand;\n    }\n\n    send(command, onFinished) {\n        this.commandQueue.push({ command: command, handler: onFinished });\n        if (this.currentlySending) {\n            this.release(); // there is not point in releasing if we do not send atm\n            return;\n        }\n        this.doSendNext();\n    }\n\n    doSendNext() {\n        if (this.commandQueue.length < 1) {\n            if (this.pushEnabled) {\n                this.enqueuePushCommand();\n            }\n            else {\n                this.currentlySending = false;\n                return;\n            }\n        }\n        this.currentlySending = true;\n        let cmdsAndHandlers = this.commandBatcher.batch(this.commandQueue);\n\n        if(cmdsAndHandlers.length > 0) {\n            let callback = cmdsAndHandlers[cmdsAndHandlers.length - 1].handler;\n            let commands = cmdsAndHandlers.map(cah => { return cah.command; });\n            this.transmitter.transmit(commands, (response) => {\n                let touchedPMs = [];\n                response.forEach((command) => {\n                    let touched = this.handle(command);\n                    if (touched)\n                        touchedPMs.push(touched);\n                });\n                if (callback) {\n                    callback.onFinished(touchedPMs); // todo: make them unique?\n                }\n                setTimeout(() => this.doSendNext(), this.slackMS);\n            }, (error) => {\n                callback.onError(error);\n            });\n        } else {\n            setTimeout(() => this.doSendNext(), this.slackMS);\n        }\n    }\n\n    handle(command) {\n        if (command.id === \"DeletePresentationModel\") {\n            return this.handleDeletePresentationModelCommand(command);\n        }\n        else if (command.id === \"CreatePresentationModel\") {\n            return this.handleCreatePresentationModelCommand(command);\n        }\n        else if (command.id === \"ValueChanged\") {\n            return this.handleValueChangedCommand(command);\n        }\n        else if (command.id === \"AttributeMetadataChanged\") {\n            return this.handleAttributeMetadataChangedCommand(command);\n        }\n        else {\n            ClientConnector.LOGGER.error(\"Cannot handle, unknown command \" + command);\n        }\n        return null;\n    }\n\n    handleDeletePresentationModelCommand(serverCommand) {\n        let model = this.clientDolphin.findPresentationModelById(serverCommand.pmId);\n        if (!model)\n            return null;\n        this.clientDolphin.getClientModelStore().deletePresentationModel(model, true);\n        return model;\n    }\n\n    handleCreatePresentationModelCommand(serverCommand) {\n        if (this.clientDolphin.getClientModelStore().containsPresentationModel(serverCommand.pmId)) {\n            throw new Error(\"There already is a presentation model with id \" + serverCommand.pmId + \"  known to the client.\");\n        }\n        let attributes = [];\n        serverCommand.attributes.forEach((attr) => {\n            let clientAttribute = this.clientDolphin.attribute(attr.propertyName, attr.qualifier, attr.value);\n            if (attr.id && attr.id.match(\".*S$\")) {\n                clientAttribute.id = attr.id;\n            }\n            attributes.push(clientAttribute);\n        });\n        let clientPm = new ClientPresentationModel(serverCommand.pmId, serverCommand.pmType);\n        clientPm.addAttributes(attributes);\n        if (serverCommand.clientSideOnly) {\n            clientPm.clientSideOnly = true;\n        }\n        this.clientDolphin.getClientModelStore().add(clientPm, false);\n        this.clientDolphin.updatePresentationModelQualifier(clientPm);\n        return clientPm;\n    }\n\n    handleValueChangedCommand(serverCommand) {\n        let clientAttribute = this.clientDolphin.getClientModelStore().findAttributeById(serverCommand.attributeId);\n        if (!clientAttribute) {\n            ClientConnector.LOGGER.error(\"attribute with id \" + serverCommand.attributeId + \" not found, cannot update to new value \" + serverCommand.newValue);\n            return null;\n        }\n        if (clientAttribute.getValue() === serverCommand.newValue) {\n            return null;\n        }\n        clientAttribute.setValueFromServer(serverCommand.newValue);\n        return null;\n    }\n\n    handleAttributeMetadataChangedCommand(serverCommand) {\n        let clientAttribute = this.clientDolphin.getClientModelStore().findAttributeById(serverCommand.attributeId);\n        if (!clientAttribute)\n            return null;\n        clientAttribute[serverCommand.metadataName] = serverCommand.value;\n        return null;\n    }\n\n    listen() {\n        if (!this.pushEnabled)\n            return;\n        if (this.waiting)\n            return;\n        // todo: how to issue a warning if no pushListener is set?\n        if (!this.currentlySending) {\n            this.doSendNext();\n        }\n    }\n\n    enqueuePushCommand() {\n        let me = this;\n        this.waiting = true;\n        this.commandQueue.push({\n            command: this.pushListener,\n            handler: {\n                onFinished: function () { me.waiting = false; },\n                onFinishedData: null\n            }\n        });\n    }\n\n    release() {\n        if (!this.waiting)\n            return;\n        this.waiting = false;\n        // todo: how to issue a warning if no releaseCommand is set?\n        this.transmitter.signal(this.releaseCommand);\n    }\n}\n\nClientConnector.LOGGER = LoggerFactory.getLogger('ClientConnector');","import EventBus from './eventBus';\nimport { LoggerFactory } from '../logging';\n\nexport default class ClientAttribute {\n\n    constructor(propertyName, qualifier, value) {\n\n        this.propertyName = propertyName;\n        this.id = \"\" + (ClientAttribute.clientAttributeInstanceCount++) + \"C\";\n        this.valueChangeBus = new EventBus();\n        this.qualifierChangeBus = new EventBus();\n        this.setValue(value);\n        this.setQualifier(qualifier);\n    }\n\n    copy() {\n        let result = new ClientAttribute(this.propertyName, this.getQualifier(), this.getValue());\n        return result;\n    }\n\n    setPresentationModel(presentationModel) {\n        if (this.presentationModel) {\n            throw new Error(\"You can not set a presentation model for an attribute that is already bound.\");\n        }\n        this.presentationModel = presentationModel;\n    }\n\n    getPresentationModel() {\n        return this.presentationModel;\n    }\n\n    getValue() {\n        return this.value;\n    }\n\n    setValueFromServer(newValue) {\n        let verifiedValue = ClientAttribute.checkValue(newValue);\n        if (this.value === verifiedValue)\n            return;\n        let oldValue = this.value;\n        this.value = verifiedValue;\n        this.valueChangeBus.trigger({ 'oldValue': oldValue, 'newValue': verifiedValue, 'sendToServer': false });\n    }\n\n    setValue(newValue) {\n        let verifiedValue = ClientAttribute.checkValue(newValue);\n        if (this.value === verifiedValue)\n            return;\n        let oldValue = this.value;\n        this.value = verifiedValue;\n        this.valueChangeBus.trigger({ 'oldValue': oldValue, 'newValue': verifiedValue, 'sendToServer': true });\n    }\n\n    setQualifier(newQualifier) {\n        if (this.qualifier === newQualifier)\n            return;\n        let oldQualifier = this.qualifier;\n        this.qualifier = newQualifier;\n        this.qualifierChangeBus.trigger({ 'oldValue': oldQualifier, 'newValue': newQualifier });\n        this.valueChangeBus.trigger({ \"oldValue\": this.value, \"newValue\": this.value, 'sendToServer': false });\n    }\n\n    getQualifier() {\n        return this.qualifier;\n    }\n\n    onValueChange(eventHandler) {\n        this.valueChangeBus.onEvent(eventHandler);\n        eventHandler({ \"oldValue\": this.value, \"newValue\": this.value, 'sendToServer': false });\n    }\n\n    onQualifierChange(eventHandler) {\n        this.qualifierChangeBus.onEvent(eventHandler);\n    }\n\n    syncWith(sourceAttribute) {\n        if (sourceAttribute) {\n            this.setQualifier(sourceAttribute.getQualifier()); // sequence is important\n            this.setValue(sourceAttribute.value);\n        }\n    }\n\n    static checkValue(value) {\n        if (value == null || typeof value === 'undefined') {\n            return null;\n        }\n        let result = value;\n        if (result instanceof String || result instanceof Boolean || result instanceof Number) {\n            result = value.valueOf();\n        }\n        if (result instanceof ClientAttribute) {\n            ClientAttribute.LOGGER.warn(\"An Attribute may not itself contain an attribute as a value. Assuming you forgot to call value.\");\n            result = this.checkValue(value.value);\n        }\n        let ok = false;\n        if (this.SUPPORTED_VALUE_TYPES.indexOf(typeof result) > -1 || result instanceof Date) {\n            ok = true;\n        }\n        if (!ok) {\n            throw new Error(\"Attribute values of this type are not allowed: \" + typeof value);\n        }\n        return result;\n    }\n\n}\n\nClientAttribute.LOGGER = LoggerFactory.getLogger('ClientAttribute');\nClientAttribute.SUPPORTED_VALUE_TYPES = [\"string\", \"number\", \"boolean\"];\nClientAttribute.clientAttributeInstanceCount = 0;\n","import ClientAttribute from './clientAttribute'\nimport ClientPresentationModel from './clientPresentationModel'\n\nexport default class ClientDolphin {\n\n    constructor() {\n    }\n\n    setClientConnector(clientConnector) {\n        this.clientConnector = clientConnector;\n    }\n\n    getClientConnector() {\n        return this.clientConnector;\n    }\n\n    send(command, onFinished) {\n        this.clientConnector.send(command, onFinished);\n    }\n\n    attribute(propertyName, qualifier, value) {\n        return new ClientAttribute(propertyName, qualifier, value);\n    }\n\n    presentationModel(id, type, ...attributes) {\n        const model = new ClientPresentationModel(id, type);\n        if (attributes && attributes.length > 0) {\n            attributes.forEach((attribute) => {\n                model.addAttribute(attribute);\n            });\n        }\n        this.getClientModelStore().add(model, true);\n        return model;\n    }\n\n    setClientModelStore(clientModelStore) {\n        this.clientModelStore = clientModelStore;\n    }\n\n    getClientModelStore() {\n        return this.clientModelStore;\n    }\n\n    listPresentationModelIds() {\n        return this.getClientModelStore().listPresentationModelIds();\n    }\n\n    listPresentationModels() {\n        return this.getClientModelStore().listPresentationModels();\n    }\n\n    findAllPresentationModelByType(presentationModelType) {\n        return this.getClientModelStore().findAllPresentationModelByType(presentationModelType);\n    }\n\n    getAt(id) {\n        return this.findPresentationModelById(id);\n    }\n\n    findPresentationModelById(id) {\n        return this.getClientModelStore().findPresentationModelById(id);\n    }\n\n    deletePresentationModel(modelToDelete) {\n        this.getClientModelStore().deletePresentationModel(modelToDelete, true);\n    }\n\n    updatePresentationModelQualifier(presentationModel) {\n        presentationModel.getAttributes().forEach(sourceAttribute => {\n            this.updateAttributeQualifier(sourceAttribute);\n        });\n    }\n\n    updateAttributeQualifier(sourceAttribute) {\n        if (!sourceAttribute.getQualifier())\n            return;\n        const attributes = this.getClientModelStore().findAllAttributesByQualifier(sourceAttribute.getQualifier());\n        attributes.forEach(targetAttribute => {\n            targetAttribute.setValue(sourceAttribute.getValue()); // should always have the same value\n        });\n    }\n\n    startPushListening(pushCommand, releaseCommand) {\n        this.clientConnector.setPushListener(pushCommand);\n        this.clientConnector.setReleaseCommand(releaseCommand);\n        this.clientConnector.setPushEnabled(true);\n\n        setTimeout(() => {\n            this.clientConnector.listen();\n        }, 0);\n    }\n\n    stopPushListening() {\n        this.clientConnector.setPushEnabled(false);\n    }\n}","\nexport default class Attribute {\n}\n\nAttribute.QUALIFIER_PROPERTY = \"qualifier\";\nAttribute.VALUE = \"value\";\n","import CreateContextCommand from './impl/createContextCommand';\nimport CreateControllerCommand from './impl/createControllerCommand';\nimport CallActionCommand from './impl/callActionCommand';\nimport DestroyControllerCommand from './impl/destroyControllerCommand';\nimport DestroyContextCommand from './impl/destroyContextCommand';\nimport StartLongPollCommand from './impl/startLongPollCommand';\nimport InterruptLongPollCommand from './impl/interruptLongPollCommand';\nimport CreatePresentationModelCommand from './impl/createPresentationModelCommand';\nimport DeletePresentationModelCommand from './impl/deletePresentationModelCommand';\nimport PresentationModelDeletedCommand from './impl/presentationModelDeletedCommand';\nimport ValueChangedCommand from './impl/valueChangedCommand';\nimport ChangeAttributeMetadataCommand from './impl/changeAttributeMetadataCommand';\nimport AttributeMetadataChangedCommand from './impl/attributeMetadataChangedCommand';\n\nexport default class CommandFactory {\n\n    static createCreateContextCommand() {\n        return new CreateContextCommand();\n    }\n\n    static createCreateControllerCommand(controllerName, parentControllerId) {\n        const command = new CreateControllerCommand();\n        command.init(controllerName, parentControllerId);\n        return command;\n    }\n\n    static createCallActionCommand(controllerid, actionName, params) {\n        const command = new CallActionCommand();\n        command.init(controllerid, actionName, params);\n        return command;\n    }\n\n    static createDestroyControllerCommand(controllerId) {\n        const command = new DestroyControllerCommand();\n        command.init(controllerId);\n        return command;\n    }\n\n    static createDestroyContextCommand() {\n        return new DestroyContextCommand();\n    }\n\n    static createStartLongPollCommand() {\n        return new StartLongPollCommand();\n    }\n\n    static createInterruptLongPollCommand() {\n        return new InterruptLongPollCommand();\n    }\n\n    static createCreatePresentationModelCommand(presentationModel) {\n        const command = new CreatePresentationModelCommand();\n        command.init(presentationModel);\n        return command;\n    }\n\n    static createDeletePresentationModelCommand(pmId) {\n        const command = new DeletePresentationModelCommand();\n        command.init(pmId);\n        return command;\n    }\n\n    static createPresentationModelDeletedCommand(pmId) {\n        let command = new PresentationModelDeletedCommand();\n        command.init(pmId);\n        return command;\n    }\n\n    static createValueChangedCommand(attributeId, newValue) {\n        let command = new ValueChangedCommand();\n        command.init(attributeId, newValue);\n        return command;\n    }\n\n    static createChangeAttributeMetadataCommand(attributeId, metadataName, value) {\n        let command = new ChangeAttributeMetadataCommand();\n        command.init(attributeId, metadataName, value);\n        return command;\n    }\n\n    static createAttributeMetadataChangedCommand(attributeId, metadataName, value) {\n        let command = new AttributeMetadataChangedCommand();\n        command.init(attributeId, metadataName, value);\n        return command;\n    }\n}","import Attribute from './attribute'\nimport EventBus from './eventBus'\nimport CommandFactory from './commands/commandFactory';\nimport {ADDED_TYPE, REMOVED_TYPE} from './constants'\nimport { LoggerFactory } from '../logging';\n\nexport default class ClientModelStore {\n\n    constructor(clientDolphin) {\n\n        this.clientDolphin = clientDolphin;\n        this.presentationModels = new Map();\n        this.presentationModelsPerType = new Map();\n        this.attributesPerId = new Map();\n        this.attributesPerQualifier = new Map();\n        this.modelStoreChangeBus = new EventBus();\n    }\n\n    getClientDolphin() {\n        return this.clientDolphin;\n    }\n\n    registerAttribute(attribute) {\n        this.addAttributeById(attribute);\n        if (attribute.getQualifier()) {\n            this.addAttributeByQualifier(attribute);\n        }\n        // whenever an attribute changes its value, the server needs to be notified\n        // and all other attributes with the same qualifier are given the same value\n        attribute.onValueChange((evt) => {\n            if(evt.newValue !== evt.oldValue && evt.sendToServer === true) {\n                const command = CommandFactory.createValueChangedCommand(attribute.id, evt.newValue);\n                this.clientDolphin.getClientConnector().send(command, null);\n            }\n\n            if (attribute.getQualifier()) {\n                let attrs = this.findAttributesByFilter((attr) => {\n                    return attr !== attribute && attr.getQualifier() === attribute.getQualifier();\n                });\n                attrs.forEach((attr) => {\n                    attr.setValue(attribute.getValue());\n                });\n            }\n\n        });\n        attribute.onQualifierChange((evt) => {\n            this.clientDolphin.getClientConnector().send(CommandFactory.createChangeAttributeMetadataCommand(attribute.id, Attribute.QUALIFIER_PROPERTY, evt.newValue), null);\n        });\n    }\n\n    add(model, sendToServer = true) {\n        if (!model) {\n            return false;\n        }\n        if (this.presentationModels.has(model.id)) {\n            ClientModelStore.LOGGER.error(\"There already is a PM with id \" + model.id);\n        }\n        let added = false;\n        if (!this.presentationModels.has(model.id)) {\n            this.presentationModels.set(model.id, model);\n            this.addPresentationModelByType(model);\n\n            if(sendToServer) {\n                let connector = this.clientDolphin.getClientConnector();\n                connector.send(CommandFactory.createCreatePresentationModelCommand(model), null);\n            }\n\n            model.getAttributes().forEach(attribute => {\n                this.registerAttribute(attribute);\n            });\n            this.modelStoreChangeBus.trigger({ 'eventType': ADDED_TYPE, 'clientPresentationModel': model });\n            added = true;\n        }\n        return added;\n    }\n\n    remove(model) {\n        if (!model) {\n            return false;\n        }\n        let removed = false;\n        if (this.presentationModels.has(model.id)) {\n            this.removePresentationModelByType(model);\n            this.presentationModels.delete(model.id);\n            model.getAttributes().forEach((attribute) => {\n                this.removeAttributeById(attribute);\n                if (attribute.getQualifier()) {\n                    this.removeAttributeByQualifier(attribute);\n                }\n            });\n            this.modelStoreChangeBus.trigger({ 'eventType': REMOVED_TYPE, 'clientPresentationModel': model });\n            removed = true;\n        }\n        return removed;\n    }\n\n    findAttributesByFilter(filter) {\n        let matches = [];\n        this.presentationModels.forEach((model) => {\n            model.getAttributes().forEach((attr) => {\n                if (filter(attr)) {\n                    matches.push(attr);\n                }\n            });\n        });\n        return matches;\n    }\n\n    addPresentationModelByType(model) {\n        if (!model) {\n            return;\n        }\n        let type = model.presentationModelType;\n        if (!type) {\n            return;\n        }\n        let presentationModels = this.presentationModelsPerType.get(type);\n        if (!presentationModels) {\n            presentationModels = [];\n            this.presentationModelsPerType.set(type, presentationModels);\n        }\n        if (!(presentationModels.indexOf(model) > -1)) {\n            presentationModels.push(model);\n        }\n    }\n\n    removePresentationModelByType(model) {\n        if (!model || !(model.presentationModelType)) {\n            return;\n        }\n        let presentationModels = this.presentationModelsPerType.get(model.presentationModelType);\n        if (!presentationModels) {\n            return;\n        }\n        if (presentationModels.length > -1) {\n            presentationModels.splice(presentationModels.indexOf(model), 1);\n        }\n        if (presentationModels.length === 0) {\n            this.presentationModelsPerType.delete(model.presentationModelType);\n        }\n    }\n\n    listPresentationModelIds() {\n        let result = [];\n        let iter = this.presentationModels.keys();\n        let next = iter.next();\n        while (!next.done) {\n            result.push(next.value);\n            next = iter.next();\n        }\n        return result;\n    }\n\n    listPresentationModels() {\n        let result = [];\n        let iter = this.presentationModels.values();\n        let next = iter.next();\n        while (!next.done) {\n            result.push(next.value);\n            next = iter.next();\n        }\n        return result;\n    }\n\n    findPresentationModelById(id) {\n        return this.presentationModels.get(id);\n    }\n\n    findAllPresentationModelByType(type) {\n        if (!type || !this.presentationModelsPerType.has(type)) {\n            return [];\n        }\n        return this.presentationModelsPerType.get(type).slice(0); // slice is used to clone the array\n    }\n\n    deletePresentationModel(model, notify) {\n        if (!model) {\n            return;\n        }\n        if (this.containsPresentationModel(model.id)) {\n            this.remove(model);\n            if (!notify || model.clientSideOnly) {\n                return;\n            }\n            this.clientDolphin.getClientConnector().send(CommandFactory.createPresentationModelDeletedCommand(model.id), null);\n        }\n    }\n\n    containsPresentationModel(id) {\n        return this.presentationModels.has(id);\n    }\n\n    addAttributeById(attribute) {\n        if (!attribute || this.attributesPerId.has(attribute.id)) {\n            return;\n        }\n        this.attributesPerId.set(attribute.id, attribute);\n    }\n\n    removeAttributeById(attribute) {\n        if (!attribute || !this.attributesPerId.has(attribute.id)) {\n            return;\n        }\n        this.attributesPerId.delete(attribute.id);\n    }\n\n    findAttributeById(id) {\n        return this.attributesPerId.get(id);\n    }\n\n    addAttributeByQualifier(attribute) {\n        if (!attribute || !attribute.getQualifier()) {\n            return;\n        }\n        let attributes = this.attributesPerQualifier.get(attribute.getQualifier());\n        if (!attributes) {\n            attributes = [];\n            this.attributesPerQualifier.set(attribute.getQualifier(), attributes);\n        }\n        if (!(attributes.indexOf(attribute) > -1)) {\n            attributes.push(attribute);\n        }\n    }\n\n    removeAttributeByQualifier(attribute) {\n        if (!attribute || !attribute.getQualifier()) {\n            return;\n        }\n        let attributes = this.attributesPerQualifier.get(attribute.getQualifier());\n        if (!attributes) {\n            return;\n        }\n        if (attributes.length > -1) {\n            attributes.splice(attributes.indexOf(attribute), 1);\n        }\n        if (attributes.length === 0) {\n            this.attributesPerQualifier.delete(attribute.getQualifier());\n        }\n    }\n\n    findAllAttributesByQualifier(qualifier) {\n        if (!qualifier || !this.attributesPerQualifier.has(qualifier)) {\n            return [];\n        }\n        return this.attributesPerQualifier.get(qualifier).slice(0); // slice is used to clone the array\n    }\n\n    onModelStoreChange(eventHandler) {\n        this.modelStoreChangeBus.onEvent(eventHandler);\n    }\n\n    onModelStoreChangeForType(presentationModelType, eventHandler) {\n        this.modelStoreChangeBus.onEvent(pmStoreEvent => {\n            if (pmStoreEvent.clientPresentationModel.presentationModelType == presentationModelType) {\n                eventHandler(pmStoreEvent);\n            }\n        });\n    }\n}\n\nClientModelStore.LOGGER = LoggerFactory.getLogger('ClientModelStore');\n\n","export default class NoTransmitter {\n\n    transmit(commands, onDone) {\n        // do nothing special\n        onDone([]);\n    }\n\n    signal() {\n        // do nothing\n    }\n\n    reset() {\n        // do nothing\n    }\n}","import ClientConnector from './clientConnector'\nimport ClientDolphin from './clientDolphin'\nimport ClientModelStore from './clientModelStore'\nimport NoTransmitter from './noTransmitter'\nimport { LoggerFactory } from '../logging';\n\n\nclass DolphinBuilder {\n\n    constructor() {\n        this.slackMS = 300;\n        this.maxBatchSize = 50;\n        this.transmitter = null;\n    }\n\n    withSlackMS(slackMS) {\n        this.slackMS = slackMS;\n        return this;\n    }\n\n    withMaxBatchSize(maxBatchSize) {\n        this.maxBatchSize = maxBatchSize;\n        return this;\n    }\n\n    withTransmitter(transmitter) {\n        this.transmitter = transmitter;\n        return this;\n    }\n\n    build() {\n        const clientDolphin = new ClientDolphin();\n        let transmitter;\n        if (this.transmitter) {\n            transmitter = this.transmitter;\n        } else {\n            transmitter = new NoTransmitter();\n        }\n        clientDolphin.setClientConnector(new ClientConnector(transmitter, clientDolphin, this.slackMS, this.maxBatchSize));\n        clientDolphin.setClientModelStore(new ClientModelStore(clientDolphin));\n        DolphinBuilder.LOGGER.debug(\"Remoting client initialized\", clientDolphin, transmitter);\n        return clientDolphin;\n    }\n}\n\nDolphinBuilder.LOGGER = LoggerFactory.getLogger('DolphinBuilder');\n\nconst dolphinBuilder = new DolphinBuilder();\n\nexport { dolphinBuilder }","import {exists, checkMethod, checkParam} from '../utils';\nimport CommandFactory from './commands/commandFactory';\nimport {ADDED_TYPE, REMOVED_TYPE} from './constants';\n\n\nconst DOLPHIN_BEAN = '@@@ R_BEAN @@@';\nconst ACTION_CALL_BEAN = '@@@ CONTROLLER_ACTION_CALL_BEAN @@@';\nconst HIGHLANDER_BEAN = '@@@ HIGHLANDER_BEAN @@@';\nconst DOLPHIN_LIST_SPLICE = '@R:LS@';\nconst SOURCE_SYSTEM = '@@@ SOURCE_SYSTEM @@@';\nconst SOURCE_SYSTEM_CLIENT = 'client';\nconst SOURCE_SYSTEM_SERVER = 'server';\n\nexport default class Connector{\n\n    constructor(url, dolphin, classRepository, config) {\n        checkMethod('Connector(url, dolphin, classRepository, config)');\n        checkParam(url, 'url');\n        checkParam(dolphin, 'dolphin');\n        checkParam(classRepository, 'classRepository');\n\n        let self = this;\n        this.dolphin = dolphin;\n        this.config = config;\n        this.classRepository = classRepository;\n        this.highlanderPMResolver = function() {};\n        this.highlanderPMPromise = new Promise((resolve) => {\n            self.highlanderPMResolver = resolve;\n        });\n\n        dolphin.getClientModelStore().onModelStoreChange((event) => {\n            let model = event.clientPresentationModel;\n            let sourceSystem = model.findAttributeByPropertyName(SOURCE_SYSTEM);\n            if (exists(sourceSystem) && sourceSystem.value === SOURCE_SYSTEM_SERVER) {\n                if (event.eventType === ADDED_TYPE) {\n                    self.onModelAdded(model);\n                } else if (event.eventType === REMOVED_TYPE) {\n                    self.onModelRemoved(model);\n                }\n            }\n        });\n    }\n    connect() {\n        let that = this;\n            that.dolphin.startPushListening(CommandFactory.createStartLongPollCommand(), CommandFactory.createInterruptLongPollCommand());\n    }\n\n    onModelAdded(model) {\n        checkMethod('Connector.onModelAdded(model)');\n        checkParam(model, 'model');\n\n        var type = model.presentationModelType;\n        switch (type) {\n            case ACTION_CALL_BEAN:\n                // ignore\n                break;\n            case DOLPHIN_BEAN:\n                this.classRepository.registerClass(model);\n                break;\n            case HIGHLANDER_BEAN:\n                this.highlanderPMResolver(model);\n                break;\n            case DOLPHIN_LIST_SPLICE:\n                this.classRepository.spliceListEntry(model);\n                this.dolphin.deletePresentationModel(model);\n                break;\n            default:\n                this.classRepository.load(model);\n                break;\n        }\n    }\n\n    onModelRemoved(model) {\n        checkMethod('Connector.onModelRemoved(model)');\n        checkParam(model, 'model');\n        let type = model.presentationModelType;\n        switch (type) {\n            case DOLPHIN_BEAN:\n                this.classRepository.unregisterClass(model);\n                break;\n            case DOLPHIN_LIST_SPLICE:\n                // do nothing\n                break;\n            default:\n                this.classRepository.unload(model);\n                break;\n        }\n    }\n\n    invoke(command) {\n        checkMethod('Connector.invoke(command)');\n        checkParam(command, 'command');\n\n        var dolphin = this.dolphin;\n        return new Promise((resolve, reject) => {\n            dolphin.send(command, {\n                onFinished: (params) => {\n                    resolve(params);\n                },\n                onError: (reason) => {\n                    reject(reason);\n                } \n            });\n        });\n    }\n\n    getHighlanderPM() {\n        return this.highlanderPMPromise;\n    }\n}\n\nexport { SOURCE_SYSTEM, SOURCE_SYSTEM_CLIENT, SOURCE_SYSTEM_SERVER, ACTION_CALL_BEAN };\n","import {exists, checkMethod, checkParam} from '../utils';\nimport { LoggerFactory } from '../logging';\n\nexport default class BeanManager {\n\n    constructor(classRepository) {\n        checkMethod('BeanManager(classRepository)');\n        checkParam(classRepository, 'classRepository');\n\n        this.classRepository = classRepository;\n        this.addedHandlers = new Map();\n        this.removedHandlers = new Map();\n        this.updatedHandlers = new Map();\n        this.arrayUpdatedHandlers = new Map();\n        this.allAddedHandlers = [];\n        this.allRemovedHandlers = [];\n        this.allUpdatedHandlers = [];\n        this.allArrayUpdatedHandlers = [];\n\n        this._handleBeanAdded = this._handleBeanAdded.bind(this);\n        this._handleBeanRemoved = this._handleBeanRemoved.bind(this);\n        this._handleBeanUpdate = this._handleBeanUpdate.bind(this);\n        this._handleArrayUpdate = this._handleArrayUpdate.bind(this);\n\n        this.classRepository.onBeanAdded(this._handleBeanAdded);\n        this.classRepository.onBeanRemoved(this._handleBeanRemoved);\n        this.classRepository.onBeanUpdate(this._handleBeanUpdate);\n        this.classRepository.onArrayUpdate(this._handleArrayUpdate);\n    }\n\n    _handleBeanAdded(type, bean) {\n        const handlerList = this.addedHandlers.get(type);\n        if (exists(handlerList)) {\n            handlerList.forEach((handler) => {\n                try {\n                    handler(bean);\n                } catch (e) {\n                    BeanManager.LOGGER.error('An exception occurred while calling an onBeanAdded-handler for type', type, e);\n                }\n            });\n        }\n        this.allAddedHandlers.forEach((handler) => {\n            try {\n                handler(bean);\n            } catch (e) {\n                BeanManager.LOGGER.error('An exception occurred while calling a general onBeanAdded-handler', e);\n            }\n        });\n    }\n\n    _handleBeanRemoved(type, bean) {\n        const handlerList = this.removedHandlers.get(type);\n        if (exists(handlerList)) {\n            handlerList.forEach((handler) => {\n                try {\n                    handler(bean);\n                } catch (e) {\n                    BeanManager.LOGGER.error('An exception occurred while calling an onBeanRemoved-handler for type', type, e);\n                }\n            });\n        }\n        this.allRemovedHandlers.forEach((handler) => {\n            try {\n                handler(bean);\n            } catch (e) {\n                BeanManager.LOGGER.error('An exception occurred while calling a general onBeanRemoved-handler', e);\n            }\n        });\n    }\n\n    _handleArrayUpdate(type, bean, propertyName, index, count, newElements) {\n        const handlerList = this.arrayUpdatedHandlers.get(type);\n        if (exists(handlerList)) {\n            handlerList.forEach((handler) => {\n                try {\n                    handler(bean, propertyName, index, count, newElements);\n                } catch (e) {\n                    BeanManager.LOGGER.error('An exception occurred while calling an onArrayUpdate-handler for type', type, e);\n                }\n            });\n        }\n        this.allArrayUpdatedHandlers.forEach((handler) => {\n            try {\n                handler(bean, propertyName, index, count, newElements);\n            } catch (e) {\n                BeanManager.LOGGER.error('An exception occurred while calling a general onArrayUpdate-handler', e);\n            }\n        });\n    }\n\n    _handleBeanUpdate(type, bean, propertyName, newValue, oldValue) {\n        const handlerList = this.updatedHandlers.get(type);\n        if (exists(handlerList)) {\n            handlerList.forEach((handler) => {\n                try {\n                    handler(bean, propertyName, newValue, oldValue);\n                } catch (e) {\n                    BeanManager.LOGGER.error('An exception occurred while calling an onBeanUpdate-handler for type', type, e);\n                }\n            });\n        }\n        this.allUpdatedHandlers.forEach((handler) => {\n            try {\n                handler(bean, propertyName, newValue, oldValue);\n            } catch (e) {\n                BeanManager.LOGGER.error('An exception occurred while calling a general onBeanUpdate-handler', e);\n            }\n        });\n    }\n\n\n    notifyBeanChange(bean, propertyName, newValue) {\n        checkMethod('BeanManager.notifyBeanChange(bean, propertyName, newValue)');\n        checkParam(bean, 'bean');\n        checkParam(propertyName, 'propertyName');\n\n        return this.classRepository.notifyBeanChange(bean, propertyName, newValue);\n    }\n\n\n    notifyArrayChange(bean, propertyName, index, count, removedElements) {\n        checkMethod('BeanManager.notifyArrayChange(bean, propertyName, index, count, removedElements)');\n        checkParam(bean, 'bean');\n        checkParam(propertyName, 'propertyName');\n        checkParam(index, 'index');\n        checkParam(count, 'count');\n        checkParam(removedElements, 'removedElements');\n\n        this.classRepository.notifyArrayChange(bean, propertyName, index, count, removedElements);\n    }\n\n\n    isManaged(bean) {\n        checkMethod('BeanManager.isManaged(bean)');\n        checkParam(bean, 'bean');\n\n        // TODO: Implement dolphin.isManaged() [DP-7]\n        throw new Error(\"Not implemented yet\");\n    }\n\n\n    create(type) {\n        checkMethod('BeanManager.create(type)');\n        checkParam(type, 'type');\n\n        // TODO: Implement dolphin.create() [DP-7]\n        throw new Error(\"Not implemented yet\");\n    }\n\n\n    add(type, bean) {\n        checkMethod('BeanManager.add(type, bean)');\n        checkParam(type, 'type');\n        checkParam(bean, 'bean');\n\n        // TODO: Implement dolphin.add() [DP-7]\n        throw new Error(\"Not implemented yet\");\n    }\n\n\n    addAll(type, collection) {\n        checkMethod('BeanManager.addAll(type, collection)');\n        checkParam(type, 'type');\n        checkParam(collection, 'collection');\n\n        // TODO: Implement dolphin.addAll() [DP-7]\n        throw new Error(\"Not implemented yet\");\n    }\n\n\n    remove(bean) {\n        checkMethod('BeanManager.remove(bean)');\n        checkParam(bean, 'bean');\n\n        // TODO: Implement dolphin.remove() [DP-7]\n        throw new Error(\"Not implemented yet\");\n    }\n\n\n    removeAll(collection) {\n        checkMethod('BeanManager.removeAll(collection)');\n        checkParam(collection, 'collection');\n\n        // TODO: Implement dolphin.removeAll() [DP-7]\n        throw new Error(\"Not implemented yet\");\n    }\n\n\n    removeIf(predicate) {\n        checkMethod('BeanManager.removeIf(predicate)');\n        checkParam(predicate, 'predicate');\n\n        // TODO: Implement dolphin.removeIf() [DP-7]\n        throw new Error(\"Not implemented yet\");\n    }\n\n\n    onAdded(type, eventHandler) {\n        let self = this;\n        if (!exists(eventHandler)) {\n            eventHandler = type;\n            checkMethod('BeanManager.onAdded(eventHandler)');\n            checkParam(eventHandler, 'eventHandler');\n\n            this.allAddedHandlers = this.allAddedHandlers.concat(eventHandler);\n            return {\n                unsubscribe: () => {\n                    self.allAddedHandlers = self.allAddedHandlers.filter((value) => {\n                        return value !== eventHandler;\n                    });\n                }\n            };\n        } else {\n            checkMethod('BeanManager.onAdded(type, eventHandler)');\n            checkParam(type, 'type');\n            checkParam(eventHandler, 'eventHandler');\n\n            let handlerList = this.addedHandlers.get(type);\n            if (!exists(handlerList)) {\n                handlerList = [];\n            }\n            this.addedHandlers.set(type, handlerList.concat(eventHandler));\n            return {\n                unsubscribe: () => {\n                    const handlerList = self.addedHandlers.get(type);\n                    if (exists(handlerList)) {                   \n                        self.addedHandlers.set(type, handlerList.filter((value) => {\n                            return value !== eventHandler;\n                        }));\n                    }\n                }\n            };\n        }\n    }\n\n\n    onRemoved(type, eventHandler) {\n        let self = this;\n        if (!exists(eventHandler)) {\n            eventHandler = type;\n            checkMethod('BeanManager.onRemoved(eventHandler)');\n            checkParam(eventHandler, 'eventHandler');\n\n            this.allRemovedHandlers = this.allRemovedHandlers.concat(eventHandler);\n            return {\n                unsubscribe: () => {\n                    self.allRemovedHandlers = self.allRemovedHandlers.filter((value) => {\n                        return value !== eventHandler;\n                    });\n                }\n            };\n        } else {\n            checkMethod('BeanManager.onRemoved(type, eventHandler)');\n            checkParam(type, 'type');\n            checkParam(eventHandler, 'eventHandler');\n\n            let handlerList = this.removedHandlers.get(type);\n            if (!exists(handlerList)) {\n                handlerList = [];\n            }\n            this.removedHandlers.set(type, handlerList.concat(eventHandler));\n            return {\n                unsubscribe: () => {\n                    const handlerList = self.removedHandlers.get(type);\n                    if (exists(handlerList)) {\n                        self.removedHandlers.set(type, handlerList.filter((value) => {\n                            return value !== eventHandler;\n                        }));\n                    }\n                }\n            };\n        }\n    }\n\n\n    onBeanUpdate(type, eventHandler) {\n        let self = this;\n        if (!exists(eventHandler)) {\n            eventHandler = type;\n            checkMethod('BeanManager.onBeanUpdate(eventHandler)');\n            checkParam(eventHandler, 'eventHandler');\n\n            this.allUpdatedHandlers = this.allUpdatedHandlers.concat(eventHandler);\n            return {\n                unsubscribe: () => {\n                    self.allUpdatedHandlers = self.allUpdatedHandlers.filter((value) => {\n                        return value !== eventHandler;\n                    });\n                }\n            };\n        } else {\n            checkMethod('BeanManager.onBeanUpdate(type, eventHandler)');\n            checkParam(type, 'type');\n            checkParam(eventHandler, 'eventHandler');\n\n            let handlerList = this.updatedHandlers.get(type);\n            if (!exists(handlerList)) {\n                handlerList = [];\n            }\n            this.updatedHandlers.set(type, handlerList.concat(eventHandler));\n            return {\n                unsubscribe: () => {\n                    let handlerList = self.updatedHandlers.get(type);\n                    if (exists(handlerList)) {\n                        self.updatedHandlers.set(type, handlerList.filter((value) => {\n                            return value !== eventHandler;\n                        }));\n                    }\n                }\n            };\n        }\n    }\n\n    onArrayUpdate(type, eventHandler) {\n        let self = this;\n        if (!exists(eventHandler)) {\n            eventHandler = type;\n            checkMethod('BeanManager.onArrayUpdate(eventHandler)');\n            checkParam(eventHandler, 'eventHandler');\n\n            this.allArrayUpdatedHandlers = this.allArrayUpdatedHandlers.concat(eventHandler);\n            return {\n                unsubscribe: () => {\n                    self.allArrayUpdatedHandlers = self.allArrayUpdatedHandlers.filter((value) => {\n                        return value !== eventHandler;\n                    });\n                }\n            };\n        } else {\n            checkMethod('BeanManager.onArrayUpdate(type, eventHandler)');\n            checkParam(type, 'type');\n            checkParam(eventHandler, 'eventHandler');\n\n            let handlerList = this.arrayUpdatedHandlers.get(type);\n            if (!exists(handlerList)) {\n                handlerList = [];\n            }\n            this.arrayUpdatedHandlers.set(type, handlerList.concat(eventHandler));\n            return {\n                unsubscribe: () => {\n                    let handlerList = self.arrayUpdatedHandlers.get(type);\n                    if (exists(handlerList)) {\n                        self.arrayUpdatedHandlers.set(type, handlerList.filter((value) => {\n                            return value !== eventHandler;\n                        }));\n                    }\n                }\n            };\n        }\n    }\n}\n\nBeanManager.LOGGER = LoggerFactory.getLogger('BeanManager');\n","import * as consts from './constants';\nimport {exists, checkMethod, checkParam} from '../utils';\nimport { LoggerFactory } from '../logging';\n\nclass ClassRepository {\n\n    constructor(dolphin) {\n        checkMethod('ClassRepository(dolphin)');\n        checkParam(dolphin, 'dolphin');\n\n        this.dolphin = dolphin;\n        this.classes = new Map();\n        this.beanFromDolphin = new Map();\n        this.beanToDolphin = new Map();\n        this.classInfos = new Map();\n        this.beanAddedHandlers = [];\n        this.beanRemovedHandlers = [];\n        this.propertyUpdateHandlers = [];\n        this.arrayUpdateHandlers = [];\n        this.blocked = null;\n    }\n\n    sendListSplice(classRepository, modelId, propertyName, from, to, newElements) {\n        let dolphin = classRepository.dolphin;\n        let model = dolphin.findPresentationModelById(modelId);\n        if (exists(model)) {\n            let classInfo = classRepository.classes.get(model.presentationModelType);\n            let type = classInfo[propertyName];\n            if (exists(type)) {\n\n                let attributes = [\n                    dolphin.attribute('@@@ SOURCE_SYSTEM @@@', null, 'client'),\n                    dolphin.attribute('source', null, modelId),\n                    dolphin.attribute('attribute', null, propertyName),\n                    dolphin.attribute('from', null, from),\n                    dolphin.attribute('to', null, to),\n                    dolphin.attribute('count', null, newElements.length)\n                ];\n                newElements.forEach(function (element, index) {\n                    attributes.push(dolphin.attribute(index.toString(), null, ClassRepository.toDolphin(classRepository, type, element)));\n                });\n                dolphin.presentationModel.apply(dolphin, [null, '@DP:LS@'].concat(attributes));\n            }\n        }\n    }\n\n    validateList(classRepository, type, bean, propertyName) {\n        let list = bean[propertyName];\n        if (!exists(list)) {\n            classRepository.propertyUpdateHandlers.forEach(function (handler) {\n                try {\n                    handler(type, bean, propertyName, [], undefined);\n                } catch (e) {\n                    ClassRepository.LOGGER.error('An exception occurred while calling an onBeanUpdate-handler', e);\n                }\n            });\n        }\n    }\n\n    block(bean, propertyName) {\n        if (exists(this.blocked)) {\n            throw new Error('Trying to create a block while another block exists');\n        }\n        this.blocked = {\n            bean: bean,\n            propertyName: propertyName\n        };\n    }\n\n    isBlocked(bean, propertyName) {\n        return exists(this.blocked) && this.blocked.bean === bean && this.blocked.propertyName === propertyName;\n    }\n\n    unblock() {\n        this.blocked = null;\n    }\n\n    notifyBeanChange(bean, propertyName, newValue) {\n        checkMethod('ClassRepository.notifyBeanChange(bean, propertyName, newValue)');\n        checkParam(bean, 'bean');\n        checkParam(propertyName, 'propertyName');\n\n        let modelId = this.beanToDolphin.get(bean);\n        if (exists(modelId)) {\n            let model = this.dolphin.findPresentationModelById(modelId);\n            if (exists(model)) {\n                let classInfo = this.classes.get(model.presentationModelType);\n                let type = classInfo[propertyName];\n                let attribute = model.findAttributeByPropertyName(propertyName);\n                if (exists(type) && exists(attribute)) {\n                    let oldValue = attribute.getValue();\n                    attribute.setValue(ClassRepository.toDolphin(this, type, newValue));\n                    return ClassRepository.fromDolphin(this, type, oldValue);\n                }\n            }\n        }\n    }\n\n    notifyArrayChange(bean, propertyName, index, count, removedElements) {\n        checkMethod('ClassRepository.notifyArrayChange(bean, propertyName, index, count, removedElements)');\n        checkParam(bean, 'bean');\n        checkParam(propertyName, 'propertyName');\n        checkParam(index, 'index');\n        checkParam(count, 'count');\n        checkParam(removedElements, 'removedElements');\n\n        if (this.isBlocked(bean, propertyName)) {\n            return;\n        }\n        let modelId = this.beanToDolphin.get(bean);\n        let array = bean[propertyName];\n        if (exists(modelId) && exists(array)) {\n            let removedElementsCount = Array.isArray(removedElements) ? removedElements.length : 0;\n            this.sendListSplice(this, modelId, propertyName, index, index + removedElementsCount, array.slice(index, index + count));\n        }\n    }\n\n    onBeanAdded(handler) {\n        checkMethod('ClassRepository.onBeanAdded(handler)');\n        checkParam(handler, 'handler');\n        this.beanAddedHandlers.push(handler);\n    }\n\n    onBeanRemoved(handler) {\n        checkMethod('ClassRepository.onBeanRemoved(handler)');\n        checkParam(handler, 'handler');\n        this.beanRemovedHandlers.push(handler);\n    }\n\n    onBeanUpdate(handler) {\n        checkMethod('ClassRepository.onBeanUpdate(handler)');\n        checkParam(handler, 'handler');\n        this.propertyUpdateHandlers.push(handler);\n    }\n\n    onArrayUpdate(handler) {\n        checkMethod('ClassRepository.onArrayUpdate(handler)');\n        checkParam(handler, 'handler');\n        this.arrayUpdateHandlers.push(handler);\n    }\n\n    registerClass(model) {\n        checkMethod('ClassRepository.registerClass(model)');\n        checkParam(model, 'model');\n\n        if (this.classes.has(model.id)) {\n            return;\n        }\n\n        let classInfo = {};\n        model.attributes.filter(function (attribute) {\n            return attribute.propertyName.search(/^@/) < 0;\n        }).forEach(function (attribute) {\n            classInfo[attribute.propertyName] = attribute.value;\n        });\n        this.classes.set(model.id, classInfo);\n    }\n\n    unregisterClass(model) {\n        checkMethod('ClassRepository.unregisterClass(model)');\n        checkParam(model, 'model');\n        this.classes['delete'](model.id);\n    }\n\n    load(model) {\n        checkMethod('ClassRepository.load(model)');\n        checkParam(model, 'model');\n\n        let self = this;\n        let classInfo = this.classes.get(model.presentationModelType);\n        let bean = {};\n        model.attributes.filter(function (attribute) {\n            return (attribute.propertyName.search(/^@/) < 0);\n        }).forEach(function (attribute) {\n            bean[attribute.propertyName] = null;\n            attribute.onValueChange(function (event) {\n                if (event.oldValue !== event.newValue) {\n                    let oldValue = ClassRepository.fromDolphin(self, classInfo[attribute.propertyName], event.oldValue);\n                    let newValue = ClassRepository.fromDolphin(self, classInfo[attribute.propertyName], event.newValue);\n                    self.propertyUpdateHandlers.forEach((handler) => {\n                        try {\n                            handler(model.presentationModelType, bean, attribute.propertyName, newValue, oldValue);\n                        } catch (e) {\n                            ClassRepository.LOGGER.error('An exception occurred while calling an onBeanUpdate-handler', e);\n                        }\n                    });\n                }\n            });\n        });\n        this.beanFromDolphin.set(model.id, bean);\n        this.beanToDolphin.set(bean, model.id);\n        this.classInfos.set(model.id, classInfo);\n        this.beanAddedHandlers.forEach((handler) => {\n            try {\n                handler(model.presentationModelType, bean);\n            } catch (e) {\n                ClassRepository.LOGGER.error('An exception occurred while calling an onBeanAdded-handler', e);\n            }\n        });\n        return bean;\n    }\n\n    unload(model) {\n        checkMethod('ClassRepository.unload(model)');\n        checkParam(model, 'model');\n\n        let bean = this.beanFromDolphin.get(model.id);\n        this.beanFromDolphin['delete'](model.id);\n        this.beanToDolphin['delete'](bean);\n        this.classInfos['delete'](model.id);\n        if (exists(bean)) {\n            this.beanRemovedHandlers.forEach((handler) => {\n                try {\n                    handler(model.presentationModelType, bean);\n                } catch (e) {\n                    ClassRepository.LOGGER.error('An exception occurred while calling an onBeanRemoved-handler', e);\n                }\n            });\n        }\n        return bean;\n    }\n\n    spliceListEntry(model) {\n        checkMethod('ClassRepository.spliceListEntry(model)');\n        checkParam(model, 'model');\n\n        let source = model.findAttributeByPropertyName('source');\n        let attribute = model.findAttributeByPropertyName('attribute');\n        let from = model.findAttributeByPropertyName('from');\n        let to = model.findAttributeByPropertyName('to');\n        let count = model.findAttributeByPropertyName('count');\n\n        if (exists(source) && exists(attribute) && exists(from) && exists(to) && exists(count)) {\n            let classInfo = this.classInfos.get(source.value);\n            let bean = this.beanFromDolphin.get(source.value);\n            if (exists(bean) && exists(classInfo)) {\n                let type = model.presentationModelType;\n                //var entry = fromDolphin(this, classInfo[attribute.value], element.value);\n                this.validateList(this, type, bean, attribute.value);\n                let newElements = [],\n                    element = null;\n                for (let i = 0; i < count.value; i++) {\n                    element = model.findAttributeByPropertyName(i.toString());\n                    if (!exists(element)) {\n                        throw new Error(\"Invalid list modification update received\");\n                    }\n                    newElements.push(ClassRepository.fromDolphin(this, classInfo[attribute.value], element.value));\n                }\n                try {\n                    this.block(bean, attribute.value);\n                    this.arrayUpdateHandlers.forEach((handler) => {\n                        try {\n                            handler(type, bean, attribute.value, from.value, to.value - from.value, newElements);\n                        } catch (e) {\n                            ClassRepository.LOGGER.error('An exception occurred while calling an onArrayUpdate-handler', e);\n                        }\n                    });\n                } finally {\n                    this.unblock();\n                }\n            } else {\n                throw new Error(\"Invalid list modification update received. Source bean unknown.\");\n            }\n        } else {\n            throw new Error(\"Invalid list modification update received\");\n        }\n    }\n\n    mapParamToDolphin(param) {\n        if (!exists(param)) {\n            return param;\n        }\n        let type = typeof param;\n        if (type === 'object') {\n            if (param instanceof Date) {\n                return param.toISOString();\n            } else {\n                let value = this.beanToDolphin.get(param);\n                if (exists(value)) {\n                    return value;\n                }\n                throw new TypeError(\"Only managed remoting beans can be used\");\n            }\n        }\n        if (type === 'string' || type === 'number' || type === 'boolean') {\n            return param;\n        }\n        throw new TypeError(\"Only managed remoting beans and primitive types can be used\");\n    }\n\n    mapDolphinToBean(value) {\n        return ClassRepository.fromDolphin(this, consts.REMOTING_BEAN, value);\n    }\n}\n\nClassRepository.fixType = function(type, value) {\n    switch (type) {\n        case consts.BYTE:\n        case consts.SHORT:\n        case consts.INT:\n        case consts.LONG:\n            return parseInt(value);\n        case consts.FLOAT:\n        case consts.DOUBLE:\n            return parseFloat(value);\n        case consts.BOOLEAN:\n            return 'true' === String(value).toLowerCase();\n        case consts.STRING:\n        case consts.ENUM:\n            return String(value);\n        default:\n            return value;\n    }\n};\n\nClassRepository.fromDolphin = function(classRepository, type, value) {\n    if (!exists(value)) {\n        return null;\n    }\n    switch (type) {\n        case consts.REMOTING_BEAN:\n            return classRepository.beanFromDolphin.get(String(value));\n        case consts.DATE:\n            return new Date(String(value));\n        case consts.CALENDAR:\n            return new Date(String(value));\n        case consts.LOCAL_DATE_FIELD_TYPE:\n            return new Date(String(value));\n        case consts.LOCAL_DATE_TIME_FIELD_TYPE:\n            return new Date(String(value));\n        case consts.ZONED_DATE_TIME_FIELD_TYPE:\n            return new Date(String(value));\n        default:\n            return ClassRepository.fixType(type, value);\n    }\n};\n\nClassRepository.toDolphin = function(classRepository, type, value) {\n    if (!exists(value)) {\n        return null;\n    }\n    switch (type) {\n        case consts.REMOTING_BEAN:\n            return classRepository.beanToDolphin.get(value);\n        case consts.DATE:\n            return value instanceof Date ? value.toISOString() : value;\n        case consts.CALENDAR:\n            return value instanceof Date ? value.toISOString() : value;\n        case consts.LOCAL_DATE_FIELD_TYPE:\n            return value instanceof Date ? value.toISOString() : value;\n        case consts.LOCAL_DATE_TIME_FIELD_TYPE:\n            return value instanceof Date ? value.toISOString() : value;\n        case consts.ZONED_DATE_TIME_FIELD_TYPE:\n            return value instanceof Date ? value.toISOString() : value;\n        default:\n            return ClassRepository.fixType(type, value);\n    }\n};\n\nClassRepository.LOGGER = LoggerFactory.getLogger('ClassRepository');\n\nexport default ClassRepository;\n","import {checkMethod, checkParam} from '../utils';\nimport { LoggerFactory } from '../logging';\n\nexport default class ControllerProxy {\n\n    constructor(controllerId, model, manager){\n        checkMethod('ControllerProxy(controllerId, model, manager)');\n        checkParam(controllerId, 'controllerId');\n        checkParam(model, 'model');\n        checkParam(manager, 'manager');\n\n        this.controllerId = controllerId;\n        this.model = model;\n        this.manager = manager;\n        this.destroyed = false;\n        this.onDestroyedHandlers = new Set();\n    }\n\n    getModel() {\n        return this.model;\n    }\n\n    getId() {\n        return this.controllerId;\n    }\n\n    invoke(name, params){\n        checkMethod('ControllerProxy.invoke(name, params)');\n        checkParam(name, 'name');\n\n        if (this.destroyed) {\n            throw new Error('The controller was already destroyed');\n        }\n        return this.manager.invokeAction(this.controllerId, name, params);\n    }\n\n    createController(name) {\n        return this.manager._createController(name, this.getId());\n    }\n\n    destroy(){\n        if (this.destroyed) {\n            throw new Error('The controller was already destroyed');\n        }\n        this.destroyed = true;\n        this.onDestroyedHandlers.forEach((handler) => {\n            try {\n                handler(this);\n            } catch(e) {\n                ControllerProxy.LOGGER.error('An exception occurred while calling an onDestroyed-handler', e);\n            }\n        }, this);\n        return this.manager.destroyController(this);\n    }\n\n    onDestroyed(handler){\n        checkMethod('ControllerProxy.onDestroyed(handler)');\n        checkParam(handler, 'handler');\n\n        let self = this;\n        this.onDestroyedHandlers.add(handler);\n        return {\n            unsubscribe: () => {\n                self.onDestroyedHandlers.delete(handler);\n            }\n        };\n    }\n}\n\nControllerProxy.LOGGER = LoggerFactory.getLogger('ControllerProxy');\n","import {exists, checkMethod, checkParam} from '../utils';\n\nimport ControllerProxy from './controllerProxy.js';\n\nimport CommandFactory from './commands/commandFactory.js';\n\n\nimport { SOURCE_SYSTEM } from './connector.js';\nimport { SOURCE_SYSTEM_CLIENT } from './connector.js';\nimport { ACTION_CALL_BEAN } from './connector.js';\n\nconst CONTROLLER_ID = 'controllerId';\nconst MODEL = 'model';\nconst ERROR_CODE = 'errorCode';\n\nexport default class ControllerManager {\n\n    constructor(dolphin, classRepository, connector) {\n        checkMethod('ControllerManager(dolphin, classRepository, connector)');\n        checkParam(dolphin, 'dolphin');\n        checkParam(classRepository, 'classRepository');\n        checkParam(connector, 'connector');\n\n        this.dolphin = dolphin;\n        this.classRepository = classRepository;\n        this.connector = connector;\n        this.controllers = new Set();\n    }\n\n    createController(name) {\n        return this._createController(name, null);\n    }\n\n    _createController(name, parentControllerId) {\n        checkMethod('ControllerManager.createController(name)');\n        checkParam(name, 'name');\n\n        let self = this;\n\n        return new Promise((resolve, reject) => {\n            self.connector.getHighlanderPM().then((highlanderPM) => {\n                const MSG_ERROR_CREATING_CONTROLLER = 'Error creating controller: ';\n\n                self.connector.invoke(CommandFactory.createCreateControllerCommand(name, parentControllerId)).then(() => {\n                    let controllerId;\n\n                    self.getValueWithRetry(\n                            () => highlanderPM.findAttributeByPropertyName(CONTROLLER_ID).getValue(),\n                            'Could not get an controllerID from highlanderPM.'\n                        ).then((ctrlId) => {\n                            controllerId = ctrlId;\n                            return self.getValueWithRetry(\n                                () => highlanderPM.findAttributeByPropertyName(MODEL).getValue(),\n                                'Could not get an modelID from highlanderPM.'\n                            );\n                        })\n                        .then((modelId) => {\n                            return self.getValueWithRetry(\n                                () => self.classRepository.mapDolphinToBean(modelId),\n                                'Could not get an model from classRepository for ID: ' + modelId\n                            );\n                        })\n                        .then((model) => {\n                            try {\n                                const controller = new ControllerProxy(controllerId, model, self);\n                                self.controllers.add(controller);\n                                resolve(controller);\n                            } catch (e) {\n                                reject(MSG_ERROR_CREATING_CONTROLLER + e);\n                            }\n                        }).catch((error) => {\n                            reject(MSG_ERROR_CREATING_CONTROLLER + error);\n                        });\n                }).catch((error) => {\n                    reject(MSG_ERROR_CREATING_CONTROLLER + error);\n                });\n            });\n        });\n    }\n\n\n    getValueWithRetry(getValueCall, errorMessage) {\n        return new Promise((resolve, reject) => {\n            const RETRIES = 1000;\n            const RETRY_TIME = 5;\n            let i = 0;\n            const intervalID = setInterval(() => {\n                let value = getValueCall();\n                \n                if (!(typeof value !== 'undefined' && value !== null)) {\n                    i++;\n                    if (i >= RETRIES) {\n                        clearInterval(intervalID);\n                        reject(errorMessage + \" after \" + i + \" retries.\");\n                    }\n                } else {\n                    clearInterval(intervalID);\n                    resolve(value);\n                }\n            }, RETRY_TIME);\n        });\n    }\n\n    invokeAction(controllerId, actionName, params) {\n        checkMethod('ControllerManager.invokeAction(controllerId, actionName, params)');\n        checkParam(controllerId, 'controllerId');\n        checkParam(actionName, 'actionName');\n\n        let self = this;\n        return new Promise((resolve, reject) => {\n\n            let attributes = [\n                self.dolphin.attribute(SOURCE_SYSTEM, null, SOURCE_SYSTEM_CLIENT),\n                self.dolphin.attribute(ERROR_CODE)\n            ];\n\n            let pm = self.dolphin.presentationModel.apply(self.dolphin, [null, ACTION_CALL_BEAN].concat(attributes));\n\n            let actionParams = [];\n            if (exists(params)) {\n                for (var param in params) {\n                    if (params.hasOwnProperty(param)) {\n                        let value = self.classRepository.mapParamToDolphin(params[param]);\n                        actionParams.push({\n                            name: param,\n                            value: value\n                        });\n                    }\n                }\n            }\n\n            self.connector.invoke(CommandFactory.createCallActionCommand(controllerId, actionName, actionParams)).then(() => {\n                let isError = pm.findAttributeByPropertyName(ERROR_CODE).getValue();\n                if (isError) {\n                    reject(new Error(\"Server side ControllerAction \" + actionName + \" caused an error. Please see server log for details.\"));\n                } else {\n                    resolve();\n                }\n                self.dolphin.deletePresentationModel(pm);\n            }).catch(reject);\n        });\n    }\n\n    destroyController(controller) {\n        checkMethod('ControllerManager.destroyController(controller)');\n        checkParam(controller, 'controller');\n\n        let self = this;\n        return new Promise((resolve, reject) => {\n            self.connector.getHighlanderPM().then((highlanderPM) => {\n                self.controllers.delete(controller);\n                highlanderPM.findAttributeByPropertyName(CONTROLLER_ID).setValue(controller.controllerId);\n                self.connector.invoke(CommandFactory.createDestroyControllerCommand(controller.getId())).then(resolve).catch(reject);\n            });\n        });\n    }\n\n    destroy() {\n        let controllersCopy = this.controllers;\n        let promises = [];\n        this.controllers = new Set();\n        controllersCopy.forEach((controller) => {\n            try {\n                promises.push(controller.destroy());\n            } catch (e) {\n                // ignore\n            }\n        });\n        return Promise.all(promises);\n    }\n}\n","import Emitter from 'emitter-component';\nimport CommandFactory from './commands/commandFactory';\nimport {exists, checkMethod, checkParam} from '../utils';\n\nexport default class ClientContext{\n\n    constructor(dolphin, beanManager, controllerManager, connector){\n        checkMethod('ClientContext(dolphin, beanManager, controllerManager, connector)');\n        checkParam(dolphin, 'dolphin');\n        checkParam(beanManager, 'beanManager');\n        checkParam(controllerManager, 'controllerManager');\n        checkParam(connector, 'connector');\n\n        this.dolphin = dolphin;\n        this.beanManager = beanManager;\n        this._controllerManager = controllerManager;\n        this._connector = connector;\n        this.connectionPromise = null;\n        this.isConnected = false;\n    }\n\n    connect(){\n        let self = this;\n        this.connectionPromise = new Promise((resolve, reject) => {\n            self._connector.connect();\n            self._connector.invoke(CommandFactory.createCreateContextCommand()).then(() => {\n                self.isConnected = true;\n                resolve();\n            }).catch(reject);\n        });\n        return this.connectionPromise;\n    }\n\n    onConnect(){\n        if(exists(this.connectionPromise)){\n            if(!this.isConnected){\n                return this.connectionPromise;\n            }else{\n                return new Promise((resolve) => {\n                    resolve();\n                });\n            }\n        }else{\n            return this.connect();\n        }\n    }\n\n    createController(name){\n        checkMethod('ClientContext.createController(name)');\n        checkParam(name, 'name');\n\n        return this._controllerManager.createController(name);\n    }\n\n    disconnect(){\n        let self = this;\n        this.dolphin.stopPushListening();\n        return new Promise((resolve) => {\n            self._controllerManager.destroy().then(() => {\n                self._connector.invoke(CommandFactory.createDestroyContextCommand());\n                self.dolphin = null;\n                self.beanManager = null;\n                self._controllerManager = null;\n                self._connector = null;\n                resolve();\n            });\n        });\n    }\n}\n\nEmitter(ClientContext.prototype);","export class DolphinRemotingError extends Error {\n  constructor(message = 'Remoting Error', detail) {\n    super(message);\n    this.detail = detail || undefined;\n  }\n}\n\nexport class DolphinSessionError extends Error {\n  constructor(message = 'Session Error') {\n    super(message);\n  }\n}\n\nexport class HttpResponseError extends Error {\n  constructor(message = 'Http Response Error') {\n    super(message);\n  }\n}\n\nexport class HttpNetworkError extends Error {\n    constructor(message = 'Http Network Error') {\n        super(message);\n    }\n}","import { LoggerFactory } from '../logging';\n\nexport default class RemotingErrorHandler {\n\n    onError(error) {\n        RemotingErrorHandler.LOGGER.error(error);\n    }\n\n}\n\nRemotingErrorHandler.LOGGER = LoggerFactory.getLogger('RemotingErrorHandler');","import Emitter from 'emitter-component';\n\n\nimport { exists } from '../utils';\nimport { DolphinRemotingError, DolphinSessionError } from './errors';\nimport Codec from './commands/codec';\nimport RemotingErrorHandler from './remotingErrorHandler';\nimport { LoggerFactory, LogLevel } from '../logging';\nimport {VALUE_CHANGED_COMMAND_ID, START_LONG_POLL_COMMAND_ID} from './commands/commandConstants';\n\nconst DOLPHIN_SESSION_TIMEOUT = 408;\n\nexport default class PlatformHttpTransmitter {\n\n    constructor(url, config, client) {\n        this.url = url;\n        this.config = config;\n        this.client = client;\n        this.headersInfo = exists(config) ? config.headersInfo : null;\n        this.failed_attempt = 0;\n\n        const connectionConfig =  this._connectionConfig();\n        this.maxRetry = exists(connectionConfig) && exists(connectionConfig.maxRetry)?connectionConfig.maxRetry: 3;\n        this.timeout = exists(connectionConfig) && exists(connectionConfig.timeout)?connectionConfig.timeout: 5000;\n    }\n\n    _connectionConfig() {\n        return exists(this.config) ? this.config.connection : null;\n    }\n\n    _handleError(reject, error) {\n        const connectionConfig =  this._connectionConfig();\n        let errorHandlers = exists(connectionConfig) && exists(connectionConfig.errorHandlers)?connectionConfig.errorHandlers: [new RemotingErrorHandler()];\n        errorHandlers.forEach(function(handler) {\n            handler.onError(error);\n        });\n        reject(error);\n    }\n\n    _send(commands) {\n        const self = this;\n        return new Promise((resolve, reject) => {\n            if (this.client) {\n                const encodedCommands = Codec.encode(commands);\n\n                if (PlatformHttpTransmitter.LOGGER.isLogLevelUseable(LogLevel.DEBUG) && !PlatformHttpTransmitter.LOGGER.isLogLevelUseable(LogLevel.TRACE)) {\n                    for (let i = 0; i < commands.length; i++) {\n                        let command = commands[i];\n                        if (command.id === VALUE_CHANGED_COMMAND_ID) {\n                            PlatformHttpTransmitter.LOGGER.debug('send', command, encodedCommands);\n                        }\n                    }\n                }\n\n                const useWorker = commands.length === 1 && commands[0].id === START_LONG_POLL_COMMAND_ID;\n                const httpClient = this.client.getService('HttpClient');\n                if (httpClient && self.failed_attempt <= self.maxRetry) {\n                    httpClient.post(self.url)\n                    .withHeadersInfo(this.headersInfo)\n                    .withContent(encodedCommands)\n                    .readString()\n                    .execute(useWorker)\n                    .then((response) => {\n                        resolve(response.content);\n                    })\n                    .catch((exception) => {\n                        const status = exception.getStatus();\n                        self.failed_attempt += 1;\n                        if (status === DOLPHIN_SESSION_TIMEOUT) {\n                            self._handleError(reject, new DolphinSessionError('PlatformHttpTransmitter: Session Timeout'));\n                        } else {\n                            self._handleError(reject, exception);\n                        }\n                    });\n                } else {\n                    //TODO handle failure\n                    PlatformHttpTransmitter.LOGGER.error('Cannot reach the sever');\n                }\n            } else {\n                PlatformHttpTransmitter.LOGGER.error('No Rico client found!');\n            }\n        });\n    }\n\n    transmit(commands, onDone, onError) {\n        this._send(commands)\n            .then(responseText => {\n                if (responseText.trim().length > 0) {\n                    try {\n                        const responseCommands = Codec.decode(responseText);\n                        onDone(responseCommands);\n                    } catch (err) {\n                        const errorMsg = 'PlatformHttpTransmitter: Parse error: (Incorrect response = ' + responseText + ')';\n                        this.emit('error', new DolphinRemotingError(errorMsg));\n                        onError(errorMsg);\n                    }\n                } else {\n                    const errorMsg = 'PlatformHttpTransmitter: Empty response';\n                    this.emit('error', new DolphinRemotingError(errorMsg));\n                    onError(errorMsg);\n                }\n            })\n            .catch(error => {\n                this.emit('error', error);\n                onError(error);\n            });\n    }\n\n    signal(command) {\n        this._send([command])\n            .catch(error => this.emit('error', error));\n    }\n}\n\nPlatformHttpTransmitter.LOGGER = LoggerFactory.getLogger('PlatformHttpTransmitter');\n\nEmitter(PlatformHttpTransmitter.prototype);\n","import { dolphinBuilder } from './dolphinBuilder';\nimport { checkMethod, checkParam } from '../utils';\nimport { LoggerFactory } from '../logging';\nimport Connector from './connector';\nimport BeanManager from './beanManager';\nimport ClassRepository from './classRepository';\nimport ControllerManager from './controllerManager';\nimport ClientContext from './clientContext';\nimport PlatformHttpTransmitter from './platformHttpTransmitter';\n\nclass ClientContextFactory {\n\n    constructor(client) {\n        this.client = client;\n        if (!client && ClientContextFactory.legecyClientSupport) {\n            ClientContextFactory.LOGGER.warn('Legecy support used.');\n            this.client = ClientContextFactory.legecyClientSupport;\n        }\n    }\n\n    create(url, config){\n        checkMethod('connect(url, config)');\n        checkParam(url, 'url');\n        ClientContextFactory.LOGGER.debug('Creating client context', url, config);\n\n        const transmitter = new PlatformHttpTransmitter(url, config, this.client);\n        transmitter.on('error', function (error) {\n            clientContext.emit('error', error);\n        });\n\n        const dolphin = dolphinBuilder\n            .withTransmitter(transmitter)\n            .withSlackMS(4)\n            .withMaxBatchSize(Number.MAX_SAFE_INTEGER)\n            .build();\n\n\n        const classRepository = new ClassRepository(dolphin);\n        const beanManager = new BeanManager(classRepository);\n        const connector = new Connector(url, dolphin, classRepository, config);\n        const controllerManager = new ControllerManager(dolphin, classRepository, connector);\n\n        const clientContext = new ClientContext(dolphin, beanManager, controllerManager, connector);\n\n        ClientContextFactory.LOGGER.debug('clientContext created with', clientContext);\n\n        return clientContext;\n    }\n}\n\nClientContextFactory.LOGGER = LoggerFactory.getLogger('ClientContextFactory');\nClientContextFactory.legecyClientSupport = false;\n\nlet createClientContext = (client) => new ClientContextFactory(client).create;\n\nexport { createClientContext, ClientContextFactory };","import { checkMethod, checkParam, exists } from '../utils';\nimport { HTTP, RESPONSE_TYPE } from '../platform/constants'\n\nclass KeycloakConnection {\n\n    constructor() {\n    }\n\n    createDirectConnection(authEndpoint, realmName) {\n        checkMethod('createDirectConnection');\n        checkParam(authEndpoint, 'authEndpoint');\n        checkParam(realmName, 'realmName');\n\n        const httpRequest = new XMLHttpRequest();\n        httpRequest.open(HTTP.METHOD.POST, authEndpoint + '/auth/realms/' + realmName + '/protocol/openid-connect/token', true);\n        httpRequest.setRequestHeader(HTTP.HEADER_NAME.CONTENT_TYPE, HTTP.CONTENT_TYPE.APPLICATION_X_WWW_FORM_URLENCODED);\n        httpRequest.responseType = RESPONSE_TYPE.JSON;\n\n        return httpRequest;\n    }\n\n    createServerProxyConnection(authEndpoint, realmName) {\n        checkMethod('createServerProxyConnection');\n        checkParam(authEndpoint, 'authEndpoint');\n\n        const httpRequest = new XMLHttpRequest();\n        httpRequest.open(HTTP.METHOD.POST, authEndpoint, true);\n        httpRequest.setRequestHeader(HTTP.HEADER_NAME.CONTENT_TYPE, HTTP.CONTENT_TYPE.TEXT_PLAIN);\n        if (exists(realmName)) {\n            httpRequest.setRequestHeader(HTTP.HEADER_NAME.X_PLATFORM_SECURITY_REALM, realmName);\n        }\n        httpRequest.responseType = RESPONSE_TYPE.JSON;\n\n        return httpRequest;\n    }\n\n}\n\nexport { KeycloakConnection }","import { HTTP } from '../platform/constants'\nimport { exists } from '../utils';\nimport { LoggerFactory } from '../logging';\nimport { KeycloakConnection } from './keycloakConnection';\n\nclass KeycloakFunctions {\n\n    constructor() {\n        this.connection = new KeycloakConnection();\n    }\n\n    createLoginConnection(directConnection, authEndpoint, realmName, appName, user, password) {\n        let connection;\n        let content;\n\n        const encodedUser = encodeURIComponent(user);\n        const encodedPassword = encodeURIComponent(password);\n        const encodedAppName = encodeURIComponent(appName);\n\n        if (directConnection) {\n            if (exists(appName)) {\n                connection = this.connection.createDirectConnection(authEndpoint,realmName);\n                content = 'client_id=' + encodedAppName + '&username=' + encodedUser + '&password=' + encodedPassword + '&grant_type=password';\n            } else {\n                throw Error('No app name set!');\n            }\n        } else {\n            connection = this.connection.createServerProxyConnection(authEndpoint, realmName);\n            content = 'username=' + encodedUser + '&password=' + encodedPassword + '&grant_type=password';\n        }\n\n        return { connection, content };\n    }\n\n    createRefreshConnection(directConnection, authEndpoint, realmName, appName, refreshToken) {\n        let connection;\n        let content;\n\n        const encodedAppName = encodeURIComponent(appName);\n\n        if (directConnection) {\n            if (exists(appName)) {\n                connection = this.connection.createDirectConnection(authEndpoint, realmName);\n                content = 'grant_type=refresh_token&refresh_token=' + refreshToken + '&client_id=' + encodedAppName;\n            } else {\n                throw Error('No app name set!');\n            }\n        } else {\n            connection = this.connection.createServerProxyConnection(authEndpoint, realmName);\n            content = 'grant_type=refresh_token&refresh_token=' + refreshToken;\n        }\n\n        return { connection, content };\n    }\n\n    receiveToken(httpRequest, body) {\n        return new Promise((resolve, reject) => {\n            httpRequest.ontimeout = function (error) {\n                reject(error);\n            }\n\n            httpRequest.onerror = function (error) {\n                reject(error);\n            }\n\n            httpRequest.onreadystatechange = function () {\n                if (this.readyState === HTTP.XMLHTTPREQUEST_READYSTATE.DONE && this.status === HTTP.STATUS.OK) {\n                    resolve(this.response);\n                } else if (this.readyState === HTTP.XMLHTTPREQUEST_READYSTATE.DONE && this.status !== HTTP.STATUS.OK) {\n                    reject(this.status);\n                }\n            }\n            \n            KeycloakFunctions.LOGGER.trace('Receiving token');\n            httpRequest.send(body);\n        });\n    }\n\n    refreshToken(directConnection, authEndpoint, realmName, appName, refreshToken) {\n        const { connection, content } = this.createRefreshConnection(directConnection, authEndpoint, realmName, appName, refreshToken);\n        return this.receiveToken(connection, content);\n    }\n    \n}\n\nKeycloakFunctions.LOGGER = LoggerFactory.getLogger('KeycloakFunctions');\n\nexport { KeycloakFunctions }","import { checkMethod, checkParam, exists } from '../utils'\nimport { LoggerFactory } from '../logging'\nimport { HTTP } from '../platform/constants'\n\nclass SecurityHttpClientInterceptor {\n\n    constructor() {\n        this.token = null;\n        this.appName = null;\n        this.realm = null;\n    }\n\n    setToken(token) {\n        this.token = token;\n    }\n\n    setAppName(appName) {\n        this.appName = appName;\n    }\n\n    setRealm(realm) {\n        this.realm = realm;\n    }\n\n    handleRequest(httpRequest) {\n        checkMethod('handleRequest');\n        checkParam(httpRequest, 'httpRequest');\n\n        if (exists(this.token)) {\n            SecurityHttpClientInterceptor.LOGGER.trace('Using token', this.token);\n            httpRequest.setRequestHeader(HTTP.HEADER_NAME.AUTHORIZATION, 'Bearer ' + this.token);\n        }\n\n        if (exists(this.appName)) {\n            SecurityHttpClientInterceptor.LOGGER.trace('Using appName', this.appName);\n            httpRequest.setRequestHeader(HTTP.HEADER_NAME.X_PLATFORM_SECURITY_APPLICATION, this.appName);\n        }\n\n        if (exists(this.realm)) {\n            SecurityHttpClientInterceptor.LOGGER.trace('Using realm', this.realm);\n            httpRequest.setRequestHeader(HTTP.HEADER_NAME.X_PLATFORM_SECURITY_REALM, this.realm);\n        }\n\n        httpRequest.setRequestHeader(HTTP.HEADER_NAME.X_PLATFORM_SECURITY_BEARER_ONLY, 'true');\n        \n    }\n}\n\nSecurityHttpClientInterceptor.LOGGER = LoggerFactory.getLogger('SecurityHttpClientInterceptor');\n\nexport { SecurityHttpClientInterceptor };","import { LoggerFactory } from '../logging';\nimport { exists, checkMethod, checkParam } from '../utils';\nimport { KeycloakFunctions } from './keycloakFunctions';\nimport { SecurityHttpClientInterceptor } from './securityHttpClientInterceptor';\nimport { SECURITY } from '../platform/constants'\n\nclass KeycloakSecurity {\n\n    constructor() {\n        this.functions = new KeycloakFunctions();\n        this.interceptor = new SecurityHttpClientInterceptor();\n        this.intervall = null;\n\n        this.configuration = {\n            directConnection: false,\n            authEndpoint: SECURITY.AUTH_ENDPOINT,\n            appName: null,\n            realmName: null\n        }\n       \n    }\n\n    login(user, password, configuration) {\n        if (this.isAuthorized()) {\n            throw new Error('Already logged in!');\n        }\n\n        if (configuration) {\n            this.configuration.directConnection = configuration.directConnection || this.configuration.directConnection;\n            this.configuration.authEndpoint = configuration.authEndpoint || this.configuration.authEndpoint;\n            this.configuration.appName = configuration.appName || this.configuration.appName;\n            this.configuration.realmName = configuration.realmName || this.configuration.realmName;\n        }\n\n        const { directConnection, authEndpoint, appName, realmName } = this.configuration;\n\n        const { connection, content } = this.functions.createLoginConnection(directConnection, authEndpoint, realmName, appName, user, password);\n        const self = this;\n        return new Promise((resolve, reject) => {\n            KeycloakSecurity.LOGGER.debug('Receiving access token');\n            this.functions.receiveToken(connection, content)\n            .then((result) => {\n                if (result && result.access_token) {\n                    self.token = result;\n                    this.interceptor.setToken(result.access_token);\n                    this.interceptor.setRealm(realmName);\n                    this.interceptor.setAppName(appName);\n                    const expires =  result.expires_in || KeycloakSecurity.MIN_TOKEN_EXPIRES_RUN;\n                    const sleepTime = Math.max(KeycloakSecurity.MIN_TOKEN_EXPIRES_RUN, expires - KeycloakSecurity.TOKEN_EXPIRES_DELTA);\n                    self.intervall = setInterval(() => {\n                        KeycloakSecurity.LOGGER.debug('Refreshing access token');\n                        self.functions.refreshToken(directConnection, authEndpoint, realmName, appName, result.refresh_token).then((result) => {\n                            self.token = result;\n                            self.interceptor.setToken(result.access_token);\n                        });\n                    }, sleepTime);\n                    resolve(result.access_token);\n                } else {\n                    reject('No access token found');\n                }\n            })\n            .catch((error) => reject(error));\n        });\n    }\n\n    logout() {\n        const self = this;\n        KeycloakSecurity.LOGGER.debug('Logout');\n        return new Promise((resolve) => {\n            delete self.token;\n            self.interceptor.setToken(null);\n            if (exists(this.intervall)) {\n                clearInterval(this.intervall);\n                this.intervall = null;\n            }\n            resolve();\n        });\n    }\n\n    isAuthorized() {\n        return exists(this.token);\n    }\n\n    initServiceProvider(client) {\n        checkMethod('initServiceProvider');\n        checkParam(client, 'client');\n        client.getService('HttpClientInterceptor').addRequestInterceptor(this.interceptor);\n    }\n}\n\nKeycloakSecurity.TOKEN_EXPIRES_DELTA = 10000;\nKeycloakSecurity.MIN_TOKEN_EXPIRES_RUN = 30000;\n\nKeycloakSecurity.LOGGER = LoggerFactory.getLogger('KeycloakSecurity');\n\nexport { KeycloakSecurity };\n","import { HttpClient } from './httpClient';\nimport { HttpClientInterceptor } from './httpClientInterceptor';\nimport { ServiceProvider } from '../platform/serviceProvider';\nimport { exists } from '../utils'\n\nfunction register(client) {\n    if (exists(client)) {\n        const httpClientProvider = new ServiceProvider(HttpClient, 'HttpClient', client);\n        const httpClientInterceptorProvider = new ServiceProvider(HttpClientInterceptor, 'HttpClientInterceptor', client);\n    \n        client.registerServiceProvider(httpClientProvider);\n        client.registerServiceProvider(httpClientInterceptorProvider);\n    }\n}\n\nexport { register }","import { LoggerFactory, LogLevel } from './logging';\nimport { Client } from './platform/client';\nimport { ServiceProvider } from './platform/serviceProvider';\nimport { HTTP } from './platform/constants';\nimport { register as registerHttp } from './http';\nimport { register as registerClientScope } from './platform/clientScope';\nimport { register as registerRemotingScope } from './remoting'\nimport { register as registerSecurity } from './security'\n\nregisterHttp(Client);\nregisterClientScope(Client);\nregisterRemotingScope(Client);\nregisterSecurity(Client);\nClient.init();\n\nconst getService = Client.getService;\nconst hasService = Client.hasService;\nconst registerServiceProvider = Client.registerServiceProvider;\n\n/* eslint-disable */\nClient.LOGGER.info('Rico Version:' , RICO_VERSION);\n/* eslint-enable */\n\nexport { LoggerFactory, LogLevel, getService, hasService, registerServiceProvider, HTTP }\n\nif (window.Worker && window.Blob && window.URL && URL.createObjectURL) {\n    Client.LOGGER.debug('Creating Worker');\n    class HttpWorker {\n        constructor() {\n            /* eslint-disable */\n            this.blob = new Blob([RICO_WORKER], {type: \"application/javascript\"});\n            /* eslint-enable */\n        }\n\n        createWorker() {\n            return new Worker(URL.createObjectURL(this.blob));\n        }\n    }\n\n    const httpWorkerProvider = new ServiceProvider(HttpWorker, 'HttpWorker');\n    Client.registerServiceProvider(httpWorkerProvider);\n}\n\n/* \n * Provide dependencies as global dolphin object for backward compatibility.\n * The code below this comment is deprecated and should be removed in a feature version.\n */\nimport { createClientContext, ClientContextFactory } from './remoting/clientContextFactory'\n\nconst LOGGER = LoggerFactory.getLogger('Deprecated:');\nlet showWarning = true;\nfunction warn() {\n    if (showWarning) {\n        LOGGER.warn('Please do not use \"dolphin\" anymore, it may be removed in the next version! Use the new API instead!');\n        showWarning = false;\n    }\n}\n\nif (window) {\n    window.dolphin = { // TODO remove in next major release\n        get ClientContextFactory() {\n            warn();\n            ClientContextFactory.legecyClientSupport = Client;\n            return ClientContextFactory;\n        },\n        get createClientContext() {\n            warn();\n            return createClientContext(Client);\n        },\n        get LoggerFactory() {\n            warn();\n            return LoggerFactory;\n        },\n        get LogLevel() {\n            warn();\n            return LogLevel;\n        }\n    };\n}","import { ClientContextFactory } from './clientContextFactory'\nimport { ServiceProvider } from '../platform/serviceProvider'\nimport { exists } from '../utils'\n\nfunction register(client) {\n    if (exists(client)) {\n        const clientContextFactoryProvider = new ServiceProvider(ClientContextFactory, 'ClientContextFactory', client);\n\n        client.registerServiceProvider(clientContextFactoryProvider);\n    }\n}\n\nexport { register };","\nimport { ServiceProvider } from '../platform/serviceProvider';\nimport { exists } from '../utils'\nimport { KeycloakSecurity } from './keycloakSecurity';\n\nfunction register(client) {\n    if (exists(client)) {\n        const securityProvider = new ServiceProvider(KeycloakSecurity, 'Security', client);\n        client.registerServiceProvider(securityProvider);\n    }\n}\n\nexport { register }"],"sourceRoot":""}