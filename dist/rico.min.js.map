{"version":3,"sources":["webpack://ricojs/webpack/universalModuleDefinition","webpack://ricojs/webpack/bootstrap","webpack://ricojs/./node_modules/emitter-component/index.js","webpack://ricojs/./src/logging/constants.js","webpack://ricojs/./src/utils/index.js","webpack://ricojs/./src/logging/logger.js","webpack://ricojs/./src/logging/loggerfactory.js","webpack://ricojs/./src/platform/client.js","webpack://ricojs/./src/platform/serviceProvider.js","webpack://ricojs/./src/platform/constants.js","webpack://ricojs/./src/http/httpResponse.js","webpack://ricojs/./src/http/httpException.js","webpack://ricojs/./src/http/executor.js","webpack://ricojs/./src/http/reponseBuilder.js","webpack://ricojs/./src/http/requestBuilder.js","webpack://ricojs/./src/http/httpClient.js","webpack://ricojs/./src/http/httpClientInterceptor.js","webpack://ricojs/./src/platform/clientScope.js","webpack://ricojs/./src/remoting/commandBatcher.js","webpack://ricojs/./src/remoting/commands/commandConstants.js","webpack://ricojs/./src/remoting/commands/impl/valueChangedCommand.js","webpack://ricojs/./src/remoting/commands/impl/attributeMetadataChangedCommand.js","webpack://ricojs/./src/remoting/commands/impl/callActionCommand.js","webpack://ricojs/./src/remoting/commands/impl/changeAttributeMetadataCommand.js","webpack://ricojs/./src/remoting/commands/impl/createContextCommand.js","webpack://ricojs/./src/remoting/commands/impl/createControllerCommand.js","webpack://ricojs/./src/remoting/commands/impl/createPresentationModelCommand.js","webpack://ricojs/./src/remoting/commands/impl/deletePresentationModelCommand.js","webpack://ricojs/./src/remoting/commands/impl/destroyContextCommand.js","webpack://ricojs/./src/remoting/commands/impl/destroyControllerCommand.js","webpack://ricojs/./src/remoting/commands/impl/interruptLongPollCommand.js","webpack://ricojs/./src/remoting/commands/impl/presentationModelDeletedCommand.js","webpack://ricojs/./src/remoting/commands/impl/startLongPollCommand.js","webpack://ricojs/./src/remoting/commands/codecError.js","webpack://ricojs/./src/remoting/commands/codec.js","webpack://ricojs/./src/remoting/constants.js","webpack://ricojs/./src/remoting/eventBus.js","webpack://ricojs/./src/remoting/clientPresentationModel.js","webpack://ricojs/./src/remoting/clientConnector.js","webpack://ricojs/./src/remoting/clientAttribute.js","webpack://ricojs/./src/remoting/clientDolphin.js","webpack://ricojs/./src/remoting/attribute.js","webpack://ricojs/./src/remoting/commands/commandFactory.js","webpack://ricojs/./src/remoting/clientModelStore.js","webpack://ricojs/./src/remoting/noTransmitter.js","webpack://ricojs/./src/remoting/dolphinBuilder.js","webpack://ricojs/./src/remoting/connector.js","webpack://ricojs/./src/remoting/beanManager.js","webpack://ricojs/./src/remoting/classRepository.js","webpack://ricojs/./src/remoting/controllerProxy.js","webpack://ricojs/./src/remoting/controllerManager.js","webpack://ricojs/./src/remoting/clientContext.js","webpack://ricojs/./src/remoting/errors.js","webpack://ricojs/./src/remoting/remotingErrorHandler.js","webpack://ricojs/./src/remoting/platformHttpTransmitter.js","webpack://ricojs/./src/remoting/clientContextFactory.js","webpack://ricojs/./src/security/keycloakConnection.js","webpack://ricojs/./src/security/keycloakFunctions.js","webpack://ricojs/./src/security/securityHttpClientInterceptor.js","webpack://ricojs/./src/security/keycloakSecurity.js","webpack://ricojs/./src/http/index.js","webpack://ricojs/./src/index.js","webpack://ricojs/./src/remoting/index.js","webpack://ricojs/./src/security/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Emitter","obj","mixin","on","addEventListener","event","fn","this","_callbacks","push","once","self","off","apply","arguments","removeListener","removeAllListeners","removeEventListener","length","cb","callbacks","splice","emit","args","slice","len","listeners","hasListeners","_checkMethodName","LogLevel","NONE","text","level","ALL","TRACE","DEBUG","INFO","WARN","ERROR","exists","checkMethod","checkParam","param","parameterName","Error","parseUrl","url","scheme","matches","match","substring","query","fragment","path","hashes","split","reduce","params","hash","val","assign","hostname","port","location","protocol","indexOf","parseInt","user","password","LOCALS","pad","size","result","internalLog","Array","from","func","shift","context","logLevel","date","Date","dateString","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","getCookie","document","cookie","parts","pop","Logger","rootLogger","console","isLogLevel","log","warn","error","getLogLevel","levelName","ROOT_LOGGER","loggers","Map","LoggerFactory","existingLogger","logger","set","Client","LOGGER","getLogger","services","serviceProviders","configuration","getService","service","provider","hasService","getAllServiceTypes","forEach","serviceProvider","registerServiceProvider","getName","debug","init","trace","initServiceProvider","ServiceProvider","serviceClass","client","serviceInstance","RESPONSE_TYPE","HTTP","METHOD","GET","POST","PUT","DELETE","STATUS","ACCEPTED","BAD_GATEWAY","BAD_REQUEST","CONFLICT","CONTINUE","CREATED","EXPECTATION_FAILED","FAILED_DEPENDENCY","FORBIDDEN","GATEWAY_TIMEOUT","GONE","HTTP_VERSION_NOT_SUPPORTED","IM_A_TEAPOT","INSUFFICIENT_SPACE_ON_RESOURCE","INSUFFICIENT_STORAGE","INTERNAL_SERVER_ERROR","LENGTH_REQUIRED","LOCKED","METHOD_FAILURE","METHOD_NOT_ALLOWED","MOVED_PERMANENTLY","MOVED_TEMPORARILY","MULTI_STATUS","MULTIPLE_CHOICES","NETWORK_AUTHENTICATION_REQUIRED","NO_CONTENT","NON_AUTHORITATIVE_INFORMATION","NOT_ACCEPTABLE","NOT_FOUND","NOT_IMPLEMENTED","NOT_MODIFIED","OK","PARTIAL_CONTENT","PAYMENT_REQUIRED","PERMANENT_REDIRECT","PRECONDITION_FAILED","PRECONDITION_REQUIRED","PROCESSING","PROXY_AUTHENTICATION_REQUIRED","REQUEST_HEADER_FIELDS_TOO_LARGE","REQUEST_TIMEOUT","REQUEST_TOO_LONG","REQUEST_URI_TOO_LONG","REQUESTED_RANGE_NOT_SATISFIABLE","RESET_CONTENT","SEE_OTHER","SERVICE_UNAVAILABLE","SWITCHING_PROTOCOLS","TEMPORARY_REDIRECT","TOO_MANY_REQUESTS","UNAUTHORIZED","UNPROCESSABLE_ENTITY","UNSUPPORTED_MEDIA_TYPE","USE_PROXY","HEADER_NAME","ACCEPT","ACCEPT_CHARSET","ACCEPT_ENCODING","ACCEPT_LANGUAGE","ACCEPT_DATETIME","AUTHORIZATION","CACHE_CONTROL","CONNECTION","COOKIE","CONTENT_LENGTH","CONTENT_MD5","CONTENT_TYPE","DATE","EXPECT","FORWARDED","FROM","HOST","IF_MATCH","IF_MODIFIED_SINCE","IF_NONE_MATCH","IF_RANGE","MAX_FORWARDS","PRAGMA","PROXY_AUTHORIZATION","REFERER","TE","USER_AGENT","X_CLIENT_ID","X_CLIENT_SESSION_ID","X_PLATFORM_SECURITY_REALM","X_PLATFORM_SECURITY_BEARER_ONLY","X_PLATFORM_SECURITY_APPLICATION","APPLICATION_JSON","APPLICATION_X_WWW_FORM_URLENCODED","TEXT_HTML","TEXT_PLAIN","XMLHTTPREQUEST_READYSTATE","UNSENT","OPENED","HEADERS_RECEIVED","LOADING","DONE","SECURITY","HttpResponse","status","content","headers","headerArray","trim","header","toLowerCase","join","HttpException","message","timedout","Executor","timeout","worker","httpWorker","useWorker","timeoutToUse","requestInterceptors","getRequestInterceptors","responseInterceptors","getResponseInterceptors","directCall","resolve","reject","httpRequest","XMLHttpRequest","open","method","withCredentials","handleRequest","setRequestHeader","responseType","ontimeout","statusText","httpException","onerror","onreadystatechange","readyState","httpResponse","response","getAllResponseHeaders","handleResponse","send","requestBody","workerCall","collectedRequestHeaders","createWorker","onmessage","terminate","msg","data","responseHeaders","postMessage","conf","requestHeaders","Promise","ResponseBuilder","executor","RequestBuilder","reponseBuilder","headersInfo","HttpClient","requestBuilder","request","HttpClientInterceptor","requestHandlers","Set","responseHandlers","handler","add","list","ClientScope","clientIds","clientId","getClientId","newClientId","getHeaderByName","setClientId","addRequestInterceptor","addResponseInterceptor","calcKey","BlindCommandBatcher","folding","maxBatchSize","queue","batch","batchLength","element","command","id","attributeId","newValue","ValueChangedCommand","AttributeMetadataChangedCommand","metadataName","CallActionCommand","controllerid","actionName","ChangeAttributeMetadataCommand","CreateContextCommand","CreateControllerCommand","controllerName","parentControllerId","CreatePresentationModelCommand","presentationModel","attributes","clientSideOnly","pmId","pmType","presentationModelType","getAttributes","attr","propertyName","getValue","DeletePresentationModelCommand","DestroyContextCommand","DestroyControllerCommand","controllerId","InterruptLongPollCommand","PresentationModelDeletedCommand","StartLongPollCommand","CodecError","Codec","jsonCommand","map","attribute","commands","JSON","stringify","_encodeAttributeMetadataChangedCommand","_encodeCallActionCommand","_encodeChangeAttributeMetadataCommand","_encodeCreateContextCommand","_encodeCreateControllerCommand","_encodeCreatePresentationModelCommand","_encodeDeletePresentationModelCommand","_encodeDestroyContextCommand","_encodeDestroyControllerCommand","_encodeInterruptLongPollCommand","_encodePresentationModelDeletedCommand","_encodeStartLongPollCommand","_encodeValueChangedCommand","transmitted","parse","_decodeAttributeMetadataChangedCommand","_decodeCallActionCommand","_decodeChangeAttributeMetadataCommand","_decodeCreateContextCommand","_decodeCreateControllerCommand","_decodeCreatePresentationModelCommand","_decodeDeletePresentationModelCommand","_decodeDestroyContextCommand","_decodeDestroyControllerCommand","_decodeInterruptLongPollCommand","_decodePresentationModelDeletedCommand","_decodeStartLongPollCommand","_decodeValueChangedCommand","EventBus","eventHandlers","eventHandler","handle","presentationModelInstanceCount","ClientPresentationModel","dirty","toString","invalidBus","dirtyValueChangeBus","attributeCopy","copy","addAttribute","findAttributeByPropertyName","getQualifier","findAttributeByQualifier","setPresentationModel","onValueChange","trigger","source","handleInvalidate","onEvent","qualifier","sourcePresentationModel","targetAttribute","sourceAttribute","getAt","syncWith","ClientConnector","transmitter","clientDolphin","slackMS","commandQueue","currentlySending","pushEnabled","waiting","codec","commandBatcher","newBatcher","enabled","newListener","pushListener","newCommand","releaseCommand","onFinished","release","doSendNext","enqueuePushCommand","cmdsAndHandlers","callback","cah","transmit","touchedPMs","touched","setTimeout","onError","handleDeletePresentationModelCommand","handleCreatePresentationModelCommand","handleValueChangedCommand","handleAttributeMetadataChangedCommand","serverCommand","model","findPresentationModelById","getClientModelStore","deletePresentationModel","containsPresentationModel","clientAttribute","clientPm","addAttributes","updatePresentationModelQualifier","findAttributeById","setValueFromServer","me","onFinishedData","signal","ClientAttribute","clientAttributeInstanceCount","valueChangeBus","qualifierChangeBus","setValue","setQualifier","String","Boolean","Number","valueOf","checkValue","ok","SUPPORTED_VALUE_TYPES","verifiedValue","oldValue","newQualifier","oldQualifier","ClientDolphin","clientConnector","type","clientModelStore","listPresentationModelIds","listPresentationModels","findAllPresentationModelByType","modelToDelete","updateAttributeQualifier","findAllAttributesByQualifier","pushCommand","setPushListener","setReleaseCommand","setPushEnabled","listen","Attribute","QUALIFIER_PROPERTY","VALUE","CommandFactory","ClientModelStore","presentationModels","presentationModelsPerType","attributesPerId","attributesPerQualifier","modelStoreChangeBus","addAttributeById","addAttributeByQualifier","evt","sendToServer","createValueChangedCommand","getClientConnector","findAttributesByFilter","onQualifierChange","createChangeAttributeMetadataCommand","has","added","addPresentationModelByType","connector","createCreatePresentationModelCommand","registerAttribute","removed","removePresentationModelByType","removeAttributeById","removeAttributeByQualifier","filter","iter","keys","next","done","values","notify","remove","createPresentationModelDeletedCommand","pmStoreEvent","clientPresentationModel","NoTransmitter","onDone","DolphinBuilder","setClientConnector","setClientModelStore","dolphinBuilder","ACTION_CALL_BEAN","Connector","dolphin","classRepository","config","highlanderPMResolver","highlanderPMPromise","onModelStoreChange","sourceSystem","eventType","onModelAdded","onModelRemoved","startPushListening","createStartLongPollCommand","createInterruptLongPollCommand","registerClass","spliceListEntry","load","unregisterClass","unload","reason","BeanManager","addedHandlers","removedHandlers","updatedHandlers","arrayUpdatedHandlers","allAddedHandlers","allRemovedHandlers","allUpdatedHandlers","allArrayUpdatedHandlers","_handleBeanAdded","_handleBeanRemoved","_handleBeanUpdate","_handleArrayUpdate","onBeanAdded","onBeanRemoved","onBeanUpdate","onArrayUpdate","bean","handlerList","e","index","count","newElements","notifyBeanChange","removedElements","notifyArrayChange","collection","predicate","concat","unsubscribe","ClassRepository","classes","beanFromDolphin","beanToDolphin","classInfos","beanAddedHandlers","beanRemovedHandlers","propertyUpdateHandlers","arrayUpdateHandlers","blocked","modelId","to","toDolphin","undefined","fromDolphin","isBlocked","array","removedElementsCount","isArray","sendListSplice","classInfo","search","validateList","block","unblock","toISOString","TypeError","fixType","parseFloat","ControllerProxy","manager","destroyed","onDestroyedHandlers","invokeAction","_createController","getId","destroyController","ControllerManager","controllers","getHighlanderPM","then","highlanderPM","invoke","createCreateControllerCommand","getValueWithRetry","ctrlId","mapDolphinToBean","controller","getValueCall","errorMessage","intervalID","setInterval","clearInterval","pm","actionParams","mapParamToDolphin","createCallActionCommand","createDestroyControllerCommand","controllersCopy","promises","destroy","all","ClientContext","beanManager","controllerManager","_controllerManager","_connector","connectionPromise","isConnected","connect","createCreateContextCommand","createController","stopPushListening","createDestroyContextCommand","DolphinRemotingError","detail","DolphinSessionError","RemotingErrorHandler","PlatformHttpTransmitter","failed_attempt","connectionConfig","_connectionConfig","maxRetry","connection","errorHandlers","encodedCommands","encode","isLogLevelUseable","httpClient","post","withHeadersInfo","withContent","readString","execute","exception","getStatus","_handleError","_send","responseText","responseCommands","decode","err","errorMsg","ClientContextFactory","legecyClientSupport","clientContext","withTransmitter","withSlackMS","withMaxBatchSize","MAX_SAFE_INTEGER","build","KeycloakConnection","authEndpoint","realmName","KeycloakFunctions","directConnection","appName","encodedUser","encodeURIComponent","encodedPassword","encodedAppName","createDirectConnection","createServerProxyConnection","refreshToken","body","createRefreshConnection","receiveToken","SecurityHttpClientInterceptor","token","realm","KeycloakSecurity","functions","interceptor","intervall","isAuthorized","createLoginConnection","access_token","setToken","setRealm","setAppName","expires","expires_in","MIN_TOKEN_EXPIRES_RUN","sleepTime","Math","max","TOKEN_EXPIRES_DELTA","refresh_token","httpClientProvider","httpClientInterceptorProvider","registerHttp","clientScopeProvider","registerClientScope","clientContextFactoryProvider","registerRemotingScope","securityProvider","registerSecurity","info","RICO_VERSION","Worker","Blob","URL","createObjectURL","HttpWorker","blob","RICO_WORKER","httpWorkerProvider","showWarning"],"mappings":"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","file":"rico.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ricojs\"] = factory();\n\telse\n\t\troot[\"ricojs\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","\n/**\n * Expose `Emitter`.\n */\n\nmodule.exports = Emitter;\n\n/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nfunction Emitter(obj) {\n  if (obj) return mixin(obj);\n};\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks[event] = this._callbacks[event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  var self = this;\n  this._callbacks = this._callbacks || {};\n\n  function on() {\n    self.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks[event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks[event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n  var args = [].slice.call(arguments, 1)\n    , callbacks = this._callbacks[event];\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks[event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n","const LogLevel = {\n    NONE: { name: 'NONE', text: '[NONE ]', level: 0 },\n    ALL: { name: 'ALL', text: '[ALL  ]', level: 100 },\n    TRACE: { name: 'TRACE', text: '[TRACE]', level: 5 },\n    DEBUG: { name: 'DEBUG', text: '[DEBUG]', level: 4 },\n    INFO: { name: 'INFO', text: '[INFO ]', level: 3 },\n    WARN: { name: 'WARN', text: '[WARN ]', level: 2 },\n    ERROR: { name: 'ERROR', text: '[ERROR]', level: 1 },\n};\n\nexport { LogLevel };","var _checkMethodName;\n\nexport function exists(object) {\n    return typeof object !== 'undefined' && object !== null;\n}\n\nexport function checkMethod(name) {\n    _checkMethodName = name;\n}\n\nexport function checkParam(param, parameterName) {\n    if(!exists(param)) {\n        throw new Error('The parameter ' + parameterName + ' is mandatory in ' + _checkMethodName);\n    }\n}\n\nexport function parseUrl(url) {\n    //https://jsperf.com/url-parsing\n    const pattern = /^(((([^:\\/#\\?]+:)?(?:(\\/\\/)((?:(([^:@\\/#\\?]+)(?:\\:([^:@\\/#\\?]+))?)@)?(([^:\\/#\\?\\]\\[]+|\\[[^\\/\\]@#?]+\\])(?:\\:([0-9]+))?))?)?)?((\\/?(?:[^\\/\\?#]+\\/+)*)([^\\?#]*)))?(\\?[^#]+)?)(#.*)?/\n    const matches =  url.match(pattern);\n\n    let scheme;\n    if (matches[4] && matches[4].length > 1) {\n        scheme = matches[4].substring(0, matches[4].length-1);\n    }\n\n    let path = matches[13];\n\n    let query;\n    if (matches[16] && matches[16].length > 1) {\n        query = matches[16].substring(1, matches[16].length);\n        const hashes = query.split('&');\n        query = hashes.reduce((params, hash) => {\n            let [key, val] = hash.split('=')\n            return Object.assign(params, {[key]: val})\n        }, {});\n    }\n\n    let fragment;\n    if (matches[17] && matches[17].length > 1) {\n        fragment = matches[17].substring(1, matches[17].length);\n    }\n\n    let hostname = matches[11];\n    let port = matches[12];\n    if (hostname && !port && scheme === 'http') {\n        port = 80;\n    } else if (hostname && !port && scheme === 'https') {\n        port = 443;\n    }\n\n    //relative url? get hostname and port from the browser\n    if (!hostname && !port && !scheme) {\n        \n        if (window && window.location && window.location.hostname) {\n            hostname = window.location.hostname;\n        }\n        if (window && window.location && window.location.port) {\n            port = window.location.port;\n        }\n        if (window && window.location && window.location.protocol) {\n            scheme = window.location.protocol.substring(0, window.location.protocol.length-1) ;\n        }\n        // strip '.' from relative path\n        if (path.indexOf('.') === 0) {\n            path = path.substring(1, path.length);\n        }\n    }\n\n    // port should be a number, always\n    if (port) {\n        port = parseInt(port);\n    }\n\n    return {\n        scheme: scheme,\n        user: matches[8],\n        password: matches[9],\n        hostname: hostname,\n        port: port,\n        path: path,\n        query: query,\n        fragment: fragment\n    };\n    \n}\n\n","import {checkParam, exists} from '../utils'\nimport { LogLevel } from \"./constants\";\n\n// private methods\nconst LOCALS = {\n    pad (text, size) {\n        let result = '' + text;\n        while (result.length < size) {\n            result = '0' + result;\n        }\n        return result;\n    },\n    internalLog () {\n        const args = Array.from(arguments);\n        const func = args.shift();\n        const context = args.shift();\n        const logLevel = args.shift();\n        const date = new Date();\n        const dateString =  date.getFullYear() + '-' + LOCALS.pad(date.getMonth() + 1, 2) + '-' + LOCALS.pad(date.getDate(), 2) + ' ' + LOCALS.pad(date.getHours(), 2) + ':' + LOCALS.pad(date.getMinutes(), 2) + ':' + LOCALS.pad(date.getSeconds(), 2) + '.' + LOCALS.pad(date.getMilliseconds(), 3);\n        func(dateString, logLevel.text, context, ...args);\n\n    },\n    getCookie (name) {\n        if (exists(window) && exists(window.document) && exists(window.document.cookie)) {       \n            const value = '; ' + window.document.cookie;\n            const parts = value.split('; ' + name + '=');\n            if ( parts.length === 2 ) {\n                return parts.pop().split(';').shift();\n            }\n        }\n    }\n};\n\n\n// public\nclass Logger {\n\n    constructor(context, rootLogger) {\n        this.context = context;\n        this.rootLogger = rootLogger;\n        const cookieLogLevel = LOCALS.getCookie('RICO_LOGGER_' + this.context);\n        switch (cookieLogLevel) {\n            case 'NONE':\n                this.logLevel = LogLevel.NONE;\n                break;\n            case 'ALL':\n                this.logLevel = LogLevel.ALL;\n                break;\n            case 'TRACE':\n                this.logLevel = LogLevel.TRACE;\n                break;\n            case 'DEBUG':\n                this.logLevel = LogLevel.DEBUG;\n                break;\n            case 'INFO':\n                this.logLevel = LogLevel.INFO;\n                break;\n            case 'WARN':\n                this.logLevel = LogLevel.WARN;\n                break;\n            case 'ERROR':\n                this.logLevel = LogLevel.ERROR;\n                break;\n        }\n\n    }\n\n    trace() {\n        if (exists(console) && this.isLogLevel(LogLevel.TRACE)) {\n            LOCALS.internalLog(console.log, this.context, LogLevel.TRACE, ...arguments);\n        }\n    }\n\n    debug() {\n        if (exists(console) && this.isLogLevel(LogLevel.DEBUG)) {\n            LOCALS.internalLog(console.log, this.context, LogLevel.DEBUG, ...arguments);\n        }\n    }\n\n    info() {\n        if (exists(console) && this.isLogLevel(LogLevel.INFO)) {\n            LOCALS.internalLog(console.log, this.context, LogLevel.INFO, ...arguments);\n        }\n    }\n\n    warn() {\n        if (exists(console) && this.isLogLevel(LogLevel.WARN)) {\n            LOCALS.internalLog(console.warn, this.context, LogLevel.WARN, ...arguments);\n        }\n    }\n\n    error() {\n        if (exists(console) && this.isLogLevel(LogLevel.ERROR)) {\n            LOCALS.internalLog(console.error, this.context, LogLevel.ERROR, ...arguments);\n        }\n    }\n\n    getLogLevel() {\n        if (exists(this.logLevel)) {\n            return this.logLevel;\n        } else if (exists(this.rootLogger)) {\n            return this.rootLogger.getLogLevel();\n        } else {\n            return LogLevel.INFO;\n        }\n    }\n\n    setLogLevel(level) {\n        this.logLevel = level;\n    }\n\n    setLogLevelByName(levelName) {\n        if (exists(LogLevel[levelName])) {\n            this.logLevel = LogLevel[levelName];\n        }\n    }\n\n    isLogLevel(level) {\n        if (this.getLogLevel() === LogLevel.NONE) {\n            return false;\n        }\n        if (this.getLogLevel() === LogLevel.ALL) {\n            return true;\n        }\n        if (this.getLogLevel() === LogLevel.TRACE) {\n            return true;\n        }\n        if (this.getLogLevel() === LogLevel.DEBUG && level !== LogLevel.TRACE) {\n            return true;\n        }\n        if (this.getLogLevel() === LogLevel.INFO && level !== LogLevel.TRACE && level !== LogLevel.DEBUG) {\n            return true;\n        }\n        if (this.getLogLevel() === LogLevel.WARN && level !== LogLevel.TRACE && level !== LogLevel.DEBUG && level !== LogLevel.INFO) {\n            return true;\n        }\n        if (this.getLogLevel() === LogLevel.ERROR && level !== LogLevel.TRACE && level !== LogLevel.DEBUG && level !== LogLevel.INFO && level !== LogLevel.WARN) {\n            return true;\n        }\n        return false;\n    }\n\n    isLogLevelUseable(level) {\n        checkParam(level, 'level');\n        if (level.level) {\n            return this.getLogLevel().level >= level.level;\n        } else {\n            return false;\n        }\n    }\n}\n\nexport { Logger };","import { exists } from \"../utils\";\nimport { Logger } from \"./logger\";\n\nconst ROOT_LOGGER = new Logger('ROOT');\n\n// private methods\nconst LOCALS = {\n    loggers: new Map()\n};\n\n\n// public\nclass LoggerFactory {\n\n    static getLogger(context) {\n        if (!exists(context) || context === 'ROOT') {\n            return ROOT_LOGGER;\n        }\n        const existingLogger = LOCALS.loggers.get(context);\n        if (existingLogger) {\n            return existingLogger;\n        }\n\n        const logger = new Logger(context, ROOT_LOGGER);\n        LOCALS.loggers.set(context, logger);\n        return logger;\n    }\n}\n\nexport { LoggerFactory }","import {exists} from '../utils';\nimport { LoggerFactory } from '../logging';\n\nclass Client {\n\n}\n\nClient.LOGGER = LoggerFactory.getLogger('Client');\n\nClient.services = new Map();\nClient.serviceProviders = new Map();\nClient.configuration = {};\n\nClient.getService = function(name) {\n    let service = Client.services.get(name);\n    if (!exists(service)) {\n        let provider = Client.serviceProviders.get(name);\n        if (!exists(provider)) {\n            throw new Error('No service provider found for ' + name);\n        } else {\n            service = provider.getService(Client.configuration);\n            Client.services.set(name, service);\n        }\n    }\n    return service;\n};\n\nClient.hasService = function(name) {\n    const provider = Client.serviceProviders.get(name);\n    if (!exists(provider)) {\n        return false;\n    } else {\n        return true;\n    }\n};\n\nClient.getAllServiceTypes = function() {\n    let result = [];\n    Client.serviceProviders.forEach((serviceProvider) => result.push(serviceProvider));\n    return result;\n};\n\n\nClient.registerServiceProvider = function(serviceProvider) {\n    if (serviceProvider === null || typeof serviceProvider === 'undefined') {\n        throw new Error('Cannot register empty service provider');\n    }\n    \n    if (typeof serviceProvider.getName === 'function' && typeof serviceProvider.getService === 'function') {\n        const current = Client.serviceProviders.get(serviceProvider.getName());\n        if (!current) {\n            Client.serviceProviders.set(serviceProvider.getName(), serviceProvider);\n            Client.LOGGER.debug('Service provider registered with name', serviceProvider.getName());\n        } else {\n            throw new Error('Cannot register another service provider. Name already in use.');\n        }\n    } else {\n        throw new Error('Cannot register service provider without getName() and getService() methods');\n    }\n};\n\nClient.init = function() {\n    Client.serviceProviders.forEach((serviceProvider) => {\n        const service = serviceProvider.getService();\n        Client.LOGGER.trace('Initializing service for service provider', serviceProvider.getName());\n        if (typeof service.initServiceProvider === 'function') {\n            Client.LOGGER.debug('Initializing service', service);\n            service.initServiceProvider(Client);\n        }\n    });\n}\n\nexport { Client }","import { checkMethod, checkParam } from '../utils'\nclass ServiceProvider {\n\n    constructor(serviceClass, name, client) {\n        checkMethod('constructor');\n        checkParam(serviceClass, 'serviceClass');\n        checkParam(name, 'name');\n        \n        this.serviceInstance = new serviceClass(client);\n        this.name = name;\n    }\n\n    getName() {\n        return this.name;\n    }\n\n    getService() {\n        return this.serviceInstance;\n    }\n}\n\nexport { ServiceProvider }","// Reponse type\nexport const RESPONSE_TYPE = {\n    ARRAY_BUFFER: 'arraybuffer',\n    TEXT: 'text',\n    JSON: 'json'\n}\n\n// HTTP methods and status codes\nexport const HTTP = {\n    METHOD: {\n        GET: 'GET',\n        POST: 'POST',\n        PUT: 'PUT',\n        DELETE: 'DELETE'\n    },\n    STATUS: {\n        ACCEPTED: 202,\n        BAD_GATEWAY: 502,\n        BAD_REQUEST: 400,\n        CONFLICT: 409,\n        CONTINUE: 100,\n        CREATED: 201,\n        EXPECTATION_FAILED: 417,\n        FAILED_DEPENDENCY : 424,\n        FORBIDDEN: 403,\n        GATEWAY_TIMEOUT: 504,\n        GONE: 410,\n        HTTP_VERSION_NOT_SUPPORTED: 505,\n        IM_A_TEAPOT: 418,\n        INSUFFICIENT_SPACE_ON_RESOURCE: 419,\n        INSUFFICIENT_STORAGE: 507,\n        INTERNAL_SERVER_ERROR: 500,\n        LENGTH_REQUIRED: 411,\n        LOCKED: 423,\n        METHOD_FAILURE: 420,\n        METHOD_NOT_ALLOWED: 405,\n        MOVED_PERMANENTLY: 301,\n        MOVED_TEMPORARILY: 302,\n        MULTI_STATUS: 207,\n        MULTIPLE_CHOICES: 300,\n        NETWORK_AUTHENTICATION_REQUIRED: 511,\n        NO_CONTENT: 204,\n        NON_AUTHORITATIVE_INFORMATION: 203,\n        NOT_ACCEPTABLE: 406,\n        NOT_FOUND: 404,\n        NOT_IMPLEMENTED: 501,\n        NOT_MODIFIED: 304,\n        OK: 200,\n        PARTIAL_CONTENT: 206,\n        PAYMENT_REQUIRED: 402,\n        PERMANENT_REDIRECT: 308,\n        PRECONDITION_FAILED: 412,\n        PRECONDITION_REQUIRED: 428,\n        PROCESSING: 102,\n        PROXY_AUTHENTICATION_REQUIRED: 407,\n        REQUEST_HEADER_FIELDS_TOO_LARGE: 431,\n        REQUEST_TIMEOUT: 408,\n        REQUEST_TOO_LONG: 413,\n        REQUEST_URI_TOO_LONG: 414,\n        REQUESTED_RANGE_NOT_SATISFIABLE: 416,\n        RESET_CONTENT: 205,\n        SEE_OTHER: 303,\n        SERVICE_UNAVAILABLE: 503,\n        SWITCHING_PROTOCOLS: 101,\n        TEMPORARY_REDIRECT: 307,\n        TOO_MANY_REQUESTS: 429,\n        UNAUTHORIZED: 401,\n        UNPROCESSABLE_ENTITY: 422,\n        UNSUPPORTED_MEDIA_TYPE: 415,\n        USE_PROXY: 305\n    },\n    HEADER_NAME: {\n        ACCEPT: 'Accept',\n        ACCEPT_CHARSET: 'Accept-Charset', \n        ACCEPT_ENCODING: 'Accept-Encoding', \n        ACCEPT_LANGUAGE: 'Accept-Language',\n        ACCEPT_DATETIME: 'Accept-Datetime',\n        AUTHORIZATION: 'Authorization',\n        CACHE_CONTROL: 'Cache-Control',\n        CONNECTION: 'Connection',\n        COOKIE: 'Cookie',\n        CONTENT_LENGTH: 'Content-Length',\n        CONTENT_MD5: 'Content-MD5',\n        CONTENT_TYPE: 'Content-Type',\n        DATE: 'Date',\n        EXPECT: 'Expect',\n        FORWARDED: 'Forwarded',\n        FROM: 'From',\n        HOST: 'Host', \n        IF_MATCH: 'If-Match', \n        IF_MODIFIED_SINCE: 'If-Modified_Since',\n        IF_NONE_MATCH: 'If-None_Match',\n        IF_RANGE: 'If-Range',\n        MAX_FORWARDS: 'Max-Forwards',\n        PRAGMA: 'Pragma', \n        PROXY_AUTHORIZATION: 'Proxy-Authorization',\n        REFERER: 'Referer',\n        TE: 'TE',\n        USER_AGENT: 'User-Agent',\n        X_CLIENT_ID: 'X-Client-Id',\n        X_CLIENT_SESSION_ID: 'X-Client-Session-Id',\n        X_PLATFORM_SECURITY_REALM: 'X-platform-security-realm',\n        X_PLATFORM_SECURITY_BEARER_ONLY: 'X-platform-security-bearer-only',\n        X_PLATFORM_SECURITY_APPLICATION: 'X-platform-security-application'\n    },\n    CONTENT_TYPE: {\n        APPLICATION_JSON: 'application/json',\n        APPLICATION_X_WWW_FORM_URLENCODED: 'application/x-www-form-urlencoded',\n        TEXT_HTML: 'text/html',\n        TEXT_PLAIN: 'text/plain'\n    },\n    XMLHTTPREQUEST_READYSTATE: {\n        UNSENT: 0,\n        OPENED: 1,\n        HEADERS_RECEIVED: 2,\n        LOADING: 3,\n        DONE:4\n    }\n}\n\n// Security\nexport const SECURITY = {\n    AUTH_ENDPOINT: '/openid-connect'\n}","import { exists, checkMethod, checkParam } from '../utils';\nclass HttpResponse {\n\n    constructor(url, status, content, headers) {\n        this.url = url;\n        this.status = status;\n        this.content = content;\n        this.headers = {};\n        if (exists(headers) && typeof headers === 'string') {\n            const headerArray = headers.trim().split(/[\\r\\n]+/);\n            for (let i = 0; i < headerArray.length; i++) {\n                const line = headerArray[i];\n                const parts = line.split(': ');\n                if (parts.length === 2) {\n                    const header = parts.shift().toLowerCase();\n                    const value = parts.join(': ');\n                    this.headers[header] = value;\n                }\n            }\n        }\n    }\n\n    getUrl() {\n        return this.url;\n    }\n\n    getContent() {\n        return this.content;\n    }\n\n    getStatus() {\n        return this.status;\n    }\n\n    getHeaders() {\n        return this.headers;\n    }\n\n    getHeaderByName(name) {\n        checkMethod('getHeaderByName');\n        checkParam(name, 'name');\n        \n        return this.headers[name.toLowerCase()];\n    }\n\n}\n\nexport { HttpResponse }","class HttpException {\n\n    constructor(message, status, timedout) {\n        this.message = message;\n        this.status = status || 0;\n        this.timedout = timedout || false;\n    }\n\n    getMessage() {\n        return this.message;\n    }\n\n    getStatus() {\n        return this.status;\n    }\n\n    isTimedout() {\n        return this.timedout;\n    }\n\n}\n\nexport { HttpException }","import { LoggerFactory } from '../logging';\nimport { HttpResponse } from './httpResponse';\nimport { HttpException } from './httpException';\nimport { HTTP } from '../platform/constants';\nclass Executor {\n\n    constructor(configuration, client) {\n        this.configuration = configuration;\n        this.client = client;\n    }\n\n    execute(timeout, worker) {\n\n        let httpWorker = null;\n        if (this.client && this.client.hasService('HttpWorker')) {\n            httpWorker = this.client.getService('HttpWorker');\n        }\n\n        const useWorker = httpWorker !== null && (worker === true || timeout === true);\n        let timeoutToUse = 0;\n        if (timeout !== true && timeout !== false) {\n            timeoutToUse = timeout;\n        }\n\n        let requestInterceptors = [];\n        if (this.client) {\n            requestInterceptors = this.client.getService('HttpClientInterceptor').getRequestInterceptors();\n            Executor.LOGGER.trace('Request interceptors found:', requestInterceptors);\n        }\n\n        let responseInterceptors = [];\n        if (this.client) {\n            responseInterceptors = this.client.getService('HttpClientInterceptor').getResponseInterceptors();\n            Executor.LOGGER.trace('Response interceptors found:', responseInterceptors);\n        }\n\n        let directCall = (resolve, reject) => {\n\n            const self = this;\n            const httpRequest = new XMLHttpRequest();\n            const async = true;\n            \n            httpRequest.open(this.configuration.method, this.configuration.url, async);\n            httpRequest.url = this.configuration.url;\n            httpRequest.method = this.configuration.method;\n            httpRequest.withCredentials = true;\n\n            for (let i = 0; i < requestInterceptors.length; i++) {\n                const requestInterceptor = requestInterceptors[i];\n                requestInterceptor.handleRequest(httpRequest);\n            }\n\n            if (this.configuration.headers && this.configuration.headers.length > 0) {\n                for (let i = 0; i < this.configuration.headers.length; i++) {\n                    const header = this.configuration.headers[i];\n                    httpRequest.setRequestHeader(header.name, header.value);\n                }\n            }\n\n            httpRequest.timeout = timeoutToUse;\n\n            if (this.configuration.responseType) {\n                httpRequest.responseType = this.configuration.responseType;\n            }\n\n            httpRequest.ontimeout = function () {\n                const message = this.statusText || 'Timeout occurred';\n                const httpException = new HttpException(message, this.status, true);\n                Executor.LOGGER.error(httpException);\n                reject(httpException);\n            }\n\n            httpRequest.onerror = function () {\n                let message = this.statusText || 'Unspecified error occured';\n                const httpException = new HttpException(message, this.status);\n                Executor.LOGGER.error(httpException);\n                reject(httpException);\n            }\n\n            httpRequest.onreadystatechange = function () {\n                if (this.readyState === HTTP.XMLHTTPREQUEST_READYSTATE.DONE) {\n                    Executor.LOGGER.trace('Request to ', self.configuration.url, 'finished with', this.status);\n                }\n                if (this.readyState === HTTP.XMLHTTPREQUEST_READYSTATE.DONE && this.status >= 200 && this.status < 300) {\n                    // https://www.w3.org/TR/cors/#simple-response-header\n                    const httpResponse = new HttpResponse(this.url, this.status, this.response, this.getAllResponseHeaders());\n                    \n                    for (let i = 0; i < responseInterceptors.length; i++) {\n                        const responseInterceptor = responseInterceptors[i];\n                        responseInterceptor.handleResponse(httpResponse);\n                    }\n\n                    resolve(httpResponse);\n                } else if (this.readyState === HTTP.XMLHTTPREQUEST_READYSTATE.DONE && this.status >= 300) {\n                    const httpException = new HttpException(this.statusText, this.status);\n                    Executor.LOGGER.error(httpException);\n                    reject(httpException);\n                }\n            }\n\n            httpRequest.send(this.configuration.requestBody);\n\n        }\n        directCall = directCall.bind(this);\n\n        let workerCall = (resolve, reject) => {\n           \n            const collectedRequestHeaders = [];\n            for (let i = 0; i < requestInterceptors.length; i++) {\n                const requestInterceptor = requestInterceptors[i];\n                \n                requestInterceptor.handleRequest({\n                    url: this.configuration.url,\n                    setRequestHeader: (name, value) => {\n                        const header = {name, value};\n                        collectedRequestHeaders.push(header);\n                    }\n                });\n            }\n\n            const worker = httpWorker.createWorker();\n            try {\n                worker.onmessage = function(event) {\n                    worker.terminate();\n                    Executor.LOGGER.trace('Message form Worker', event);\n                    const msg = event.data;\n                    if (msg.error) {\n                        const httpException = new HttpException(msg.message, msg.status, msg.timedout);\n                        Executor.LOGGER.error(httpException);\n                        reject(httpException);\n                    } else {\n                        const httpResponse = new HttpResponse(msg.url, msg.status, msg.response, msg.responseHeaders);\n\n                        for (let i = 0; i < responseInterceptors.length; i++) {\n                            const responseInterceptor = responseInterceptors[i];\n                            responseInterceptor.handleResponse(httpResponse);\n                        }\n\n                        resolve(httpResponse);\n                    }\n                }\n                worker.onerror = function(event) {\n                    const httpException = new HttpException(event.data, 0, false);\n                    reject(httpException);\n                }\n                worker.postMessage({conf: this.configuration, timeout: timeoutToUse, requestHeaders: collectedRequestHeaders});\n            } catch (error) {\n                const httpException = new HttpException(error, 0, false);\n                reject(httpException);\n            }\n\n        }\n\n        workerCall = workerCall.bind(this);\n\n        return new Promise((resolve, reject) => {\n            if (useWorker && this.client && this.client.hasService('HttpWorker')) {\n                workerCall(resolve, reject);\n            } else {\n                directCall(resolve, reject);\n            }\n        });\n        \n    }\n\n}\n\nExecutor.LOGGER = LoggerFactory.getLogger('Executor');\n\nexport { Executor }","import { Executor } from './executor';\nimport { RESPONSE_TYPE } from '../platform/constants';\nclass ResponseBuilder {\n\n    constructor(configuration, client) {\n        this.configuration = configuration;\n        this.executor = new Executor(configuration, client);\n    }\n\n    readBytes() {\n        this.configuration.responseType = RESPONSE_TYPE.ARRAY_BUFFER;\n        return this.executor;\n    }\n\n    readString() {\n        this.configuration.responseType = RESPONSE_TYPE.TEXT;\n        return this.executor;\n    }\n\n    readObject() {\n        this.configuration.responseType = RESPONSE_TYPE.JSON;\n        return this.executor;\n    }\n\n    withoutResult() {\n        return this.executor;\n    }\n}\n\nexport { ResponseBuilder }","import { ResponseBuilder } from './reponseBuilder';\nimport { exists } from '../utils';\nclass RequestBuilder {\n\n    constructor(configuration, client) {\n        this.configuration = configuration;\n        this.reponseBuilder = new ResponseBuilder(configuration, client);\n    }\n\n    withHeader(name, value) {\n        if (!this.configuration.headers) {\n            this.configuration.headers = [];\n        }\n        this.configuration.headers.push({ name, value });\n        return this;\n    }\n\n    withHeadersInfo(headersInfo) {\n        if (exists(headersInfo)) {\n            if (!this.configuration.headers) {\n                this.configuration.headers = [];\n            }\n            for (let name in headersInfo) {\n                if (headersInfo.hasOwnProperty(name)) {\n                    const value = headersInfo[name];\n                    this.configuration.headers.push({ name, value });\n                }\n            }\n        }\n        return this;\n    }\n\n    withContent(data) {\n        this.configuration.requestBody = data;\n        return this.reponseBuilder;\n    }\n\n    withoutContent() {\n        return this.reponseBuilder;\n    }\n}\n\nexport { RequestBuilder }","import { RequestBuilder } from './requestBuilder';\nimport { HTTP } from '../platform/constants';\nclass HttpClient {\n\n    constructor(client) {\n        this.client = client;\n    }\n\n    request(url, method) {\n        const configuration = {\n            url, method\n        }\n        this.requestBuilder = new RequestBuilder(configuration, this.client);\n        return this.requestBuilder;\n    }\n\n    get(url) {\n        return this.request(url, HTTP.METHOD.GET);\n    }\n\n    post(url) {\n        return this.request(url, HTTP.METHOD.POST);\n    }\n\n    put(url) {\n        return this.request(url, HTTP.METHOD.PUT);\n    }\n\n    delete(url) {\n        return this.request(url, HTTP.METHOD.DELETE);\n    }\n}\n\nexport { HttpClient }","class HttpClientInterceptor {\n\n    constructor() {\n        this.requestHandlers = new Set();\n        this.responseHandlers = new Set();\n    }\n\n    addRequestInterceptor(handler) {\n        this.requestHandlers.add(handler);\n    }\n\n    getRequestInterceptors() {\n        let list = [];\n        this.requestHandlers.forEach(handler => list.push(handler));\n        return list;\n    }\n\n    addResponseInterceptor(handler) {\n        this.responseHandlers.add(handler);\n    }\n\n    getResponseInterceptors() {\n        let list = [];\n        this.responseHandlers.forEach(handler => list.push(handler));\n        return list;\n    }\n}\n\nexport { HttpClientInterceptor }","import { checkMethod, checkParam, parseUrl, exists } from '../utils';\nimport { ServiceProvider  } from './serviceProvider';\nimport { LoggerFactory } from '../logging';\nimport { HTTP } from './constants';\n\nclass ClientScope {\n\n    constructor() {\n        this.clientIds = new Map();\n    }\n\n    handleRequest(httpRequest) {\n        checkMethod('handleRequest');\n        checkParam(httpRequest, 'httpRequest');\n        const clientId = this.getClientId(httpRequest.url);\n        if (exists(clientId)) {\n            ClientScope.LOGGER.trace('Using ClientId', clientId);\n            httpRequest.setRequestHeader(HTTP.HEADER_NAME.X_CLIENT_SESSION_ID, clientId);\n        }\n    }\n\n    handleResponse(httpResponse) {\n        checkMethod('handleResponse');\n        checkParam(httpResponse, 'httpResponse');\n        const clientId = this.getClientId(httpResponse.url);\n        const newClientId = httpResponse.getHeaderByName(HTTP.HEADER_NAME.X_CLIENT_SESSION_ID);\n        if (exists(clientId) && exists(newClientId) && clientId !== newClientId) {\n            throw new Error('Client Id does not match!');\n        }\n        if (!exists(clientId) && exists(newClientId)) {\n            ClientScope.LOGGER.debug('New ClientId found', newClientId);\n            this.setClientId(httpResponse.url, newClientId);\n        }\n    }\n\n    initServiceProvider(client) {\n        checkMethod('initServiceProvider');\n        checkParam(client, 'client');\n        client.getService('HttpClientInterceptor').addRequestInterceptor(this);\n        client.getService('HttpClientInterceptor').addResponseInterceptor(this);\n    }\n\n    getClientId(url) {\n        const result = parseUrl(url);\n        const key = ClientScope.calcKey(result.hostname, result.port)\n        return this.clientIds.get(key);\n    }\n\n    setClientId(url, clientId) {\n        const result = parseUrl(url);\n        const key = ClientScope.calcKey(result.hostname, result.port)\n        this.clientIds.set(key, clientId);\n        ClientScope.LOGGER.trace('Setting ClientId', clientId, 'for', url, 'with key', key);\n    }\n\n}\n\nClientScope.calcKey = function(hostname, port) {\n    return hostname + port;\n}\n\nClientScope.LOGGER = LoggerFactory.getLogger('ClientScope');\n\nfunction register(client) {\n    if (exists(client)) {\n        const clientScopeProvider = new ServiceProvider(ClientScope, 'ClientScope');\n\n        client.registerServiceProvider(clientScopeProvider);\n    }\n}\n\nexport { register }","import {VALUE_CHANGED_COMMAND_ID, PRESENTATION_MODEL_DELETED_COMMAND_ID} from './commands/commandConstants';\n\nexport default class BlindCommandBatcher {\n    constructor(folding = true, maxBatchSize = 50) {\n        this.folding = folding;\n        this.maxBatchSize = maxBatchSize;\n    }\n    batch(queue) {\n        let batch = [];\n        let batchLength = 0;\n        while(queue[batchLength] && batchLength <= this.maxBatchSize) {\n            const element = queue[batchLength];\n            batchLength++;\n            if(this.folding) {\n                if(element.command.id == VALUE_CHANGED_COMMAND_ID &&\n                    batch.length > 0 &&\n                    batch[batch.length - 1].command.id == VALUE_CHANGED_COMMAND_ID &&\n                    element.command.attributeId == batch[batch.length - 1].command.attributeId) {\n                    //merge ValueChange for same value\n                    batch[batch.length - 1].command.newValue = element.command.newValue;\n                } else if(element.command.id == PRESENTATION_MODEL_DELETED_COMMAND_ID) {\n                    //We do not need it...\n                } else {\n                    batch.push(element);\n                }\n            } else {\n                batch.push(element);\n            }\n            if(element.handler) {\n                break;\n            }\n        }\n        queue.splice(0, batchLength);\n        return batch;\n    }\n}","export const ATTRIBUTE_METADATA_CHANGED_COMMAND_ID = 'AttributeMetadataChanged';\nexport const CALL_ACTION_COMMAND_ID = 'CallAction';\nexport const CHANGE_ATTRIBUTE_METADATA_COMMAND_ID = 'ChangeAttributeMetadata';\nexport const CREATE_CONTEXT_COMMAND_ID = 'CreateContext';\nexport const CREATE_CONTROLLER_COMMAND_ID = 'CreateController';\nexport const CREATE_PRESENTATION_MODEL_COMMAND_ID = 'CreatePresentationModel';\nexport const DELETE_PRESENTATION_MODEL_COMMAND_ID = 'DeletePresentationModel';\nexport const DESTROY_CONTEXT_COMMAND_ID = 'DestroyContext';\nexport const DESTROY_CONTROLLER_COMMAND_ID = 'DestroyController';\nexport const INTERRUPT_LONG_POLL_COMMAND_ID = 'InterruptLongPoll';\nexport const PRESENTATION_MODEL_DELETED_COMMAND_ID = 'PresentationModelDeleted';\nexport const START_LONG_POLL_COMMAND_ID = 'StartLongPoll';\nexport const VALUE_CHANGED_COMMAND_ID = 'ValueChanged';\n\nexport const ID = \"id\";\nexport const ATTRIBUTE_ID = \"a_id\";\nexport const PM_ID = \"p_id\";\nexport const CONTROLLER_ID = \"c_id\";\nexport const PM_TYPE = \"t\";\nexport const NAME = \"n\";\nexport const VALUE = \"v\";\nexport const PARAMS = \"p\";\nexport const PM_ATTRIBUTES = \"a\";","import {VALUE_CHANGED_COMMAND_ID} from '../commandConstants';\nimport {checkMethod, checkParam} from '../../../utils';\n\nexport default class ValueChangedCommand {\n\n    constructor() {\n        this.id = VALUE_CHANGED_COMMAND_ID;\n    }\n\n    init(attributeId, newValue) {\n        checkMethod('ValueChangedCommand.init()');\n        checkParam(attributeId, 'attributeId');\n\n        this.attributeId = attributeId;\n        this.newValue = newValue;\n    }\n}","import {ATTRIBUTE_METADATA_CHANGED_COMMAND_ID} from '../commandConstants';\nimport {checkMethod, checkParam} from '../../../utils';\n\nexport default class AttributeMetadataChangedCommand {\n\n    constructor() {\n        this.id = ATTRIBUTE_METADATA_CHANGED_COMMAND_ID;\n    }\n\n    init(attributeId, metadataName, value) {\n        checkMethod('AttributeMetadataChangedCommand.init()');\n        checkParam(attributeId, 'attributeId');\n        checkParam(metadataName, 'metadataName');\n\n        this.attributeId = attributeId;\n        this.metadataName = metadataName;\n        this.value = value;\n    }\n}","import {CALL_ACTION_COMMAND_ID} from '../commandConstants';\nimport {checkMethod, checkParam} from '../../../utils';\n\nexport default class CallActionCommand {\n    \n    constructor() {\n        this.id = CALL_ACTION_COMMAND_ID;\n    }\n\n    init(controllerid, actionName, params) {\n        checkMethod('CreateControllerCommand.init()');\n        checkParam(controllerid, 'controllerid');\n        checkParam(actionName, 'actionName');\n\n        this.controllerid = controllerid;\n        this.actionName = actionName;\n        this.params = params;\n    }\n\n}","import {CHANGE_ATTRIBUTE_METADATA_COMMAND_ID} from '../commandConstants';\nimport {checkMethod, checkParam} from '../../../utils';\n\nexport default class ChangeAttributeMetadataCommand {\n\n    constructor() {\n        this.id = CHANGE_ATTRIBUTE_METADATA_COMMAND_ID;\n    }\n\n    init(attributeId, metadataName, value) {\n        checkMethod('ChangeAttributeMetadataCommand.init()');\n        checkParam(attributeId, 'attributeId');\n        checkParam(metadataName, 'metadataName');\n\n        this.attributeId = attributeId;\n        this.metadataName = metadataName;\n        this.value = value;\n    }\n}","import {CREATE_CONTEXT_COMMAND_ID} from '../commandConstants';\n\nexport default class CreateContextCommand {\n\n    constructor() {\n        this.id = CREATE_CONTEXT_COMMAND_ID;\n    }\n\n}","import {CREATE_CONTROLLER_COMMAND_ID} from '../commandConstants';\nimport {checkMethod, checkParam} from '../../../utils';\n\nexport default class CreateControllerCommand {\n\n    constructor() {\n        this.id = CREATE_CONTROLLER_COMMAND_ID;\n    }\n\n    init(controllerName, parentControllerId) {\n        checkMethod('CreateControllerCommand.init()');\n        checkParam(controllerName, 'controllerName');\n\n        this.controllerName = controllerName;\n        this.parentControllerId = parentControllerId;\n    }\n\n}","import {CREATE_PRESENTATION_MODEL_COMMAND_ID} from '../commandConstants';\nimport {checkMethod, checkParam} from '../../../utils';\n\nexport default class CreatePresentationModelCommand {\n\n    constructor() {\n        this.id = CREATE_PRESENTATION_MODEL_COMMAND_ID;\n    }\n\n    init(presentationModel) {\n        checkMethod('CreatePresentationModelCommand.init()');\n        checkParam(presentationModel, 'presentationModel');\n\n        this.attributes = [];\n        this.clientSideOnly = false;\n        this.pmId = presentationModel.id;\n        this.pmType = presentationModel.presentationModelType;\n        var command = this;\n        presentationModel.getAttributes().forEach(function (attr) {\n            command.attributes.push({\n                propertyName: attr.propertyName,\n                id: attr.id,\n                value: attr.getValue()\n            });\n        });\n    }\n}","import {DELETE_PRESENTATION_MODEL_COMMAND_ID} from '../commandConstants';\nimport {checkMethod, checkParam} from '../../../utils';\n\nexport default class DeletePresentationModelCommand {\n\n    constructor() {\n        this.id = DELETE_PRESENTATION_MODEL_COMMAND_ID;\n    }\n\n    init(pmId) {\n        checkMethod('DeletePresentationModelCommand.init()');\n        checkParam(pmId, 'pmId');\n\n        this.pmId = pmId;\n    }\n}\n","import {DESTROY_CONTEXT_COMMAND_ID} from '../commandConstants';\n\nexport default class DestroyContextCommand {\n\n    constructor() {\n        this.id = DESTROY_CONTEXT_COMMAND_ID;\n    }\n\n}","import {DESTROY_CONTROLLER_COMMAND_ID} from '../commandConstants';\nimport {checkMethod, checkParam} from '../../../utils';\n\nexport default class DestroyControllerCommand {\n\n    constructor() {\n        this.id = DESTROY_CONTROLLER_COMMAND_ID;\n    }\n\n    init(controllerId) {\n        checkMethod('DestroyControllerCommand.init()');\n        checkParam(controllerId, 'controllerId');\n\n        this.controllerId = controllerId;\n    }\n\n}","import {INTERRUPT_LONG_POLL_COMMAND_ID} from '../commandConstants'\n\nexport default class InterruptLongPollCommand {\n\n    constructor() {\n        this.id = INTERRUPT_LONG_POLL_COMMAND_ID;\n    }\n}","import {PRESENTATION_MODEL_DELETED_COMMAND_ID} from '../commandConstants';\nimport {checkMethod, checkParam} from '../../../utils';\n\nexport default class PresentationModelDeletedCommand {\n\n    constructor() {\n        this.id = PRESENTATION_MODEL_DELETED_COMMAND_ID;\n    }\n\n    init(pmId) {\n        checkMethod('PresentationModelDeletedCommand.init()');\n        checkParam(pmId, 'pmId');\n\n        this.pmId = pmId;\n    }\n}","import {START_LONG_POLL_COMMAND_ID} from '../commandConstants'\n\nexport default class StartLongPollCommand {\n\n    constructor() {\n        this.id = START_LONG_POLL_COMMAND_ID;\n    }\n}\n","export default class CodecError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}","import {exists, checkMethod, checkParam} from '../../utils';\nimport {JS_STRING_TYPE} from '../constants';\nimport {\n    CREATE_PRESENTATION_MODEL_COMMAND_ID,\n    VALUE_CHANGED_COMMAND_ID,\n    ATTRIBUTE_METADATA_CHANGED_COMMAND_ID,\n    CALL_ACTION_COMMAND_ID,\n    CHANGE_ATTRIBUTE_METADATA_COMMAND_ID,\n    CREATE_CONTEXT_COMMAND_ID,\n    CREATE_CONTROLLER_COMMAND_ID,\n    DELETE_PRESENTATION_MODEL_COMMAND_ID,\n    DESTROY_CONTEXT_COMMAND_ID,\n    DESTROY_CONTROLLER_COMMAND_ID,\n    INTERRUPT_LONG_POLL_COMMAND_ID,\n    PRESENTATION_MODEL_DELETED_COMMAND_ID,\n    START_LONG_POLL_COMMAND_ID\n} from './commandConstants';\nimport {ID, PM_ID, PM_TYPE, PM_ATTRIBUTES, NAME, ATTRIBUTE_ID, VALUE, CONTROLLER_ID, PARAMS} from './commandConstants';\nimport ValueChangedCommand from './impl/valueChangedCommand';\nimport AttributeMetadataChangedCommand from './impl/attributeMetadataChangedCommand';\nimport CallActionCommand from './impl/callActionCommand';\nimport ChangeAttributeMetadataCommand from './impl/changeAttributeMetadataCommand';\nimport CreateContextCommand from './impl/createContextCommand';\nimport CreateControllerCommand from './impl/createControllerCommand';\nimport CreatePresentationModelCommand from './impl/createPresentationModelCommand';\nimport DeletePresentationModelCommand from './impl/deletePresentationModelCommand';\nimport DestroyContextCommand from './impl/destroyContextCommand';\nimport DestroyControllerCommand from './impl/destroyControllerCommand';\nimport InterruptLongPollCommand from './impl/interruptLongPollCommand';\nimport PresentationModelDeletedCommand from './impl/presentationModelDeletedCommand';\nimport StartLongPollCommand from './impl/startLongPollCommand';\nimport CodecError from './codecError';\n\n\nexport default class Codec {\n\n    static _encodeAttributeMetadataChangedCommand(command) {\n        checkMethod(\"Codec.encodeAttributeMetadataChangedCommand\");\n        checkParam(command, \"command\");\n        checkParam(command.attributeId, \"command.attributeId\");\n        checkParam(command.metadataName, \"command.metadataName\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = ATTRIBUTE_METADATA_CHANGED_COMMAND_ID;\n        jsonCommand[ATTRIBUTE_ID] = command.attributeId;\n        jsonCommand[NAME] = command.metadataName;\n        jsonCommand[VALUE] = command.value;\n        return jsonCommand;\n    }\n\n    static _decodeAttributeMetadataChangedCommand(jsonCommand) {\n        checkMethod(\"Codec.decodeAttributeMetadataChangedCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n        checkParam(jsonCommand[ATTRIBUTE_ID], \"jsonCommand[ATTRIBUTE_ID]\");\n        checkParam(jsonCommand[NAME], \"jsonCommand[NAME]\");\n\n        let command = new AttributeMetadataChangedCommand();\n        command.attributeId = jsonCommand[ATTRIBUTE_ID];\n        command.metadataName = jsonCommand[NAME];\n        command.value = jsonCommand[VALUE];\n        return command;\n    }\n\n    static _encodeCallActionCommand(command) {\n        checkMethod(\"Codec.encodeCallActionCommand\");\n        checkParam(command, \"command\");\n        checkParam(command.controllerid, \"command.controllerid\");\n        checkParam(command.actionName, \"command.actionName\");\n        checkParam(command.params, \"command.params\");\n\n\n        let jsonCommand = {};\n        jsonCommand[ID] = CALL_ACTION_COMMAND_ID;\n        jsonCommand[CONTROLLER_ID] = command.controllerid;\n        jsonCommand[NAME] = command.actionName;\n        jsonCommand[PARAMS] = command.params.map((param) => {\n            let result = {};\n            result[NAME] = param.name;\n            if (exists(param.value)) {\n                result[VALUE] = param.value;\n            }\n            return result;\n        });\n        return jsonCommand;\n    }\n\n    static _decodeCallActionCommand(jsonCommand) {\n        checkMethod(\"Codec.decodeCallActionCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n        checkParam(jsonCommand[CONTROLLER_ID], \"jsonCommand[CONTROLLER_ID]\");\n        checkParam(jsonCommand[NAME], \"jsonCommand[NAME]\");\n        checkParam(jsonCommand[PARAMS], \"jsonCommand[PARAMS]\");\n\n        let command = new CallActionCommand();\n        command.controllerid = jsonCommand[CONTROLLER_ID];\n        command.actionName = jsonCommand[NAME];\n        //TODO: Für die Params sollten wir eine Klasse bereitstellen\n        command.params = jsonCommand[PARAMS].map((param) => {\n            return {\n                'name': param[NAME],\n                'value': exists(param[VALUE]) ? param[VALUE] : null\n            };\n        });\n        return command;\n    }\n\n    static _encodeChangeAttributeMetadataCommand(command) {\n        checkMethod(\"Codec.encodeChangeAttributeMetadataCommand\");\n        checkParam(command, \"command\");\n        checkParam(command.attributeId, \"command.attributeId\");\n        checkParam(command.metadataName, \"command.metadataName\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = CHANGE_ATTRIBUTE_METADATA_COMMAND_ID;\n        jsonCommand[ATTRIBUTE_ID] = command.attributeId;\n        jsonCommand[NAME] = command.metadataName;\n        jsonCommand[VALUE] = command.value;\n        return jsonCommand;\n    }\n\n    static _decodeChangeAttributeMetadataCommand(jsonCommand) {\n        checkMethod(\"Codec.decodeChangeAttributeMetadataCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n        checkParam(jsonCommand[ATTRIBUTE_ID], \"jsonCommand[ATTRIBUTE_ID]\");\n        checkParam(jsonCommand[NAME], \"jsonCommand[NAME]\");\n\n        let command = new ChangeAttributeMetadataCommand();\n        command.attributeId = jsonCommand[ATTRIBUTE_ID];\n        command.metadataName = jsonCommand[NAME];\n        command.value = jsonCommand[VALUE];\n        return command;\n    }\n\n    static _encodeCreateContextCommand(command) {\n        checkMethod(\"Codec.encodeCreateContextCommand\");\n        checkParam(command, \"command\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = CREATE_CONTEXT_COMMAND_ID;\n        return jsonCommand;\n    }\n\n    static _decodeCreateContextCommand(jsonCommand) {\n        checkMethod(\"Codec.decodeCreateContextCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n\n        let command = new CreateContextCommand();\n        return command;\n    }\n\n    static _encodeCreateControllerCommand(command) {\n        checkMethod(\"Codec._encodeCreateControllerCommand\");\n        checkParam(command, \"command\");\n        checkParam(command.controllerName, \"command.controllerName\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = CREATE_CONTROLLER_COMMAND_ID;\n        jsonCommand[NAME] = command.controllerName;\n        jsonCommand[CONTROLLER_ID] = command.parentControllerId;\n        return jsonCommand;\n    }\n\n    static _decodeCreateControllerCommand(jsonCommand) {\n        checkMethod(\"Codec._decodeCreateControllerCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n        checkParam(jsonCommand[NAME], \"jsonCommand[NAME]\");\n        checkParam(jsonCommand[CONTROLLER_ID], \"jsonCommand[CONTROLLER_ID]\");\n\n        let command = new CreateControllerCommand();\n        command.controllerName = jsonCommand[NAME];\n        command.parentControllerId = jsonCommand[CONTROLLER_ID];\n        return command;\n    }\n\n    static _encodeCreatePresentationModelCommand(command) {\n        checkMethod(\"Codec.encodeCreatePresentationModelCommand\");\n        checkParam(command, \"command\");\n        checkParam(command.pmId, \"command.pmId\");\n        checkParam(command.pmType, \"command.pmType\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = CREATE_PRESENTATION_MODEL_COMMAND_ID;\n        jsonCommand[PM_ID] = command.pmId;\n        jsonCommand[PM_TYPE] = command.pmType;\n        jsonCommand[PM_ATTRIBUTES] = command.attributes.map((attribute) => {\n            let result = {};\n            result[NAME] = attribute.propertyName;\n            result[ATTRIBUTE_ID] = attribute.id;\n            if (exists(attribute.value)) {\n                result[VALUE] = attribute.value;\n            }\n            return result;\n        });\n        return jsonCommand;\n    }\n\n    static _decodeCreatePresentationModelCommand(jsonCommand) {\n        checkMethod(\"Codec.decodeCreatePresentationModelCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n        checkParam(jsonCommand[PM_ID], \"jsonCommand[PM_ID]\");\n        checkParam(jsonCommand[PM_TYPE], \"jsonCommand[PM_TYPE]\");\n\n        let command = new CreatePresentationModelCommand();\n        command.pmId = jsonCommand[PM_ID];\n        command.pmType = jsonCommand[PM_TYPE];\n\n        //TODO: Für die Attribute sollten wir eine Klasse bereitstellen\n        command.attributes = jsonCommand[PM_ATTRIBUTES].map((attribute) => {\n            return {\n                'propertyName': attribute[NAME],\n                'id': attribute[ATTRIBUTE_ID],\n                'value': exists(attribute[VALUE]) ? attribute[VALUE] : null\n            };\n        });\n        return command;\n    }\n\n    static _encodeDeletePresentationModelCommand(command) {\n        checkMethod(\"Codec._encodeDeletePresentationModelCommand\");\n        checkParam(command, \"command\");\n        checkParam(command.pmId, \"command.pmId\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = DELETE_PRESENTATION_MODEL_COMMAND_ID;\n        jsonCommand[PM_ID] = command.pmId;\n        return jsonCommand;\n    }\n\n    static _decodeDeletePresentationModelCommand(jsonCommand) {\n        checkMethod(\"Codec._decodeDeletePresentationModelCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n        checkParam(jsonCommand[PM_ID], \"jsonCommand[PM_ID]\");\n\n\n        let command = new DeletePresentationModelCommand();\n        command.pmId = jsonCommand[PM_ID];\n        return command;\n    }\n\n    static _encodeDestroyContextCommand(command) {\n        checkMethod(\"Codec._encodeDestroyContextCommand\");\n        checkParam(command, \"command\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = DESTROY_CONTEXT_COMMAND_ID;\n        return jsonCommand;\n    }\n\n    static _decodeDestroyContextCommand(jsonCommand) {\n        checkMethod(\"Codec._decodeDestroyContextCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n\n        let command = new DestroyContextCommand();\n        return command;\n    }\n\n    static _encodeDestroyControllerCommand(command) {\n        checkMethod(\"Codec._encodeDestroyControllerCommand\");\n        checkParam(command, \"command\");\n        checkParam(command.controllerId, \"command.controllerId\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = DESTROY_CONTROLLER_COMMAND_ID;\n        jsonCommand[CONTROLLER_ID] = command.controllerId;\n        return jsonCommand;\n    }\n\n    static _decodeDestroyControllerCommand(jsonCommand) {\n        checkMethod(\"Codec._decodeDestroyControllerCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n        checkParam(jsonCommand[CONTROLLER_ID], \"jsonCommand[CONTROLLER_ID]\");\n\n        let command = new DestroyControllerCommand();\n        command.controllerId = jsonCommand[CONTROLLER_ID];\n        return command;\n    }\n\n    static _encodeInterruptLongPollCommand(command) {\n        checkMethod(\"Codec._encodeInterruptLongPollCommand\");\n        checkParam(command, \"command\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = INTERRUPT_LONG_POLL_COMMAND_ID;\n        return jsonCommand;\n    }\n\n    static _decodeInterruptLongPollCommand(jsonCommand) {\n        checkMethod(\"Codec._decodeInterruptLongPollCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n\n        let command = new InterruptLongPollCommand();\n        return command;\n    }\n\n    static _encodePresentationModelDeletedCommand(command) {\n        checkMethod(\"Codec._encodePresentationModelDeletedCommand\");\n        checkParam(command, \"command\");\n        checkParam(command.pmId, \"command.pmId\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = PRESENTATION_MODEL_DELETED_COMMAND_ID;\n        jsonCommand[PM_ID] = command.pmId;\n        return jsonCommand;\n    }\n\n    static _decodePresentationModelDeletedCommand(jsonCommand) {\n        checkMethod(\"Codec._decodePresentationModelDeletedCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n        checkParam(jsonCommand[PM_ID], \"jsonCommand[PM_ID]\");\n\n        let command = new PresentationModelDeletedCommand();\n        command.pmId = jsonCommand[PM_ID];\n        return command;\n    }\n\n    static _encodeStartLongPollCommand(command) {\n        checkMethod(\"Codec._encodeStartLongPollCommand\");\n        checkParam(command, \"command\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = START_LONG_POLL_COMMAND_ID;\n        return jsonCommand;\n    }\n\n    static _decodeStartLongPollCommand(jsonCommand) {\n        checkMethod(\"Codec._decodeStartLongPollCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n\n        let command = new StartLongPollCommand();\n        return command;\n    }\n\n    static _encodeValueChangedCommand(command) {\n        checkMethod(\"Codec.encodeValueChangedCommand\");\n        checkParam(command, \"command\");\n        checkParam(command.attributeId, \"command.attributeId\");\n\n        let jsonCommand = {};\n        jsonCommand[ID] = VALUE_CHANGED_COMMAND_ID;\n        jsonCommand[ATTRIBUTE_ID] = command.attributeId;\n        if (exists(command.newValue)) {\n            jsonCommand[VALUE] = command.newValue;\n        }\n        return jsonCommand;\n    }\n\n    static _decodeValueChangedCommand(jsonCommand) {\n        checkMethod(\"Codec.decodeValueChangedCommand\");\n        checkParam(jsonCommand, \"jsonCommand\");\n        checkParam(jsonCommand[ATTRIBUTE_ID], \"jsonCommand[ATTRIBUTE_ID]\");\n\n        let command = new ValueChangedCommand();\n        command.attributeId = jsonCommand[ATTRIBUTE_ID];\n        if (exists(jsonCommand[VALUE])) {\n            command.newValue = jsonCommand[VALUE];\n        } else {\n            command.newValue = null;\n        }\n        return command;\n    }\n\n    static encode(commands) {\n        checkMethod(\"Codec.encode\");\n        checkParam(commands, \"commands\");\n\n        let self = this;\n        return JSON.stringify(commands.map((command) => {\n            if (command.id === ATTRIBUTE_METADATA_CHANGED_COMMAND_ID) {\n                return self._encodeAttributeMetadataChangedCommand(command);\n            } else if (command.id === CALL_ACTION_COMMAND_ID) {\n                return self._encodeCallActionCommand(command);\n            } else if (command.id === CHANGE_ATTRIBUTE_METADATA_COMMAND_ID) {\n                return self._encodeChangeAttributeMetadataCommand(command);\n            } else if (command.id === CREATE_CONTEXT_COMMAND_ID) {\n                return self._encodeCreateContextCommand(command);\n            } else if (command.id === CREATE_CONTROLLER_COMMAND_ID) {\n                return self._encodeCreateControllerCommand(command);\n            } else if (command.id === CREATE_PRESENTATION_MODEL_COMMAND_ID) {\n                return self._encodeCreatePresentationModelCommand(command);\n            } else if (command.id === DELETE_PRESENTATION_MODEL_COMMAND_ID) {\n                return self._encodeDeletePresentationModelCommand(command);\n            } else if (command.id === DESTROY_CONTEXT_COMMAND_ID) {\n                return self._encodeDestroyContextCommand(command);\n            } else if (command.id === DESTROY_CONTROLLER_COMMAND_ID) {\n                return self._encodeDestroyControllerCommand(command);\n            } else if (command.id === INTERRUPT_LONG_POLL_COMMAND_ID) {\n                return self._encodeInterruptLongPollCommand(command);\n            } else if (command.id === PRESENTATION_MODEL_DELETED_COMMAND_ID) {\n                return self._encodePresentationModelDeletedCommand(command);\n            } else if (command.id === START_LONG_POLL_COMMAND_ID) {\n                return self._encodeStartLongPollCommand(command);\n            } else if (command.id === VALUE_CHANGED_COMMAND_ID) {\n                return self._encodeValueChangedCommand(command);\n            } else {\n                throw new CodecError('Command of type ' + command.id + ' can not be handled');\n            }\n        }));\n    }\n\n    static decode(transmitted) {\n        checkMethod(\"Codec.decode\");\n        checkParam(transmitted, \"transmitted\");\n\n        if (typeof transmitted === JS_STRING_TYPE) {\n            let self = this;\n            return JSON.parse(transmitted).map(function (command) {\n                if (command.id === ATTRIBUTE_METADATA_CHANGED_COMMAND_ID) {\n                    return self._decodeAttributeMetadataChangedCommand(command);\n                } else if (command.id === CALL_ACTION_COMMAND_ID) {\n                    return self._decodeCallActionCommand(command);\n                } else if (command.id === CHANGE_ATTRIBUTE_METADATA_COMMAND_ID) {\n                    return self._decodeChangeAttributeMetadataCommand(command);\n                } else if (command.id === CREATE_CONTEXT_COMMAND_ID) {\n                    return self._decodeCreateContextCommand(command);\n                } else if (command.id === CREATE_CONTROLLER_COMMAND_ID) {\n                    return self._decodeCreateControllerCommand(command);\n                } else if (command.id === CREATE_PRESENTATION_MODEL_COMMAND_ID) {\n                    return self._decodeCreatePresentationModelCommand(command);\n                } else if (command.id === DELETE_PRESENTATION_MODEL_COMMAND_ID) {\n                    return self._decodeDeletePresentationModelCommand(command);\n                } else if (command.id === DESTROY_CONTEXT_COMMAND_ID) {\n                    return self._decodeDestroyContextCommand(command);\n                } else if (command.id === DESTROY_CONTROLLER_COMMAND_ID) {\n                    return self._decodeDestroyControllerCommand(command);\n                } else if (command.id === INTERRUPT_LONG_POLL_COMMAND_ID) {\n                    return self._decodeInterruptLongPollCommand(command);\n                } else if (command.id === PRESENTATION_MODEL_DELETED_COMMAND_ID) {\n                    return self._decodePresentationModelDeletedCommand(command);\n                } else if (command.id === START_LONG_POLL_COMMAND_ID) {\n                    return self._decodeStartLongPollCommand(command);\n                } else if (command.id === VALUE_CHANGED_COMMAND_ID) {\n                    return self._decodeValueChangedCommand(command);\n                } else {\n                    throw new CodecError('Command of type ' + command.id + ' can not be handled');\n                }\n            });\n        } else {\n            throw new CodecError('Can not decode data that is not of type string');\n        }\n    }\n}","export const JS_STRING_TYPE = 'string';\n\nexport const REMOTING_BEAN = 0;\nexport const BYTE = 1;\nexport const SHORT = 2;\nexport const INT = 3;\nexport const LONG = 4;\nexport const FLOAT = 5;\nexport const DOUBLE = 6;\nexport const BOOLEAN = 7;\nexport const STRING = 8;\nexport const DATE = 9;\nexport const ENUM = 10;\nexport const CALENDAR = 11;\nexport const LOCAL_DATE_FIELD_TYPE = 55;\nexport const LOCAL_DATE_TIME_FIELD_TYPE = 52;\nexport const ZONED_DATE_TIME_FIELD_TYPE = 54;\n\n\nexport const ADDED_TYPE = \"ADDED\";\nexport const REMOVED_TYPE = \"REMOVED\";\n","export default class EventBus {\n\n    constructor() {\n        this.eventHandlers = [];\n    }\n\n    onEvent(eventHandler) {\n        this.eventHandlers.push(eventHandler);\n    }\n\n    trigger(event) {\n        this.eventHandlers.forEach(handle => handle(event));\n    }\n}","import EventBus from './eventBus'\n\nvar presentationModelInstanceCount = 0; // todo dk: consider making this static in class\n\nexport default class ClientPresentationModel {\n    constructor(id, presentationModelType) {\n        this.id = id;\n        this.presentationModelType = presentationModelType;\n        this.attributes = [];\n        this.clientSideOnly = false;\n        this.dirty = false;\n        if (typeof id !== 'undefined' && id != null) {\n            this.id = id;\n        }\n        else {\n            this.id = (presentationModelInstanceCount++).toString();\n        }\n        this.invalidBus = new EventBus();\n        this.dirtyValueChangeBus = new EventBus();\n    }\n    // todo dk: align with Java version: move to ClientDolphin and auto-add to model store\n    /** a copy constructor for anything but IDs. Per default, copies are client side only, no automatic update applies. */\n    copy() {\n        var result = new ClientPresentationModel(null, this.presentationModelType);\n        result.clientSideOnly = true;\n        this.getAttributes().forEach((attribute) => {\n            var attributeCopy = attribute.copy();\n            result.addAttribute(attributeCopy);\n        });\n        return result;\n    }\n    //add array of attributes\n    addAttributes(attributes) {\n        if (!attributes || attributes.length < 1)\n            return;\n        attributes.forEach(attr => {\n            this.addAttribute(attr);\n        });\n    }\n    addAttribute(attribute) {\n        if (!attribute || (this.attributes.indexOf(attribute) > -1)) {\n            return;\n        }\n        if (this.findAttributeByPropertyName(attribute.propertyName)) {\n            throw new Error(\"There already is an attribute with property name: \" + attribute.propertyName\n                + \" in presentation model with id: \" + this.id);\n        }\n        if (attribute.getQualifier() && this.findAttributeByQualifier(attribute.getQualifier())) {\n            throw new Error(\"There already is an attribute with qualifier: \" + attribute.getQualifier()\n                + \" in presentation model with id: \" + this.id);\n        }\n        attribute.setPresentationModel(this);\n        this.attributes.push(attribute);\n        attribute.onValueChange(() => {\n            this.invalidBus.trigger({ source: this });\n        });\n    }\n    onInvalidated(handleInvalidate) {\n        this.invalidBus.onEvent(handleInvalidate);\n    }\n    /** returns a copy of the internal state */\n    getAttributes() {\n        return this.attributes.slice(0);\n    }\n    getAt(propertyName) {\n        return this.findAttributeByPropertyName(propertyName);\n    }\n    findAllAttributesByPropertyName(propertyName) {\n        var result = [];\n        if (!propertyName)\n            return null;\n        this.attributes.forEach((attribute) => {\n            if (attribute.propertyName == propertyName) {\n                result.push(attribute);\n            }\n        });\n        return result;\n    }\n    findAttributeByPropertyName(propertyName) {\n        if (!propertyName)\n            return null;\n        for (var i = 0; i < this.attributes.length; i++) {\n            if ((this.attributes[i].propertyName == propertyName)) {\n                return this.attributes[i];\n            }\n        }\n        return null;\n    }\n    findAttributeByQualifier(qualifier) {\n        if (!qualifier)\n            return null;\n        for (var i = 0; i < this.attributes.length; i++) {\n            if (this.attributes[i].getQualifier() == qualifier) {\n                return this.attributes[i];\n            }\n        }\n        return null;\n    }\n    findAttributeById(id) {\n        if (!id)\n            return null;\n        for (var i = 0; i < this.attributes.length; i++) {\n            if (this.attributes[i].id == id) {\n                return this.attributes[i];\n            }\n        }\n        return null;\n    }\n    syncWith(sourcePresentationModel) {\n        this.attributes.forEach((targetAttribute) => {\n            var sourceAttribute = sourcePresentationModel.getAt(targetAttribute.propertyName);\n            if (sourceAttribute) {\n                targetAttribute.syncWith(sourceAttribute);\n            }\n        });\n    }\n}\n","import BlindCommandBatcher from './commandBatcher';\nimport Codec from './commands/codec';\nimport ClientPresentationModel from './clientPresentationModel'\nimport { LoggerFactory } from '../logging';\n\nexport default class ClientConnector {\n\n    constructor(transmitter, clientDolphin, slackMS = 0, maxBatchSize = 50) {\n\n        this.commandQueue = [];\n        this.currentlySending = false;\n        this.pushEnabled = false;\n        this.waiting = false;\n        this.transmitter = transmitter;\n        this.clientDolphin = clientDolphin;\n        this.slackMS = slackMS;\n        this.codec = new Codec();\n        this.commandBatcher = new BlindCommandBatcher(true, maxBatchSize);\n    }\n\n    setCommandBatcher(newBatcher) {\n        this.commandBatcher = newBatcher;\n    }\n\n    setPushEnabled(enabled) {\n        this.pushEnabled = enabled;\n    }\n\n    setPushListener(newListener) {\n        this.pushListener = newListener;\n    }\n\n    setReleaseCommand(newCommand) {\n        this.releaseCommand = newCommand;\n    }\n\n    send(command, onFinished) {\n        this.commandQueue.push({ command: command, handler: onFinished });\n        if (this.currentlySending) {\n            this.release(); // there is not point in releasing if we do not send atm\n            return;\n        }\n        this.doSendNext();\n    }\n\n    doSendNext() {\n        if (this.commandQueue.length < 1) {\n            if (this.pushEnabled) {\n                this.enqueuePushCommand();\n            }\n            else {\n                this.currentlySending = false;\n                return;\n            }\n        }\n        this.currentlySending = true;\n        let cmdsAndHandlers = this.commandBatcher.batch(this.commandQueue);\n\n        if(cmdsAndHandlers.length > 0) {\n            let callback = cmdsAndHandlers[cmdsAndHandlers.length - 1].handler;\n            let commands = cmdsAndHandlers.map(cah => { return cah.command; });\n            this.transmitter.transmit(commands, (response) => {\n                let touchedPMs = [];\n                response.forEach((command) => {\n                    let touched = this.handle(command);\n                    if (touched)\n                        touchedPMs.push(touched);\n                });\n                if (callback) {\n                    callback.onFinished(touchedPMs); // todo: make them unique?\n                }\n                setTimeout(() => this.doSendNext(), this.slackMS);\n            }, (error) => {\n                callback.onError(error);\n            });\n        } else {\n            setTimeout(() => this.doSendNext(), this.slackMS);\n        }\n    }\n\n    handle(command) {\n        if (command.id === \"DeletePresentationModel\") {\n            return this.handleDeletePresentationModelCommand(command);\n        }\n        else if (command.id === \"CreatePresentationModel\") {\n            return this.handleCreatePresentationModelCommand(command);\n        }\n        else if (command.id === \"ValueChanged\") {\n            return this.handleValueChangedCommand(command);\n        }\n        else if (command.id === \"AttributeMetadataChanged\") {\n            return this.handleAttributeMetadataChangedCommand(command);\n        }\n        else {\n            ClientConnector.LOGGER.error(\"Cannot handle, unknown command \" + command);\n        }\n        return null;\n    }\n\n    handleDeletePresentationModelCommand(serverCommand) {\n        let model = this.clientDolphin.findPresentationModelById(serverCommand.pmId);\n        if (!model)\n            return null;\n        this.clientDolphin.getClientModelStore().deletePresentationModel(model, true);\n        return model;\n    }\n\n    handleCreatePresentationModelCommand(serverCommand) {\n        if (this.clientDolphin.getClientModelStore().containsPresentationModel(serverCommand.pmId)) {\n            throw new Error(\"There already is a presentation model with id \" + serverCommand.pmId + \"  known to the client.\");\n        }\n        let attributes = [];\n        serverCommand.attributes.forEach((attr) => {\n            let clientAttribute = this.clientDolphin.attribute(attr.propertyName, attr.qualifier, attr.value);\n            if (attr.id && attr.id.match(\".*S$\")) {\n                clientAttribute.id = attr.id;\n            }\n            attributes.push(clientAttribute);\n        });\n        let clientPm = new ClientPresentationModel(serverCommand.pmId, serverCommand.pmType);\n        clientPm.addAttributes(attributes);\n        if (serverCommand.clientSideOnly) {\n            clientPm.clientSideOnly = true;\n        }\n        this.clientDolphin.getClientModelStore().add(clientPm, false);\n        this.clientDolphin.updatePresentationModelQualifier(clientPm);\n        return clientPm;\n    }\n\n    handleValueChangedCommand(serverCommand) {\n        let clientAttribute = this.clientDolphin.getClientModelStore().findAttributeById(serverCommand.attributeId);\n        if (!clientAttribute) {\n            ClientConnector.LOGGER.error(\"attribute with id \" + serverCommand.attributeId + \" not found, cannot update to new value \" + serverCommand.newValue);\n            return null;\n        }\n        if (clientAttribute.getValue() === serverCommand.newValue) {\n            return null;\n        }\n        clientAttribute.setValueFromServer(serverCommand.newValue);\n        return null;\n    }\n\n    handleAttributeMetadataChangedCommand(serverCommand) {\n        let clientAttribute = this.clientDolphin.getClientModelStore().findAttributeById(serverCommand.attributeId);\n        if (!clientAttribute)\n            return null;\n        clientAttribute[serverCommand.metadataName] = serverCommand.value;\n        return null;\n    }\n\n    listen() {\n        if (!this.pushEnabled)\n            return;\n        if (this.waiting)\n            return;\n        // todo: how to issue a warning if no pushListener is set?\n        if (!this.currentlySending) {\n            this.doSendNext();\n        }\n    }\n\n    enqueuePushCommand() {\n        let me = this;\n        this.waiting = true;\n        this.commandQueue.push({\n            command: this.pushListener,\n            handler: {\n                onFinished: function () { me.waiting = false; },\n                onFinishedData: null\n            }\n        });\n    }\n\n    release() {\n        if (!this.waiting)\n            return;\n        this.waiting = false;\n        // todo: how to issue a warning if no releaseCommand is set?\n        this.transmitter.signal(this.releaseCommand);\n    }\n}\n\nClientConnector.LOGGER = LoggerFactory.getLogger('ClientConnector');","import EventBus from './eventBus';\nimport { LoggerFactory } from '../logging';\n\nexport default class ClientAttribute {\n\n    constructor(propertyName, qualifier, value) {\n\n        this.propertyName = propertyName;\n        this.id = \"\" + (ClientAttribute.clientAttributeInstanceCount++) + \"C\";\n        this.valueChangeBus = new EventBus();\n        this.qualifierChangeBus = new EventBus();\n        this.setValue(value);\n        this.setQualifier(qualifier);\n    }\n\n    copy() {\n        let result = new ClientAttribute(this.propertyName, this.getQualifier(), this.getValue());\n        return result;\n    }\n\n    setPresentationModel(presentationModel) {\n        if (this.presentationModel) {\n            throw new Error(\"You can not set a presentation model for an attribute that is already bound.\");\n        }\n        this.presentationModel = presentationModel;\n    }\n\n    getPresentationModel() {\n        return this.presentationModel;\n    }\n\n    getValue() {\n        return this.value;\n    }\n\n    setValueFromServer(newValue) {\n        let verifiedValue = ClientAttribute.checkValue(newValue);\n        if (this.value === verifiedValue)\n            return;\n        let oldValue = this.value;\n        this.value = verifiedValue;\n        this.valueChangeBus.trigger({ 'oldValue': oldValue, 'newValue': verifiedValue, 'sendToServer': false });\n    }\n\n    setValue(newValue) {\n        let verifiedValue = ClientAttribute.checkValue(newValue);\n        if (this.value === verifiedValue)\n            return;\n        let oldValue = this.value;\n        this.value = verifiedValue;\n        this.valueChangeBus.trigger({ 'oldValue': oldValue, 'newValue': verifiedValue, 'sendToServer': true });\n    }\n\n    setQualifier(newQualifier) {\n        if (this.qualifier === newQualifier)\n            return;\n        let oldQualifier = this.qualifier;\n        this.qualifier = newQualifier;\n        this.qualifierChangeBus.trigger({ 'oldValue': oldQualifier, 'newValue': newQualifier });\n        this.valueChangeBus.trigger({ \"oldValue\": this.value, \"newValue\": this.value, 'sendToServer': false });\n    }\n\n    getQualifier() {\n        return this.qualifier;\n    }\n\n    onValueChange(eventHandler) {\n        this.valueChangeBus.onEvent(eventHandler);\n        eventHandler({ \"oldValue\": this.value, \"newValue\": this.value, 'sendToServer': false });\n    }\n\n    onQualifierChange(eventHandler) {\n        this.qualifierChangeBus.onEvent(eventHandler);\n    }\n\n    syncWith(sourceAttribute) {\n        if (sourceAttribute) {\n            this.setQualifier(sourceAttribute.getQualifier()); // sequence is important\n            this.setValue(sourceAttribute.value);\n        }\n    }\n\n    static checkValue(value) {\n        if (value == null || typeof value === 'undefined') {\n            return null;\n        }\n        let result = value;\n        if (result instanceof String || result instanceof Boolean || result instanceof Number) {\n            result = value.valueOf();\n        }\n        if (result instanceof ClientAttribute) {\n            ClientAttribute.LOGGER.warn(\"An Attribute may not itself contain an attribute as a value. Assuming you forgot to call value.\");\n            result = this.checkValue(value.value);\n        }\n        let ok = false;\n        if (this.SUPPORTED_VALUE_TYPES.indexOf(typeof result) > -1 || result instanceof Date) {\n            ok = true;\n        }\n        if (!ok) {\n            throw new Error(\"Attribute values of this type are not allowed: \" + typeof value);\n        }\n        return result;\n    }\n\n}\n\nClientAttribute.LOGGER = LoggerFactory.getLogger('ClientAttribute');\nClientAttribute.SUPPORTED_VALUE_TYPES = [\"string\", \"number\", \"boolean\"];\nClientAttribute.clientAttributeInstanceCount = 0;\n","import ClientAttribute from './clientAttribute'\nimport ClientPresentationModel from './clientPresentationModel'\n\nexport default class ClientDolphin {\n\n    constructor() {\n    }\n\n    setClientConnector(clientConnector) {\n        this.clientConnector = clientConnector;\n    }\n\n    getClientConnector() {\n        return this.clientConnector;\n    }\n\n    send(command, onFinished) {\n        this.clientConnector.send(command, onFinished);\n    }\n\n    attribute(propertyName, qualifier, value) {\n        return new ClientAttribute(propertyName, qualifier, value);\n    }\n\n    presentationModel(id, type, ...attributes) {\n        const model = new ClientPresentationModel(id, type);\n        if (attributes && attributes.length > 0) {\n            attributes.forEach((attribute) => {\n                model.addAttribute(attribute);\n            });\n        }\n        this.getClientModelStore().add(model, true);\n        return model;\n    }\n\n    setClientModelStore(clientModelStore) {\n        this.clientModelStore = clientModelStore;\n    }\n\n    getClientModelStore() {\n        return this.clientModelStore;\n    }\n\n    listPresentationModelIds() {\n        return this.getClientModelStore().listPresentationModelIds();\n    }\n\n    listPresentationModels() {\n        return this.getClientModelStore().listPresentationModels();\n    }\n\n    findAllPresentationModelByType(presentationModelType) {\n        return this.getClientModelStore().findAllPresentationModelByType(presentationModelType);\n    }\n\n    getAt(id) {\n        return this.findPresentationModelById(id);\n    }\n\n    findPresentationModelById(id) {\n        return this.getClientModelStore().findPresentationModelById(id);\n    }\n\n    deletePresentationModel(modelToDelete) {\n        this.getClientModelStore().deletePresentationModel(modelToDelete, true);\n    }\n\n    updatePresentationModelQualifier(presentationModel) {\n        presentationModel.getAttributes().forEach(sourceAttribute => {\n            this.updateAttributeQualifier(sourceAttribute);\n        });\n    }\n\n    updateAttributeQualifier(sourceAttribute) {\n        if (!sourceAttribute.getQualifier())\n            return;\n        const attributes = this.getClientModelStore().findAllAttributesByQualifier(sourceAttribute.getQualifier());\n        attributes.forEach(targetAttribute => {\n            targetAttribute.setValue(sourceAttribute.getValue()); // should always have the same value\n        });\n    }\n\n    startPushListening(pushCommand, releaseCommand) {\n        this.clientConnector.setPushListener(pushCommand);\n        this.clientConnector.setReleaseCommand(releaseCommand);\n        this.clientConnector.setPushEnabled(true);\n\n        setTimeout(() => {\n            this.clientConnector.listen();\n        }, 0);\n    }\n\n    stopPushListening() {\n        this.clientConnector.setPushEnabled(false);\n    }\n}","\nexport default class Attribute {\n}\n\nAttribute.QUALIFIER_PROPERTY = \"qualifier\";\nAttribute.VALUE = \"value\";\n","import CreateContextCommand from './impl/createContextCommand';\nimport CreateControllerCommand from './impl/createControllerCommand';\nimport CallActionCommand from './impl/callActionCommand';\nimport DestroyControllerCommand from './impl/destroyControllerCommand';\nimport DestroyContextCommand from './impl/destroyContextCommand';\nimport StartLongPollCommand from './impl/startLongPollCommand';\nimport InterruptLongPollCommand from './impl/interruptLongPollCommand';\nimport CreatePresentationModelCommand from './impl/createPresentationModelCommand';\nimport DeletePresentationModelCommand from './impl/deletePresentationModelCommand';\nimport PresentationModelDeletedCommand from './impl/presentationModelDeletedCommand';\nimport ValueChangedCommand from './impl/valueChangedCommand';\nimport ChangeAttributeMetadataCommand from './impl/changeAttributeMetadataCommand';\nimport AttributeMetadataChangedCommand from './impl/attributeMetadataChangedCommand';\n\nexport default class CommandFactory {\n\n    static createCreateContextCommand() {\n        return new CreateContextCommand();\n    }\n\n    static createCreateControllerCommand(controllerName, parentControllerId) {\n        const command = new CreateControllerCommand();\n        command.init(controllerName, parentControllerId);\n        return command;\n    }\n\n    static createCallActionCommand(controllerid, actionName, params) {\n        const command = new CallActionCommand();\n        command.init(controllerid, actionName, params);\n        return command;\n    }\n\n    static createDestroyControllerCommand(controllerId) {\n        const command = new DestroyControllerCommand();\n        command.init(controllerId);\n        return command;\n    }\n\n    static createDestroyContextCommand() {\n        return new DestroyContextCommand();\n    }\n\n    static createStartLongPollCommand() {\n        return new StartLongPollCommand();\n    }\n\n    static createInterruptLongPollCommand() {\n        return new InterruptLongPollCommand();\n    }\n\n    static createCreatePresentationModelCommand(presentationModel) {\n        const command = new CreatePresentationModelCommand();\n        command.init(presentationModel);\n        return command;\n    }\n\n    static createDeletePresentationModelCommand(pmId) {\n        const command = new DeletePresentationModelCommand();\n        command.init(pmId);\n        return command;\n    }\n\n    static createPresentationModelDeletedCommand(pmId) {\n        let command = new PresentationModelDeletedCommand();\n        command.init(pmId);\n        return command;\n    }\n\n    static createValueChangedCommand(attributeId, newValue) {\n        let command = new ValueChangedCommand();\n        command.init(attributeId, newValue);\n        return command;\n    }\n\n    static createChangeAttributeMetadataCommand(attributeId, metadataName, value) {\n        let command = new ChangeAttributeMetadataCommand();\n        command.init(attributeId, metadataName, value);\n        return command;\n    }\n\n    static createAttributeMetadataChangedCommand(attributeId, metadataName, value) {\n        let command = new AttributeMetadataChangedCommand();\n        command.init(attributeId, metadataName, value);\n        return command;\n    }\n}","import Attribute from './attribute'\nimport EventBus from './eventBus'\nimport CommandFactory from './commands/commandFactory';\nimport {ADDED_TYPE, REMOVED_TYPE} from './constants'\nimport { LoggerFactory } from '../logging';\n\nexport default class ClientModelStore {\n\n    constructor(clientDolphin) {\n\n        this.clientDolphin = clientDolphin;\n        this.presentationModels = new Map();\n        this.presentationModelsPerType = new Map();\n        this.attributesPerId = new Map();\n        this.attributesPerQualifier = new Map();\n        this.modelStoreChangeBus = new EventBus();\n    }\n\n    getClientDolphin() {\n        return this.clientDolphin;\n    }\n\n    registerAttribute(attribute) {\n        this.addAttributeById(attribute);\n        if (attribute.getQualifier()) {\n            this.addAttributeByQualifier(attribute);\n        }\n        // whenever an attribute changes its value, the server needs to be notified\n        // and all other attributes with the same qualifier are given the same value\n        attribute.onValueChange((evt) => {\n            if(evt.newValue !== evt.oldValue && evt.sendToServer === true) {\n                const command = CommandFactory.createValueChangedCommand(attribute.id, evt.newValue);\n                this.clientDolphin.getClientConnector().send(command, null);\n            }\n\n            if (attribute.getQualifier()) {\n                let attrs = this.findAttributesByFilter((attr) => {\n                    return attr !== attribute && attr.getQualifier() === attribute.getQualifier();\n                });\n                attrs.forEach((attr) => {\n                    attr.setValue(attribute.getValue());\n                });\n            }\n\n        });\n        attribute.onQualifierChange((evt) => {\n            this.clientDolphin.getClientConnector().send(CommandFactory.createChangeAttributeMetadataCommand(attribute.id, Attribute.QUALIFIER_PROPERTY, evt.newValue), null);\n        });\n    }\n\n    add(model, sendToServer = true) {\n        if (!model) {\n            return false;\n        }\n        if (this.presentationModels.has(model.id)) {\n            ClientModelStore.LOGGER.error(\"There already is a PM with id \" + model.id);\n        }\n        let added = false;\n        if (!this.presentationModels.has(model.id)) {\n            this.presentationModels.set(model.id, model);\n            this.addPresentationModelByType(model);\n\n            if(sendToServer) {\n                let connector = this.clientDolphin.getClientConnector();\n                connector.send(CommandFactory.createCreatePresentationModelCommand(model), null);\n            }\n\n            model.getAttributes().forEach(attribute => {\n                this.registerAttribute(attribute);\n            });\n            this.modelStoreChangeBus.trigger({ 'eventType': ADDED_TYPE, 'clientPresentationModel': model });\n            added = true;\n        }\n        return added;\n    }\n\n    remove(model) {\n        if (!model) {\n            return false;\n        }\n        let removed = false;\n        if (this.presentationModels.has(model.id)) {\n            this.removePresentationModelByType(model);\n            this.presentationModels.delete(model.id);\n            model.getAttributes().forEach((attribute) => {\n                this.removeAttributeById(attribute);\n                if (attribute.getQualifier()) {\n                    this.removeAttributeByQualifier(attribute);\n                }\n            });\n            this.modelStoreChangeBus.trigger({ 'eventType': REMOVED_TYPE, 'clientPresentationModel': model });\n            removed = true;\n        }\n        return removed;\n    }\n\n    findAttributesByFilter(filter) {\n        let matches = [];\n        this.presentationModels.forEach((model) => {\n            model.getAttributes().forEach((attr) => {\n                if (filter(attr)) {\n                    matches.push(attr);\n                }\n            });\n        });\n        return matches;\n    }\n\n    addPresentationModelByType(model) {\n        if (!model) {\n            return;\n        }\n        let type = model.presentationModelType;\n        if (!type) {\n            return;\n        }\n        let presentationModels = this.presentationModelsPerType.get(type);\n        if (!presentationModels) {\n            presentationModels = [];\n            this.presentationModelsPerType.set(type, presentationModels);\n        }\n        if (!(presentationModels.indexOf(model) > -1)) {\n            presentationModels.push(model);\n        }\n    }\n\n    removePresentationModelByType(model) {\n        if (!model || !(model.presentationModelType)) {\n            return;\n        }\n        let presentationModels = this.presentationModelsPerType.get(model.presentationModelType);\n        if (!presentationModels) {\n            return;\n        }\n        if (presentationModels.length > -1) {\n            presentationModels.splice(presentationModels.indexOf(model), 1);\n        }\n        if (presentationModels.length === 0) {\n            this.presentationModelsPerType.delete(model.presentationModelType);\n        }\n    }\n\n    listPresentationModelIds() {\n        let result = [];\n        let iter = this.presentationModels.keys();\n        let next = iter.next();\n        while (!next.done) {\n            result.push(next.value);\n            next = iter.next();\n        }\n        return result;\n    }\n\n    listPresentationModels() {\n        let result = [];\n        let iter = this.presentationModels.values();\n        let next = iter.next();\n        while (!next.done) {\n            result.push(next.value);\n            next = iter.next();\n        }\n        return result;\n    }\n\n    findPresentationModelById(id) {\n        return this.presentationModels.get(id);\n    }\n\n    findAllPresentationModelByType(type) {\n        if (!type || !this.presentationModelsPerType.has(type)) {\n            return [];\n        }\n        return this.presentationModelsPerType.get(type).slice(0); // slice is used to clone the array\n    }\n\n    deletePresentationModel(model, notify) {\n        if (!model) {\n            return;\n        }\n        if (this.containsPresentationModel(model.id)) {\n            this.remove(model);\n            if (!notify || model.clientSideOnly) {\n                return;\n            }\n            this.clientDolphin.getClientConnector().send(CommandFactory.createPresentationModelDeletedCommand(model.id), null);\n        }\n    }\n\n    containsPresentationModel(id) {\n        return this.presentationModels.has(id);\n    }\n\n    addAttributeById(attribute) {\n        if (!attribute || this.attributesPerId.has(attribute.id)) {\n            return;\n        }\n        this.attributesPerId.set(attribute.id, attribute);\n    }\n\n    removeAttributeById(attribute) {\n        if (!attribute || !this.attributesPerId.has(attribute.id)) {\n            return;\n        }\n        this.attributesPerId.delete(attribute.id);\n    }\n\n    findAttributeById(id) {\n        return this.attributesPerId.get(id);\n    }\n\n    addAttributeByQualifier(attribute) {\n        if (!attribute || !attribute.getQualifier()) {\n            return;\n        }\n        let attributes = this.attributesPerQualifier.get(attribute.getQualifier());\n        if (!attributes) {\n            attributes = [];\n            this.attributesPerQualifier.set(attribute.getQualifier(), attributes);\n        }\n        if (!(attributes.indexOf(attribute) > -1)) {\n            attributes.push(attribute);\n        }\n    }\n\n    removeAttributeByQualifier(attribute) {\n        if (!attribute || !attribute.getQualifier()) {\n            return;\n        }\n        let attributes = this.attributesPerQualifier.get(attribute.getQualifier());\n        if (!attributes) {\n            return;\n        }\n        if (attributes.length > -1) {\n            attributes.splice(attributes.indexOf(attribute), 1);\n        }\n        if (attributes.length === 0) {\n            this.attributesPerQualifier.delete(attribute.getQualifier());\n        }\n    }\n\n    findAllAttributesByQualifier(qualifier) {\n        if (!qualifier || !this.attributesPerQualifier.has(qualifier)) {\n            return [];\n        }\n        return this.attributesPerQualifier.get(qualifier).slice(0); // slice is used to clone the array\n    }\n\n    onModelStoreChange(eventHandler) {\n        this.modelStoreChangeBus.onEvent(eventHandler);\n    }\n\n    onModelStoreChangeForType(presentationModelType, eventHandler) {\n        this.modelStoreChangeBus.onEvent(pmStoreEvent => {\n            if (pmStoreEvent.clientPresentationModel.presentationModelType == presentationModelType) {\n                eventHandler(pmStoreEvent);\n            }\n        });\n    }\n}\n\nClientModelStore.LOGGER = LoggerFactory.getLogger('ClientModelStore');\n\n","export default class NoTransmitter {\n\n    transmit(commands, onDone) {\n        // do nothing special\n        onDone([]);\n    }\n\n    signal() {\n        // do nothing\n    }\n\n    reset() {\n        // do nothing\n    }\n}","import ClientConnector from './clientConnector'\nimport ClientDolphin from './clientDolphin'\nimport ClientModelStore from './clientModelStore'\nimport NoTransmitter from './noTransmitter'\nimport { LoggerFactory } from '../logging';\n\n\nclass DolphinBuilder {\n\n    constructor() {\n        this.slackMS = 300;\n        this.maxBatchSize = 50;\n        this.transmitter = null;\n    }\n\n    withSlackMS(slackMS) {\n        this.slackMS = slackMS;\n        return this;\n    }\n\n    withMaxBatchSize(maxBatchSize) {\n        this.maxBatchSize = maxBatchSize;\n        return this;\n    }\n\n    withTransmitter(transmitter) {\n        this.transmitter = transmitter;\n        return this;\n    }\n\n    build() {\n        const clientDolphin = new ClientDolphin();\n        let transmitter;\n        if (this.transmitter) {\n            transmitter = this.transmitter;\n        } else {\n            transmitter = new NoTransmitter();\n        }\n        clientDolphin.setClientConnector(new ClientConnector(transmitter, clientDolphin, this.slackMS, this.maxBatchSize));\n        clientDolphin.setClientModelStore(new ClientModelStore(clientDolphin));\n        DolphinBuilder.LOGGER.debug(\"Remoting client initialized\", clientDolphin, transmitter);\n        return clientDolphin;\n    }\n}\n\nDolphinBuilder.LOGGER = LoggerFactory.getLogger('DolphinBuilder');\n\nconst dolphinBuilder = new DolphinBuilder();\n\nexport { dolphinBuilder }","import {exists, checkMethod, checkParam} from '../utils';\nimport CommandFactory from './commands/commandFactory';\nimport {ADDED_TYPE, REMOVED_TYPE} from './constants';\n\n\nconst DOLPHIN_BEAN = '@@@ R_BEAN @@@';\nconst ACTION_CALL_BEAN = '@@@ CONTROLLER_ACTION_CALL_BEAN @@@';\nconst HIGHLANDER_BEAN = '@@@ HIGHLANDER_BEAN @@@';\nconst DOLPHIN_LIST_SPLICE = '@R:LS@';\nconst SOURCE_SYSTEM = '@@@ SOURCE_SYSTEM @@@';\nconst SOURCE_SYSTEM_CLIENT = 'client';\nconst SOURCE_SYSTEM_SERVER = 'server';\n\nexport default class Connector{\n\n    constructor(url, dolphin, classRepository, config) {\n        checkMethod('Connector(url, dolphin, classRepository, config)');\n        checkParam(url, 'url');\n        checkParam(dolphin, 'dolphin');\n        checkParam(classRepository, 'classRepository');\n\n        let self = this;\n        this.dolphin = dolphin;\n        this.config = config;\n        this.classRepository = classRepository;\n        this.highlanderPMResolver = function() {};\n        this.highlanderPMPromise = new Promise((resolve) => {\n            self.highlanderPMResolver = resolve;\n        });\n\n        dolphin.getClientModelStore().onModelStoreChange((event) => {\n            let model = event.clientPresentationModel;\n            let sourceSystem = model.findAttributeByPropertyName(SOURCE_SYSTEM);\n            if (exists(sourceSystem) && sourceSystem.value === SOURCE_SYSTEM_SERVER) {\n                if (event.eventType === ADDED_TYPE) {\n                    self.onModelAdded(model);\n                } else if (event.eventType === REMOVED_TYPE) {\n                    self.onModelRemoved(model);\n                }\n            }\n        });\n    }\n    connect() {\n        let that = this;\n            that.dolphin.startPushListening(CommandFactory.createStartLongPollCommand(), CommandFactory.createInterruptLongPollCommand());\n    }\n\n    onModelAdded(model) {\n        checkMethod('Connector.onModelAdded(model)');\n        checkParam(model, 'model');\n\n        var type = model.presentationModelType;\n        switch (type) {\n            case ACTION_CALL_BEAN:\n                // ignore\n                break;\n            case DOLPHIN_BEAN:\n                this.classRepository.registerClass(model);\n                break;\n            case HIGHLANDER_BEAN:\n                this.highlanderPMResolver(model);\n                break;\n            case DOLPHIN_LIST_SPLICE:\n                this.classRepository.spliceListEntry(model);\n                this.dolphin.deletePresentationModel(model);\n                break;\n            default:\n                this.classRepository.load(model);\n                break;\n        }\n    }\n\n    onModelRemoved(model) {\n        checkMethod('Connector.onModelRemoved(model)');\n        checkParam(model, 'model');\n        let type = model.presentationModelType;\n        switch (type) {\n            case DOLPHIN_BEAN:\n                this.classRepository.unregisterClass(model);\n                break;\n            case DOLPHIN_LIST_SPLICE:\n                // do nothing\n                break;\n            default:\n                this.classRepository.unload(model);\n                break;\n        }\n    }\n\n    invoke(command) {\n        checkMethod('Connector.invoke(command)');\n        checkParam(command, 'command');\n\n        var dolphin = this.dolphin;\n        return new Promise((resolve, reject) => {\n            dolphin.send(command, {\n                onFinished: (params) => {\n                    resolve(params);\n                },\n                onError: (reason) => {\n                    reject(reason);\n                } \n            });\n        });\n    }\n\n    getHighlanderPM() {\n        return this.highlanderPMPromise;\n    }\n}\n\nexport { SOURCE_SYSTEM, SOURCE_SYSTEM_CLIENT, SOURCE_SYSTEM_SERVER, ACTION_CALL_BEAN };\n","import {exists, checkMethod, checkParam} from '../utils';\nimport { LoggerFactory } from '../logging';\n\nexport default class BeanManager {\n\n    constructor(classRepository) {\n        checkMethod('BeanManager(classRepository)');\n        checkParam(classRepository, 'classRepository');\n\n        this.classRepository = classRepository;\n        this.addedHandlers = new Map();\n        this.removedHandlers = new Map();\n        this.updatedHandlers = new Map();\n        this.arrayUpdatedHandlers = new Map();\n        this.allAddedHandlers = [];\n        this.allRemovedHandlers = [];\n        this.allUpdatedHandlers = [];\n        this.allArrayUpdatedHandlers = [];\n\n        this._handleBeanAdded = this._handleBeanAdded.bind(this);\n        this._handleBeanRemoved = this._handleBeanRemoved.bind(this);\n        this._handleBeanUpdate = this._handleBeanUpdate.bind(this);\n        this._handleArrayUpdate = this._handleArrayUpdate.bind(this);\n\n        this.classRepository.onBeanAdded(this._handleBeanAdded);\n        this.classRepository.onBeanRemoved(this._handleBeanRemoved);\n        this.classRepository.onBeanUpdate(this._handleBeanUpdate);\n        this.classRepository.onArrayUpdate(this._handleArrayUpdate);\n    }\n\n    _handleBeanAdded(type, bean) {\n        const handlerList = this.addedHandlers.get(type);\n        if (exists(handlerList)) {\n            handlerList.forEach((handler) => {\n                try {\n                    handler(bean);\n                } catch (e) {\n                    BeanManager.LOGGER.error('An exception occurred while calling an onBeanAdded-handler for type', type, e);\n                }\n            });\n        }\n        this.allAddedHandlers.forEach((handler) => {\n            try {\n                handler(bean);\n            } catch (e) {\n                BeanManager.LOGGER.error('An exception occurred while calling a general onBeanAdded-handler', e);\n            }\n        });\n    }\n\n    _handleBeanRemoved(type, bean) {\n        const handlerList = this.removedHandlers.get(type);\n        if (exists(handlerList)) {\n            handlerList.forEach((handler) => {\n                try {\n                    handler(bean);\n                } catch (e) {\n                    BeanManager.LOGGER.error('An exception occurred while calling an onBeanRemoved-handler for type', type, e);\n                }\n            });\n        }\n        this.allRemovedHandlers.forEach((handler) => {\n            try {\n                handler(bean);\n            } catch (e) {\n                BeanManager.LOGGER.error('An exception occurred while calling a general onBeanRemoved-handler', e);\n            }\n        });\n    }\n\n    _handleArrayUpdate(type, bean, propertyName, index, count, newElements) {\n        const handlerList = this.arrayUpdatedHandlers.get(type);\n        if (exists(handlerList)) {\n            handlerList.forEach((handler) => {\n                try {\n                    handler(bean, propertyName, index, count, newElements);\n                } catch (e) {\n                    BeanManager.LOGGER.error('An exception occurred while calling an onArrayUpdate-handler for type', type, e);\n                }\n            });\n        }\n        this.allArrayUpdatedHandlers.forEach((handler) => {\n            try {\n                handler(bean, propertyName, index, count, newElements);\n            } catch (e) {\n                BeanManager.LOGGER.error('An exception occurred while calling a general onArrayUpdate-handler', e);\n            }\n        });\n    }\n\n    _handleBeanUpdate(type, bean, propertyName, newValue, oldValue) {\n        const handlerList = this.updatedHandlers.get(type);\n        if (exists(handlerList)) {\n            handlerList.forEach((handler) => {\n                try {\n                    handler(bean, propertyName, newValue, oldValue);\n                } catch (e) {\n                    BeanManager.LOGGER.error('An exception occurred while calling an onBeanUpdate-handler for type', type, e);\n                }\n            });\n        }\n        this.allUpdatedHandlers.forEach((handler) => {\n            try {\n                handler(bean, propertyName, newValue, oldValue);\n            } catch (e) {\n                BeanManager.LOGGER.error('An exception occurred while calling a general onBeanUpdate-handler', e);\n            }\n        });\n    }\n\n\n    notifyBeanChange(bean, propertyName, newValue) {\n        checkMethod('BeanManager.notifyBeanChange(bean, propertyName, newValue)');\n        checkParam(bean, 'bean');\n        checkParam(propertyName, 'propertyName');\n\n        return this.classRepository.notifyBeanChange(bean, propertyName, newValue);\n    }\n\n\n    notifyArrayChange(bean, propertyName, index, count, removedElements) {\n        checkMethod('BeanManager.notifyArrayChange(bean, propertyName, index, count, removedElements)');\n        checkParam(bean, 'bean');\n        checkParam(propertyName, 'propertyName');\n        checkParam(index, 'index');\n        checkParam(count, 'count');\n        checkParam(removedElements, 'removedElements');\n\n        this.classRepository.notifyArrayChange(bean, propertyName, index, count, removedElements);\n    }\n\n\n    isManaged(bean) {\n        checkMethod('BeanManager.isManaged(bean)');\n        checkParam(bean, 'bean');\n\n        // TODO: Implement dolphin.isManaged() [DP-7]\n        throw new Error(\"Not implemented yet\");\n    }\n\n\n    create(type) {\n        checkMethod('BeanManager.create(type)');\n        checkParam(type, 'type');\n\n        // TODO: Implement dolphin.create() [DP-7]\n        throw new Error(\"Not implemented yet\");\n    }\n\n\n    add(type, bean) {\n        checkMethod('BeanManager.add(type, bean)');\n        checkParam(type, 'type');\n        checkParam(bean, 'bean');\n\n        // TODO: Implement dolphin.add() [DP-7]\n        throw new Error(\"Not implemented yet\");\n    }\n\n\n    addAll(type, collection) {\n        checkMethod('BeanManager.addAll(type, collection)');\n        checkParam(type, 'type');\n        checkParam(collection, 'collection');\n\n        // TODO: Implement dolphin.addAll() [DP-7]\n        throw new Error(\"Not implemented yet\");\n    }\n\n\n    remove(bean) {\n        checkMethod('BeanManager.remove(bean)');\n        checkParam(bean, 'bean');\n\n        // TODO: Implement dolphin.remove() [DP-7]\n        throw new Error(\"Not implemented yet\");\n    }\n\n\n    removeAll(collection) {\n        checkMethod('BeanManager.removeAll(collection)');\n        checkParam(collection, 'collection');\n\n        // TODO: Implement dolphin.removeAll() [DP-7]\n        throw new Error(\"Not implemented yet\");\n    }\n\n\n    removeIf(predicate) {\n        checkMethod('BeanManager.removeIf(predicate)');\n        checkParam(predicate, 'predicate');\n\n        // TODO: Implement dolphin.removeIf() [DP-7]\n        throw new Error(\"Not implemented yet\");\n    }\n\n\n    onAdded(type, eventHandler) {\n        let self = this;\n        if (!exists(eventHandler)) {\n            eventHandler = type;\n            checkMethod('BeanManager.onAdded(eventHandler)');\n            checkParam(eventHandler, 'eventHandler');\n\n            this.allAddedHandlers = this.allAddedHandlers.concat(eventHandler);\n            return {\n                unsubscribe: () => {\n                    self.allAddedHandlers = self.allAddedHandlers.filter((value) => {\n                        return value !== eventHandler;\n                    });\n                }\n            };\n        } else {\n            checkMethod('BeanManager.onAdded(type, eventHandler)');\n            checkParam(type, 'type');\n            checkParam(eventHandler, 'eventHandler');\n\n            let handlerList = this.addedHandlers.get(type);\n            if (!exists(handlerList)) {\n                handlerList = [];\n            }\n            this.addedHandlers.set(type, handlerList.concat(eventHandler));\n            return {\n                unsubscribe: () => {\n                    const handlerList = self.addedHandlers.get(type);\n                    if (exists(handlerList)) {                   \n                        self.addedHandlers.set(type, handlerList.filter((value) => {\n                            return value !== eventHandler;\n                        }));\n                    }\n                }\n            };\n        }\n    }\n\n\n    onRemoved(type, eventHandler) {\n        let self = this;\n        if (!exists(eventHandler)) {\n            eventHandler = type;\n            checkMethod('BeanManager.onRemoved(eventHandler)');\n            checkParam(eventHandler, 'eventHandler');\n\n            this.allRemovedHandlers = this.allRemovedHandlers.concat(eventHandler);\n            return {\n                unsubscribe: () => {\n                    self.allRemovedHandlers = self.allRemovedHandlers.filter((value) => {\n                        return value !== eventHandler;\n                    });\n                }\n            };\n        } else {\n            checkMethod('BeanManager.onRemoved(type, eventHandler)');\n            checkParam(type, 'type');\n            checkParam(eventHandler, 'eventHandler');\n\n            let handlerList = this.removedHandlers.get(type);\n            if (!exists(handlerList)) {\n                handlerList = [];\n            }\n            this.removedHandlers.set(type, handlerList.concat(eventHandler));\n            return {\n                unsubscribe: () => {\n                    const handlerList = self.removedHandlers.get(type);\n                    if (exists(handlerList)) {\n                        self.removedHandlers.set(type, handlerList.filter((value) => {\n                            return value !== eventHandler;\n                        }));\n                    }\n                }\n            };\n        }\n    }\n\n\n    onBeanUpdate(type, eventHandler) {\n        let self = this;\n        if (!exists(eventHandler)) {\n            eventHandler = type;\n            checkMethod('BeanManager.onBeanUpdate(eventHandler)');\n            checkParam(eventHandler, 'eventHandler');\n\n            this.allUpdatedHandlers = this.allUpdatedHandlers.concat(eventHandler);\n            return {\n                unsubscribe: () => {\n                    self.allUpdatedHandlers = self.allUpdatedHandlers.filter((value) => {\n                        return value !== eventHandler;\n                    });\n                }\n            };\n        } else {\n            checkMethod('BeanManager.onBeanUpdate(type, eventHandler)');\n            checkParam(type, 'type');\n            checkParam(eventHandler, 'eventHandler');\n\n            let handlerList = this.updatedHandlers.get(type);\n            if (!exists(handlerList)) {\n                handlerList = [];\n            }\n            this.updatedHandlers.set(type, handlerList.concat(eventHandler));\n            return {\n                unsubscribe: () => {\n                    let handlerList = self.updatedHandlers.get(type);\n                    if (exists(handlerList)) {\n                        self.updatedHandlers.set(type, handlerList.filter((value) => {\n                            return value !== eventHandler;\n                        }));\n                    }\n                }\n            };\n        }\n    }\n\n    onArrayUpdate(type, eventHandler) {\n        let self = this;\n        if (!exists(eventHandler)) {\n            eventHandler = type;\n            checkMethod('BeanManager.onArrayUpdate(eventHandler)');\n            checkParam(eventHandler, 'eventHandler');\n\n            this.allArrayUpdatedHandlers = this.allArrayUpdatedHandlers.concat(eventHandler);\n            return {\n                unsubscribe: () => {\n                    self.allArrayUpdatedHandlers = self.allArrayUpdatedHandlers.filter((value) => {\n                        return value !== eventHandler;\n                    });\n                }\n            };\n        } else {\n            checkMethod('BeanManager.onArrayUpdate(type, eventHandler)');\n            checkParam(type, 'type');\n            checkParam(eventHandler, 'eventHandler');\n\n            let handlerList = this.arrayUpdatedHandlers.get(type);\n            if (!exists(handlerList)) {\n                handlerList = [];\n            }\n            this.arrayUpdatedHandlers.set(type, handlerList.concat(eventHandler));\n            return {\n                unsubscribe: () => {\n                    let handlerList = self.arrayUpdatedHandlers.get(type);\n                    if (exists(handlerList)) {\n                        self.arrayUpdatedHandlers.set(type, handlerList.filter((value) => {\n                            return value !== eventHandler;\n                        }));\n                    }\n                }\n            };\n        }\n    }\n}\n\nBeanManager.LOGGER = LoggerFactory.getLogger('BeanManager');\n","import * as consts from './constants';\nimport {exists, checkMethod, checkParam} from '../utils';\nimport { LoggerFactory } from '../logging';\n\nclass ClassRepository {\n\n    constructor(dolphin) {\n        checkMethod('ClassRepository(dolphin)');\n        checkParam(dolphin, 'dolphin');\n\n        this.dolphin = dolphin;\n        this.classes = new Map();\n        this.beanFromDolphin = new Map();\n        this.beanToDolphin = new Map();\n        this.classInfos = new Map();\n        this.beanAddedHandlers = [];\n        this.beanRemovedHandlers = [];\n        this.propertyUpdateHandlers = [];\n        this.arrayUpdateHandlers = [];\n        this.blocked = null;\n    }\n\n    sendListSplice(classRepository, modelId, propertyName, from, to, newElements) {\n        let dolphin = classRepository.dolphin;\n        let model = dolphin.findPresentationModelById(modelId);\n        if (exists(model)) {\n            let classInfo = classRepository.classes.get(model.presentationModelType);\n            let type = classInfo[propertyName];\n            if (exists(type)) {\n\n                let attributes = [\n                    dolphin.attribute('@@@ SOURCE_SYSTEM @@@', null, 'client'),\n                    dolphin.attribute('source', null, modelId),\n                    dolphin.attribute('attribute', null, propertyName),\n                    dolphin.attribute('from', null, from),\n                    dolphin.attribute('to', null, to),\n                    dolphin.attribute('count', null, newElements.length)\n                ];\n                newElements.forEach(function (element, index) {\n                    attributes.push(dolphin.attribute(index.toString(), null, ClassRepository.toDolphin(classRepository, type, element)));\n                });\n                dolphin.presentationModel.apply(dolphin, [null, '@DP:LS@'].concat(attributes));\n            }\n        }\n    }\n\n    validateList(classRepository, type, bean, propertyName) {\n        let list = bean[propertyName];\n        if (!exists(list)) {\n            classRepository.propertyUpdateHandlers.forEach(function (handler) {\n                try {\n                    handler(type, bean, propertyName, [], undefined);\n                } catch (e) {\n                    ClassRepository.LOGGER.error('An exception occurred while calling an onBeanUpdate-handler', e);\n                }\n            });\n        }\n    }\n\n    block(bean, propertyName) {\n        if (exists(this.blocked)) {\n            throw new Error('Trying to create a block while another block exists');\n        }\n        this.blocked = {\n            bean: bean,\n            propertyName: propertyName\n        };\n    }\n\n    isBlocked(bean, propertyName) {\n        return exists(this.blocked) && this.blocked.bean === bean && this.blocked.propertyName === propertyName;\n    }\n\n    unblock() {\n        this.blocked = null;\n    }\n\n    notifyBeanChange(bean, propertyName, newValue) {\n        checkMethod('ClassRepository.notifyBeanChange(bean, propertyName, newValue)');\n        checkParam(bean, 'bean');\n        checkParam(propertyName, 'propertyName');\n\n        let modelId = this.beanToDolphin.get(bean);\n        if (exists(modelId)) {\n            let model = this.dolphin.findPresentationModelById(modelId);\n            if (exists(model)) {\n                let classInfo = this.classes.get(model.presentationModelType);\n                let type = classInfo[propertyName];\n                let attribute = model.findAttributeByPropertyName(propertyName);\n                if (exists(type) && exists(attribute)) {\n                    let oldValue = attribute.getValue();\n                    attribute.setValue(ClassRepository.toDolphin(this, type, newValue));\n                    return ClassRepository.fromDolphin(this, type, oldValue);\n                }\n            }\n        }\n    }\n\n    notifyArrayChange(bean, propertyName, index, count, removedElements) {\n        checkMethod('ClassRepository.notifyArrayChange(bean, propertyName, index, count, removedElements)');\n        checkParam(bean, 'bean');\n        checkParam(propertyName, 'propertyName');\n        checkParam(index, 'index');\n        checkParam(count, 'count');\n        checkParam(removedElements, 'removedElements');\n\n        if (this.isBlocked(bean, propertyName)) {\n            return;\n        }\n        let modelId = this.beanToDolphin.get(bean);\n        let array = bean[propertyName];\n        if (exists(modelId) && exists(array)) {\n            let removedElementsCount = Array.isArray(removedElements) ? removedElements.length : 0;\n            this.sendListSplice(this, modelId, propertyName, index, index + removedElementsCount, array.slice(index, index + count));\n        }\n    }\n\n    onBeanAdded(handler) {\n        checkMethod('ClassRepository.onBeanAdded(handler)');\n        checkParam(handler, 'handler');\n        this.beanAddedHandlers.push(handler);\n    }\n\n    onBeanRemoved(handler) {\n        checkMethod('ClassRepository.onBeanRemoved(handler)');\n        checkParam(handler, 'handler');\n        this.beanRemovedHandlers.push(handler);\n    }\n\n    onBeanUpdate(handler) {\n        checkMethod('ClassRepository.onBeanUpdate(handler)');\n        checkParam(handler, 'handler');\n        this.propertyUpdateHandlers.push(handler);\n    }\n\n    onArrayUpdate(handler) {\n        checkMethod('ClassRepository.onArrayUpdate(handler)');\n        checkParam(handler, 'handler');\n        this.arrayUpdateHandlers.push(handler);\n    }\n\n    registerClass(model) {\n        checkMethod('ClassRepository.registerClass(model)');\n        checkParam(model, 'model');\n\n        if (this.classes.has(model.id)) {\n            return;\n        }\n\n        let classInfo = {};\n        model.attributes.filter(function (attribute) {\n            return attribute.propertyName.search(/^@/) < 0;\n        }).forEach(function (attribute) {\n            classInfo[attribute.propertyName] = attribute.value;\n        });\n        this.classes.set(model.id, classInfo);\n    }\n\n    unregisterClass(model) {\n        checkMethod('ClassRepository.unregisterClass(model)');\n        checkParam(model, 'model');\n        this.classes['delete'](model.id);\n    }\n\n    load(model) {\n        checkMethod('ClassRepository.load(model)');\n        checkParam(model, 'model');\n\n        let self = this;\n        let classInfo = this.classes.get(model.presentationModelType);\n        let bean = {};\n        model.attributes.filter(function (attribute) {\n            return (attribute.propertyName.search(/^@/) < 0);\n        }).forEach(function (attribute) {\n            bean[attribute.propertyName] = null;\n            attribute.onValueChange(function (event) {\n                if (event.oldValue !== event.newValue) {\n                    let oldValue = ClassRepository.fromDolphin(self, classInfo[attribute.propertyName], event.oldValue);\n                    let newValue = ClassRepository.fromDolphin(self, classInfo[attribute.propertyName], event.newValue);\n                    self.propertyUpdateHandlers.forEach((handler) => {\n                        try {\n                            handler(model.presentationModelType, bean, attribute.propertyName, newValue, oldValue);\n                        } catch (e) {\n                            ClassRepository.LOGGER.error('An exception occurred while calling an onBeanUpdate-handler', e);\n                        }\n                    });\n                }\n            });\n        });\n        this.beanFromDolphin.set(model.id, bean);\n        this.beanToDolphin.set(bean, model.id);\n        this.classInfos.set(model.id, classInfo);\n        this.beanAddedHandlers.forEach((handler) => {\n            try {\n                handler(model.presentationModelType, bean);\n            } catch (e) {\n                ClassRepository.LOGGER.error('An exception occurred while calling an onBeanAdded-handler', e);\n            }\n        });\n        return bean;\n    }\n\n    unload(model) {\n        checkMethod('ClassRepository.unload(model)');\n        checkParam(model, 'model');\n\n        let bean = this.beanFromDolphin.get(model.id);\n        this.beanFromDolphin['delete'](model.id);\n        this.beanToDolphin['delete'](bean);\n        this.classInfos['delete'](model.id);\n        if (exists(bean)) {\n            this.beanRemovedHandlers.forEach((handler) => {\n                try {\n                    handler(model.presentationModelType, bean);\n                } catch (e) {\n                    ClassRepository.LOGGER.error('An exception occurred while calling an onBeanRemoved-handler', e);\n                }\n            });\n        }\n        return bean;\n    }\n\n    spliceListEntry(model) {\n        checkMethod('ClassRepository.spliceListEntry(model)');\n        checkParam(model, 'model');\n\n        let source = model.findAttributeByPropertyName('source');\n        let attribute = model.findAttributeByPropertyName('attribute');\n        let from = model.findAttributeByPropertyName('from');\n        let to = model.findAttributeByPropertyName('to');\n        let count = model.findAttributeByPropertyName('count');\n\n        if (exists(source) && exists(attribute) && exists(from) && exists(to) && exists(count)) {\n            let classInfo = this.classInfos.get(source.value);\n            let bean = this.beanFromDolphin.get(source.value);\n            if (exists(bean) && exists(classInfo)) {\n                let type = model.presentationModelType;\n                //var entry = fromDolphin(this, classInfo[attribute.value], element.value);\n                this.validateList(this, type, bean, attribute.value);\n                let newElements = [],\n                    element = null;\n                for (let i = 0; i < count.value; i++) {\n                    element = model.findAttributeByPropertyName(i.toString());\n                    if (!exists(element)) {\n                        throw new Error(\"Invalid list modification update received\");\n                    }\n                    newElements.push(ClassRepository.fromDolphin(this, classInfo[attribute.value], element.value));\n                }\n                try {\n                    this.block(bean, attribute.value);\n                    this.arrayUpdateHandlers.forEach((handler) => {\n                        try {\n                            handler(type, bean, attribute.value, from.value, to.value - from.value, newElements);\n                        } catch (e) {\n                            ClassRepository.LOGGER.error('An exception occurred while calling an onArrayUpdate-handler', e);\n                        }\n                    });\n                } finally {\n                    this.unblock();\n                }\n            } else {\n                throw new Error(\"Invalid list modification update received. Source bean unknown.\");\n            }\n        } else {\n            throw new Error(\"Invalid list modification update received\");\n        }\n    }\n\n    mapParamToDolphin(param) {\n        if (!exists(param)) {\n            return param;\n        }\n        let type = typeof param;\n        if (type === 'object') {\n            if (param instanceof Date) {\n                return param.toISOString();\n            } else {\n                let value = this.beanToDolphin.get(param);\n                if (exists(value)) {\n                    return value;\n                }\n                throw new TypeError(\"Only managed remoting beans can be used\");\n            }\n        }\n        if (type === 'string' || type === 'number' || type === 'boolean') {\n            return param;\n        }\n        throw new TypeError(\"Only managed remoting beans and primitive types can be used\");\n    }\n\n    mapDolphinToBean(value) {\n        return ClassRepository.fromDolphin(this, consts.REMOTING_BEAN, value);\n    }\n}\n\nClassRepository.fixType = function(type, value) {\n    switch (type) {\n        case consts.BYTE:\n        case consts.SHORT:\n        case consts.INT:\n        case consts.LONG:\n            return parseInt(value);\n        case consts.FLOAT:\n        case consts.DOUBLE:\n            return parseFloat(value);\n        case consts.BOOLEAN:\n            return 'true' === String(value).toLowerCase();\n        case consts.STRING:\n        case consts.ENUM:\n            return String(value);\n        default:\n            return value;\n    }\n};\n\nClassRepository.fromDolphin = function(classRepository, type, value) {\n    if (!exists(value)) {\n        return null;\n    }\n    switch (type) {\n        case consts.REMOTING_BEAN:\n            return classRepository.beanFromDolphin.get(String(value));\n        case consts.DATE:\n            return new Date(String(value));\n        case consts.CALENDAR:\n            return new Date(String(value));\n        case consts.LOCAL_DATE_FIELD_TYPE:\n            return new Date(String(value));\n        case consts.LOCAL_DATE_TIME_FIELD_TYPE:\n            return new Date(String(value));\n        case consts.ZONED_DATE_TIME_FIELD_TYPE:\n            return new Date(String(value));\n        default:\n            return ClassRepository.fixType(type, value);\n    }\n};\n\nClassRepository.toDolphin = function(classRepository, type, value) {\n    if (!exists(value)) {\n        return null;\n    }\n    switch (type) {\n        case consts.REMOTING_BEAN:\n            return classRepository.beanToDolphin.get(value);\n        case consts.DATE:\n            return value instanceof Date ? value.toISOString() : value;\n        case consts.CALENDAR:\n            return value instanceof Date ? value.toISOString() : value;\n        case consts.LOCAL_DATE_FIELD_TYPE:\n            return value instanceof Date ? value.toISOString() : value;\n        case consts.LOCAL_DATE_TIME_FIELD_TYPE:\n            return value instanceof Date ? value.toISOString() : value;\n        case consts.ZONED_DATE_TIME_FIELD_TYPE:\n            return value instanceof Date ? value.toISOString() : value;\n        default:\n            return ClassRepository.fixType(type, value);\n    }\n};\n\nClassRepository.LOGGER = LoggerFactory.getLogger('ClassRepository');\n\nexport default ClassRepository;\n","import {checkMethod, checkParam} from '../utils';\nimport { LoggerFactory } from '../logging';\n\nexport default class ControllerProxy {\n\n    constructor(controllerId, model, manager){\n        checkMethod('ControllerProxy(controllerId, model, manager)');\n        checkParam(controllerId, 'controllerId');\n        checkParam(model, 'model');\n        checkParam(manager, 'manager');\n\n        this.controllerId = controllerId;\n        this.model = model;\n        this.manager = manager;\n        this.destroyed = false;\n        this.onDestroyedHandlers = new Set();\n    }\n\n    getModel() {\n        return this.model;\n    }\n\n    getId() {\n        return this.controllerId;\n    }\n\n    invoke(name, params){\n        checkMethod('ControllerProxy.invoke(name, params)');\n        checkParam(name, 'name');\n\n        if (this.destroyed) {\n            throw new Error('The controller was already destroyed');\n        }\n        return this.manager.invokeAction(this.controllerId, name, params);\n    }\n\n    createController(name) {\n        return this.manager._createController(name, this.getId());\n    }\n\n    destroy(){\n        if (this.destroyed) {\n            throw new Error('The controller was already destroyed');\n        }\n        this.destroyed = true;\n        this.onDestroyedHandlers.forEach((handler) => {\n            try {\n                handler(this);\n            } catch(e) {\n                ControllerProxy.LOGGER.error('An exception occurred while calling an onDestroyed-handler', e);\n            }\n        }, this);\n        return this.manager.destroyController(this);\n    }\n\n    onDestroyed(handler){\n        checkMethod('ControllerProxy.onDestroyed(handler)');\n        checkParam(handler, 'handler');\n\n        let self = this;\n        this.onDestroyedHandlers.add(handler);\n        return {\n            unsubscribe: () => {\n                self.onDestroyedHandlers.delete(handler);\n            }\n        };\n    }\n}\n\nControllerProxy.LOGGER = LoggerFactory.getLogger('ControllerProxy');\n","import {exists, checkMethod, checkParam} from '../utils';\n\nimport ControllerProxy from './controllerProxy.js';\n\nimport CommandFactory from './commands/commandFactory.js';\n\n\nimport { SOURCE_SYSTEM } from './connector.js';\nimport { SOURCE_SYSTEM_CLIENT } from './connector.js';\nimport { ACTION_CALL_BEAN } from './connector.js';\n\nconst CONTROLLER_ID = 'controllerId';\nconst MODEL = 'model';\nconst ERROR_CODE = 'errorCode';\n\nexport default class ControllerManager {\n\n    constructor(dolphin, classRepository, connector) {\n        checkMethod('ControllerManager(dolphin, classRepository, connector)');\n        checkParam(dolphin, 'dolphin');\n        checkParam(classRepository, 'classRepository');\n        checkParam(connector, 'connector');\n\n        this.dolphin = dolphin;\n        this.classRepository = classRepository;\n        this.connector = connector;\n        this.controllers = new Set();\n    }\n\n    createController(name) {\n        return this._createController(name, null);\n    }\n\n    _createController(name, parentControllerId) {\n        checkMethod('ControllerManager.createController(name)');\n        checkParam(name, 'name');\n\n        let self = this;\n\n        return new Promise((resolve, reject) => {\n            self.connector.getHighlanderPM().then((highlanderPM) => {\n                const MSG_ERROR_CREATING_CONTROLLER = 'Error creating controller: ';\n\n                self.connector.invoke(CommandFactory.createCreateControllerCommand(name, parentControllerId)).then(() => {\n                    let controllerId;\n\n                    self.getValueWithRetry(\n                            () => highlanderPM.findAttributeByPropertyName(CONTROLLER_ID).getValue(),\n                            'Could not get an controllerID from highlanderPM.'\n                        ).then((ctrlId) => {\n                            controllerId = ctrlId;\n                            return self.getValueWithRetry(\n                                () => highlanderPM.findAttributeByPropertyName(MODEL).getValue(),\n                                'Could not get an modelID from highlanderPM.'\n                            );\n                        })\n                        .then((modelId) => {\n                            return self.getValueWithRetry(\n                                () => self.classRepository.mapDolphinToBean(modelId),\n                                'Could not get an model from classRepository for ID: ' + modelId\n                            );\n                        })\n                        .then((model) => {\n                            try {\n                                const controller = new ControllerProxy(controllerId, model, self);\n                                self.controllers.add(controller);\n                                resolve(controller);\n                            } catch (e) {\n                                reject(MSG_ERROR_CREATING_CONTROLLER + e);\n                            }\n                        }).catch((error) => {\n                            reject(MSG_ERROR_CREATING_CONTROLLER + error);\n                        });\n                }).catch((error) => {\n                    reject(MSG_ERROR_CREATING_CONTROLLER + error);\n                });\n            });\n        });\n    }\n\n\n    getValueWithRetry(getValueCall, errorMessage) {\n        return new Promise((resolve, reject) => {\n            const RETRIES = 1000;\n            const RETRY_TIME = 5;\n            let i = 0;\n            const intervalID = setInterval(() => {\n                let value = getValueCall();\n                \n                if (!(typeof value !== 'undefined' && value !== null)) {\n                    i++;\n                    if (i >= RETRIES) {\n                        clearInterval(intervalID);\n                        reject(errorMessage + \" after \" + i + \" retries.\");\n                    }\n                } else {\n                    clearInterval(intervalID);\n                    resolve(value);\n                }\n            }, RETRY_TIME);\n        });\n    }\n\n    invokeAction(controllerId, actionName, params) {\n        checkMethod('ControllerManager.invokeAction(controllerId, actionName, params)');\n        checkParam(controllerId, 'controllerId');\n        checkParam(actionName, 'actionName');\n\n        let self = this;\n        return new Promise((resolve, reject) => {\n\n            let attributes = [\n                self.dolphin.attribute(SOURCE_SYSTEM, null, SOURCE_SYSTEM_CLIENT),\n                self.dolphin.attribute(ERROR_CODE)\n            ];\n\n            let pm = self.dolphin.presentationModel.apply(self.dolphin, [null, ACTION_CALL_BEAN].concat(attributes));\n\n            let actionParams = [];\n            if (exists(params)) {\n                for (var param in params) {\n                    if (params.hasOwnProperty(param)) {\n                        let value = self.classRepository.mapParamToDolphin(params[param]);\n                        actionParams.push({\n                            name: param,\n                            value: value\n                        });\n                    }\n                }\n            }\n\n            self.connector.invoke(CommandFactory.createCallActionCommand(controllerId, actionName, actionParams)).then(() => {\n                let isError = pm.findAttributeByPropertyName(ERROR_CODE).getValue();\n                if (isError) {\n                    reject(new Error(\"Server side ControllerAction \" + actionName + \" caused an error. Please see server log for details.\"));\n                } else {\n                    resolve();\n                }\n                self.dolphin.deletePresentationModel(pm);\n            }).catch(reject);\n        });\n    }\n\n    destroyController(controller) {\n        checkMethod('ControllerManager.destroyController(controller)');\n        checkParam(controller, 'controller');\n\n        let self = this;\n        return new Promise((resolve, reject) => {\n            self.connector.getHighlanderPM().then((highlanderPM) => {\n                self.controllers.delete(controller);\n                highlanderPM.findAttributeByPropertyName(CONTROLLER_ID).setValue(controller.controllerId);\n                self.connector.invoke(CommandFactory.createDestroyControllerCommand(controller.getId())).then(resolve).catch(reject);\n            });\n        });\n    }\n\n    destroy() {\n        let controllersCopy = this.controllers;\n        let promises = [];\n        this.controllers = new Set();\n        controllersCopy.forEach((controller) => {\n            try {\n                promises.push(controller.destroy());\n            } catch (e) {\n                // ignore\n            }\n        });\n        return Promise.all(promises);\n    }\n}\n","import Emitter from 'emitter-component';\nimport CommandFactory from './commands/commandFactory';\nimport {exists, checkMethod, checkParam} from '../utils';\n\nexport default class ClientContext{\n\n    constructor(dolphin, beanManager, controllerManager, connector){\n        checkMethod('ClientContext(dolphin, beanManager, controllerManager, connector)');\n        checkParam(dolphin, 'dolphin');\n        checkParam(beanManager, 'beanManager');\n        checkParam(controllerManager, 'controllerManager');\n        checkParam(connector, 'connector');\n\n        this.dolphin = dolphin;\n        this.beanManager = beanManager;\n        this._controllerManager = controllerManager;\n        this._connector = connector;\n        this.connectionPromise = null;\n        this.isConnected = false;\n    }\n\n    connect(){\n        let self = this;\n        this.connectionPromise = new Promise((resolve, reject) => {\n            self._connector.connect();\n            self._connector.invoke(CommandFactory.createCreateContextCommand()).then(() => {\n                self.isConnected = true;\n                resolve();\n            }).catch(reject);\n        });\n        return this.connectionPromise;\n    }\n\n    onConnect(){\n        if(exists(this.connectionPromise)){\n            if(!this.isConnected){\n                return this.connectionPromise;\n            }else{\n                return new Promise((resolve) => {\n                    resolve();\n                });\n            }\n        }else{\n            return this.connect();\n        }\n    }\n\n    createController(name){\n        checkMethod('ClientContext.createController(name)');\n        checkParam(name, 'name');\n\n        return this._controllerManager.createController(name);\n    }\n\n    disconnect(){\n        let self = this;\n        this.dolphin.stopPushListening();\n        return new Promise((resolve) => {\n            self._controllerManager.destroy().then(() => {\n                self._connector.invoke(CommandFactory.createDestroyContextCommand());\n                self.dolphin = null;\n                self.beanManager = null;\n                self._controllerManager = null;\n                self._connector = null;\n                resolve();\n            });\n        });\n    }\n}\n\nEmitter(ClientContext.prototype);","export class DolphinRemotingError extends Error {\n  constructor(message = 'Remoting Error', detail) {\n    super(message);\n    this.detail = detail || undefined;\n  }\n}\n\nexport class DolphinSessionError extends Error {\n  constructor(message = 'Session Error') {\n    super(message);\n  }\n}\n\nexport class HttpResponseError extends Error {\n  constructor(message = 'Http Response Error') {\n    super(message);\n  }\n}\n\nexport class HttpNetworkError extends Error {\n    constructor(message = 'Http Network Error') {\n        super(message);\n    }\n}","import { LoggerFactory } from '../logging';\n\nexport default class RemotingErrorHandler {\n\n    onError(error) {\n        RemotingErrorHandler.LOGGER.error(error);\n    }\n\n}\n\nRemotingErrorHandler.LOGGER = LoggerFactory.getLogger('RemotingErrorHandler');","import Emitter from 'emitter-component';\n\n\nimport { exists } from '../utils';\nimport { DolphinRemotingError, DolphinSessionError } from './errors';\nimport Codec from './commands/codec';\nimport RemotingErrorHandler from './remotingErrorHandler';\nimport { LoggerFactory, LogLevel } from '../logging';\nimport {VALUE_CHANGED_COMMAND_ID, START_LONG_POLL_COMMAND_ID} from './commands/commandConstants';\n\nconst DOLPHIN_SESSION_TIMEOUT = 408;\n\nexport default class PlatformHttpTransmitter {\n\n    constructor(url, config, client) {\n        this.url = url;\n        this.config = config;\n        this.client = client;\n        this.headersInfo = exists(config) ? config.headersInfo : null;\n        this.failed_attempt = 0;\n\n        const connectionConfig =  this._connectionConfig();\n        this.maxRetry = exists(connectionConfig) && exists(connectionConfig.maxRetry)?connectionConfig.maxRetry: 3;\n        this.timeout = exists(connectionConfig) && exists(connectionConfig.timeout)?connectionConfig.timeout: 5000;\n    }\n\n    _connectionConfig() {\n        return exists(this.config) ? this.config.connection : null;\n    }\n\n    _handleError(reject, error) {\n        const connectionConfig =  this._connectionConfig();\n        let errorHandlers = exists(connectionConfig) && exists(connectionConfig.errorHandlers)?connectionConfig.errorHandlers: [new RemotingErrorHandler()];\n        errorHandlers.forEach(function(handler) {\n            handler.onError(error);\n        });\n        reject(error);\n    }\n\n    _send(commands) {\n        const self = this;\n        return new Promise((resolve, reject) => {\n            if (this.client) {\n                const encodedCommands = Codec.encode(commands);\n\n                if (PlatformHttpTransmitter.LOGGER.isLogLevelUseable(LogLevel.DEBUG) && !PlatformHttpTransmitter.LOGGER.isLogLevelUseable(LogLevel.TRACE)) {\n                    for (let i = 0; i < commands.length; i++) {\n                        let command = commands[i];\n                        if (command.id === VALUE_CHANGED_COMMAND_ID) {\n                            PlatformHttpTransmitter.LOGGER.debug('send', command, encodedCommands);\n                        }\n                    }\n                }\n\n                const useWorker = commands.length === 1 && commands[0].id === START_LONG_POLL_COMMAND_ID;\n                const httpClient = this.client.getService('HttpClient');\n                if (httpClient && self.failed_attempt <= self.maxRetry) {\n                    httpClient.post(self.url)\n                    .withHeadersInfo(this.headersInfo)\n                    .withContent(encodedCommands)\n                    .readString()\n                    .execute(useWorker)\n                    .then((response) => {\n                        resolve(response.content);\n                    })\n                    .catch((exception) => {\n                        const status = exception.getStatus();\n                        self.failed_attempt += 1;\n                        if (status === DOLPHIN_SESSION_TIMEOUT) {\n                            self._handleError(reject, new DolphinSessionError('PlatformHttpTransmitter: Session Timeout'));\n                        } else {\n                            self._handleError(reject, exception);\n                        }\n                    });\n                } else {\n                    //TODO handle failure\n                    PlatformHttpTransmitter.LOGGER.error('Cannot reach the sever');\n                }\n            } else {\n                PlatformHttpTransmitter.LOGGER.error('No Rico client found!');\n            }\n        });\n    }\n\n    transmit(commands, onDone, onError) {\n        this._send(commands)\n            .then(responseText => {\n                if (responseText.trim().length > 0) {\n                    try {\n                        const responseCommands = Codec.decode(responseText);\n                        onDone(responseCommands);\n                    } catch (err) {\n                        const errorMsg = 'PlatformHttpTransmitter: Parse error: (Incorrect response = ' + responseText + ')';\n                        this.emit('error', new DolphinRemotingError(errorMsg));\n                        onError(errorMsg);\n                    }\n                } else {\n                    const errorMsg = 'PlatformHttpTransmitter: Empty response';\n                    this.emit('error', new DolphinRemotingError(errorMsg));\n                    onError(errorMsg);\n                }\n            })\n            .catch(error => {\n                this.emit('error', error);\n                onError(error);\n            });\n    }\n\n    signal(command) {\n        this._send([command])\n            .catch(error => this.emit('error', error));\n    }\n}\n\nPlatformHttpTransmitter.LOGGER = LoggerFactory.getLogger('PlatformHttpTransmitter');\n\nEmitter(PlatformHttpTransmitter.prototype);\n","import { dolphinBuilder } from './dolphinBuilder';\nimport { checkMethod, checkParam } from '../utils';\nimport { LoggerFactory } from '../logging';\nimport Connector from './connector';\nimport BeanManager from './beanManager';\nimport ClassRepository from './classRepository';\nimport ControllerManager from './controllerManager';\nimport ClientContext from './clientContext';\nimport PlatformHttpTransmitter from './platformHttpTransmitter';\n\nclass ClientContextFactory {\n\n    constructor(client) {\n        this.client = client;\n        if (!client && ClientContextFactory.legecyClientSupport) {\n            ClientContextFactory.LOGGER.warn('Legecy support used.');\n            this.client = ClientContextFactory.legecyClientSupport;\n        }\n    }\n\n    create(url, config){\n        checkMethod('connect(url, config)');\n        checkParam(url, 'url');\n        ClientContextFactory.LOGGER.debug('Creating client context', url, config);\n\n        const transmitter = new PlatformHttpTransmitter(url, config, this.client);\n        transmitter.on('error', function (error) {\n            clientContext.emit('error', error);\n        });\n\n        const dolphin = dolphinBuilder\n            .withTransmitter(transmitter)\n            .withSlackMS(4)\n            .withMaxBatchSize(Number.MAX_SAFE_INTEGER)\n            .build();\n\n\n        const classRepository = new ClassRepository(dolphin);\n        const beanManager = new BeanManager(classRepository);\n        const connector = new Connector(url, dolphin, classRepository, config);\n        const controllerManager = new ControllerManager(dolphin, classRepository, connector);\n\n        const clientContext = new ClientContext(dolphin, beanManager, controllerManager, connector);\n\n        ClientContextFactory.LOGGER.debug('clientContext created with', clientContext);\n\n        return clientContext;\n    }\n}\n\nClientContextFactory.LOGGER = LoggerFactory.getLogger('ClientContextFactory');\nClientContextFactory.legecyClientSupport = false;\n\nlet createClientContext = (client) => new ClientContextFactory(client).create;\n\nexport { createClientContext, ClientContextFactory };","import { checkMethod, checkParam, exists } from '../utils';\nimport { HTTP, RESPONSE_TYPE } from '../platform/constants'\n\nclass KeycloakConnection {\n\n    constructor() {\n    }\n\n    createDirectConnection(authEndpoint, realmName) {\n        checkMethod('createDirectConnection');\n        checkParam(authEndpoint, 'authEndpoint');\n        checkParam(realmName, 'realmName');\n\n        const httpRequest = new XMLHttpRequest();\n        httpRequest.open(HTTP.METHOD.POST, authEndpoint + '/auth/realms/' + realmName + '/protocol/openid-connect/token', true);\n        httpRequest.setRequestHeader(HTTP.HEADER_NAME.CONTENT_TYPE, HTTP.CONTENT_TYPE.APPLICATION_X_WWW_FORM_URLENCODED);\n        httpRequest.responseType = RESPONSE_TYPE.JSON;\n\n        return httpRequest;\n    }\n\n    createServerProxyConnection(authEndpoint, realmName) {\n        checkMethod('createServerProxyConnection');\n        checkParam(authEndpoint, 'authEndpoint');\n\n        const httpRequest = new XMLHttpRequest();\n        httpRequest.open(HTTP.METHOD.POST, authEndpoint, true);\n        httpRequest.setRequestHeader(HTTP.HEADER_NAME.CONTENT_TYPE, HTTP.CONTENT_TYPE.TEXT_PLAIN);\n        if (exists(realmName)) {\n            httpRequest.setRequestHeader(HTTP.HEADER_NAME.X_PLATFORM_SECURITY_REALM, realmName);\n        }\n        httpRequest.responseType = RESPONSE_TYPE.JSON;\n\n        return httpRequest;\n    }\n\n}\n\nexport { KeycloakConnection }","import { HTTP } from '../platform/constants'\nimport { exists } from '../utils';\nimport { LoggerFactory } from '../logging';\nimport { KeycloakConnection } from './keycloakConnection';\n\nclass KeycloakFunctions {\n\n    constructor() {\n        this.connection = new KeycloakConnection();\n    }\n\n    createLoginConnection(directConnection, authEndpoint, realmName, appName, user, password) {\n        let connection;\n        let content;\n\n        const encodedUser = encodeURIComponent(user);\n        const encodedPassword = encodeURIComponent(password);\n        const encodedAppName = encodeURIComponent(appName);\n\n        if (directConnection) {\n            if (exists(appName)) {\n                connection = this.connection.createDirectConnection(authEndpoint,realmName);\n                content = 'client_id=' + encodedAppName + '&username=' + encodedUser + '&password=' + encodedPassword + '&grant_type=password';\n            } else {\n                throw Error('No app name set!');\n            }\n        } else {\n            connection = this.connection.createServerProxyConnection(authEndpoint, realmName);\n            content = 'username=' + encodedUser + '&password=' + encodedPassword + '&grant_type=password';\n        }\n\n        return { connection, content };\n    }\n\n    createRefreshConnection(directConnection, authEndpoint, realmName, appName, refreshToken) {\n        let connection;\n        let content;\n\n        const encodedAppName = encodeURIComponent(appName);\n\n        if (directConnection) {\n            if (exists(appName)) {\n                connection = this.connection.createDirectConnection(authEndpoint, realmName);\n                content = 'grant_type=refresh_token&refresh_token=' + refreshToken + '&client_id=' + encodedAppName;\n            } else {\n                throw Error('No app name set!');\n            }\n        } else {\n            connection = this.connection.createServerProxyConnection(authEndpoint, realmName);\n            content = 'grant_type=refresh_token&refresh_token=' + refreshToken;\n        }\n\n        return { connection, content };\n    }\n\n    receiveToken(httpRequest, body) {\n        return new Promise((resolve, reject) => {\n            httpRequest.ontimeout = function (error) {\n                reject(error);\n            }\n\n            httpRequest.onerror = function (error) {\n                reject(error);\n            }\n\n            httpRequest.onreadystatechange = function () {\n                if (this.readyState === HTTP.XMLHTTPREQUEST_READYSTATE.DONE && this.status === HTTP.STATUS.OK) {\n                    resolve(this.response);\n                } else if (this.readyState === HTTP.XMLHTTPREQUEST_READYSTATE.DONE && this.status !== HTTP.STATUS.OK) {\n                    reject(this.status);\n                }\n            }\n            \n            KeycloakFunctions.LOGGER.trace('Receiving token');\n            httpRequest.send(body);\n        });\n    }\n\n    refreshToken(directConnection, authEndpoint, realmName, appName, refreshToken) {\n        const { connection, content } = this.createRefreshConnection(directConnection, authEndpoint, realmName, appName, refreshToken);\n        return this.receiveToken(connection, content);\n    }\n    \n}\n\nKeycloakFunctions.LOGGER = LoggerFactory.getLogger('KeycloakFunctions');\n\nexport { KeycloakFunctions }","import { checkMethod, checkParam, exists } from '../utils'\nimport { LoggerFactory } from '../logging'\nimport { HTTP } from '../platform/constants'\n\nclass SecurityHttpClientInterceptor {\n\n    constructor() {\n        this.token = null;\n        this.appName = null;\n        this.realm = null;\n    }\n\n    setToken(token) {\n        this.token = token;\n    }\n\n    setAppName(appName) {\n        this.appName = appName;\n    }\n\n    setRealm(realm) {\n        this.realm = realm;\n    }\n\n    handleRequest(httpRequest) {\n        checkMethod('handleRequest');\n        checkParam(httpRequest, 'httpRequest');\n\n        if (exists(this.token)) {\n            SecurityHttpClientInterceptor.LOGGER.trace('Using token', this.token);\n            httpRequest.setRequestHeader(HTTP.HEADER_NAME.AUTHORIZATION, 'Bearer ' + this.token);\n        }\n\n        if (exists(this.appName)) {\n            SecurityHttpClientInterceptor.LOGGER.trace('Using appName', this.appName);\n            httpRequest.setRequestHeader(HTTP.HEADER_NAME.X_PLATFORM_SECURITY_APPLICATION, this.appName);\n        }\n\n        if (exists(this.realm)) {\n            SecurityHttpClientInterceptor.LOGGER.trace('Using realm', this.realm);\n            httpRequest.setRequestHeader(HTTP.HEADER_NAME.X_PLATFORM_SECURITY_REALM, this.realm);\n        }\n\n        httpRequest.setRequestHeader(HTTP.HEADER_NAME.X_PLATFORM_SECURITY_BEARER_ONLY, 'true');\n        \n    }\n}\n\nSecurityHttpClientInterceptor.LOGGER = LoggerFactory.getLogger('SecurityHttpClientInterceptor');\n\nexport { SecurityHttpClientInterceptor };","import { LoggerFactory } from '../logging';\nimport { exists, checkMethod, checkParam } from '../utils';\nimport { KeycloakFunctions } from './keycloakFunctions';\nimport { SecurityHttpClientInterceptor } from './securityHttpClientInterceptor';\nimport { SECURITY } from '../platform/constants'\n\nclass KeycloakSecurity {\n\n    constructor() {\n        this.functions = new KeycloakFunctions();\n        this.interceptor = new SecurityHttpClientInterceptor();\n        this.intervall = null;\n\n        this.configuration = {\n            directConnection: false,\n            authEndpoint: SECURITY.AUTH_ENDPOINT,\n            appName: null,\n            realmName: null\n        }\n       \n    }\n\n    login(user, password, configuration) {\n        if (this.isAuthorized()) {\n            throw new Error('Already logged in!');\n        }\n\n        if (configuration) {\n            this.configuration.directConnection = configuration.directConnection || this.configuration.directConnection;\n            this.configuration.authEndpoint = configuration.authEndpoint || this.configuration.authEndpoint;\n            this.configuration.appName = configuration.appName || this.configuration.appName;\n            this.configuration.realmName = configuration.realmName || this.configuration.realmName;\n        }\n\n        const { directConnection, authEndpoint, appName, realmName } = this.configuration;\n\n        const { connection, content } = this.functions.createLoginConnection(directConnection, authEndpoint, realmName, appName, user, password);\n        const self = this;\n        return new Promise((resolve, reject) => {\n            KeycloakSecurity.LOGGER.debug('Receiving access token');\n            this.functions.receiveToken(connection, content)\n            .then((result) => {\n                if (result && result.access_token) {\n                    self.token = result;\n                    this.interceptor.setToken(result.access_token);\n                    this.interceptor.setRealm(realmName);\n                    this.interceptor.setAppName(appName);\n                    const expires =  result.expires_in || KeycloakSecurity.MIN_TOKEN_EXPIRES_RUN;\n                    const sleepTime = Math.max(KeycloakSecurity.MIN_TOKEN_EXPIRES_RUN, expires - KeycloakSecurity.TOKEN_EXPIRES_DELTA);\n                    self.intervall = setInterval(() => {\n                        KeycloakSecurity.LOGGER.debug('Refreshing access token');\n                        self.functions.refreshToken(directConnection, authEndpoint, realmName, appName, result.refresh_token).then((result) => {\n                            self.token = result;\n                            self.interceptor.setToken(result.access_token);\n                        });\n                    }, sleepTime);\n                    resolve(result.access_token);\n                } else {\n                    reject('No access token found');\n                }\n            })\n            .catch((error) => reject(error));\n        });\n    }\n\n    logout() {\n        const self = this;\n        KeycloakSecurity.LOGGER.debug('Logout');\n        return new Promise((resolve) => {\n            delete self.token;\n            self.interceptor.setToken(null);\n            if (exists(this.intervall)) {\n                clearInterval(this.intervall);\n                this.intervall = null;\n            }\n            resolve();\n        });\n    }\n\n    isAuthorized() {\n        return exists(this.token);\n    }\n\n    initServiceProvider(client) {\n        checkMethod('initServiceProvider');\n        checkParam(client, 'client');\n        client.getService('HttpClientInterceptor').addRequestInterceptor(this.interceptor);\n    }\n}\n\nKeycloakSecurity.TOKEN_EXPIRES_DELTA = 10000;\nKeycloakSecurity.MIN_TOKEN_EXPIRES_RUN = 30000;\n\nKeycloakSecurity.LOGGER = LoggerFactory.getLogger('KeycloakSecurity');\n\nexport { KeycloakSecurity };\n","import { HttpClient } from './httpClient';\nimport { HttpClientInterceptor } from './httpClientInterceptor';\nimport { ServiceProvider } from '../platform/serviceProvider';\nimport { exists } from '../utils'\n\nfunction register(client) {\n    if (exists(client)) {\n        const httpClientProvider = new ServiceProvider(HttpClient, 'HttpClient', client);\n        const httpClientInterceptorProvider = new ServiceProvider(HttpClientInterceptor, 'HttpClientInterceptor', client);\n    \n        client.registerServiceProvider(httpClientProvider);\n        client.registerServiceProvider(httpClientInterceptorProvider);\n    }\n}\n\nexport { register }","import { LoggerFactory, LogLevel } from './logging';\nimport { Client } from './platform/client';\nimport { ServiceProvider } from './platform/serviceProvider';\nimport { HTTP } from './platform/constants';\nimport { register as registerHttp } from './http';\nimport { register as registerClientScope } from './platform/clientScope';\nimport { register as registerRemotingScope } from './remoting'\nimport { register as registerSecurity } from './security'\n\nregisterHttp(Client);\nregisterClientScope(Client);\nregisterRemotingScope(Client);\nregisterSecurity(Client);\nClient.init();\n\nconst getService = Client.getService;\nconst hasService = Client.hasService;\nconst registerServiceProvider = Client.registerServiceProvider;\n\n/* eslint-disable */\nClient.LOGGER.info('Rico Version:' , RICO_VERSION);\n/* eslint-enable */\n\nexport { LoggerFactory, LogLevel, getService, hasService, registerServiceProvider, HTTP }\n\nif (window.Worker && window.Blob && window.URL && URL.createObjectURL) {\n    Client.LOGGER.debug('Creating Worker');\n    class HttpWorker {\n        constructor() {\n            /* eslint-disable */\n            this.blob = new Blob([RICO_WORKER], {type: \"application/javascript\"});\n            /* eslint-enable */\n        }\n\n        createWorker() {\n            return new Worker(URL.createObjectURL(this.blob));\n        }\n    }\n\n    const httpWorkerProvider = new ServiceProvider(HttpWorker, 'HttpWorker');\n    Client.registerServiceProvider(httpWorkerProvider);\n}\n\n/* \n * Provide dependencies as global dolphin object for backward compatibility.\n * The code below this comment is deprecated and should be removed in a feature version.\n */\nimport { createClientContext, ClientContextFactory } from './remoting/clientContextFactory'\n\nconst LOGGER = LoggerFactory.getLogger('Deprecated:');\nlet showWarning = true;\nfunction warn() {\n    if (showWarning) {\n        LOGGER.warn('Please do not use \"dolphin\" anymore, it may be removed in the next version! Use the new API instead!');\n        showWarning = false;\n    }\n}\n\nif (window) {\n    window.dolphin = { // TODO remove in next major release\n        get ClientContextFactory() {\n            warn();\n            ClientContextFactory.legecyClientSupport = Client;\n            return ClientContextFactory;\n        },\n        get createClientContext() {\n            warn();\n            return createClientContext(Client);\n        },\n        get LoggerFactory() {\n            warn();\n            return LoggerFactory;\n        },\n        get LogLevel() {\n            warn();\n            return LogLevel;\n        }\n    };\n}","import { ClientContextFactory } from './clientContextFactory'\nimport { ServiceProvider } from '../platform/serviceProvider'\nimport { exists } from '../utils'\n\nfunction register(client) {\n    if (exists(client)) {\n        const clientContextFactoryProvider = new ServiceProvider(ClientContextFactory, 'ClientContextFactory', client);\n\n        client.registerServiceProvider(clientContextFactoryProvider);\n    }\n}\n\nexport { register };","\nimport { ServiceProvider } from '../platform/serviceProvider';\nimport { exists } from '../utils'\nimport { KeycloakSecurity } from './keycloakSecurity';\n\nfunction register(client) {\n    if (exists(client)) {\n        const securityProvider = new ServiceProvider(KeycloakSecurity, 'Security', client);\n        client.registerServiceProvider(securityProvider);\n    }\n}\n\nexport { register }"],"sourceRoot":""}